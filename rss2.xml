<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pega Devlog</title>
    <link>https://jehyunlee.github.io/</link>
    
    <atom:link href="https://jehyunlee.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Pega&#39;s Development log for myself and others</description>
    <pubDate>Thu, 30 Sep 2021 03:43:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pytorch &amp; sklearn pipeline</title>
      <link>https://jehyunlee.github.io/2021/09/29/Python-DL-7-skorch_pipeline/</link>
      <guid>https://jehyunlee.github.io/2021/09/29/Python-DL-7-skorch_pipeline/</guid>
      <pubDate>Wed, 29 Sep 2021 02:57:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;저는 tabular data를 다룹니다.&lt;/li&gt;
&lt;li&gt;간혹 딥러닝을 하고 싶지만 표준화등 전처리도 해야 합니다.&lt;/li&gt;
&lt;li&gt;범주형 변수를 인코딩해서 feature importance도 보고 싶습니다.&lt;/li&gt;
&lt;li&gt;skorc</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>저는 tabular data를 다룹니다.</li><li>간혹 딥러닝을 하고 싶지만 표준화등 전처리도 해야 합니다.</li><li>범주형 변수를 인코딩해서 feature importance도 보고 싶습니다.</li><li>skorch(sklearn + pytorch)를 사용하면 가능합니다.</li></ul><h1 id="1-skorch-sklearn-pytorch"><a href="#1-skorch-sklearn-pytorch" class="headerlink" title="1. skorch = sklearn + pytorch"></a>1. skorch = sklearn + pytorch</h1><p><img src="7_skorch_pipeline.png"></p><blockquote><p><a href="https://skorch.readthedocs.io/en/stable/index.html">skorch documentation</a><br><a href="https://skorch.readthedocs.io/en/stable/user/tutorials.html">skorch tutorials</a></p></blockquote><ul><li>저같은 사람들을 위해 skorch라는 라이브러리가 있습니다.</li><li>scikit-learn의 장점인 <b>grid search 등을 딥러닝과 함께</b> 사용할 수 있고</li><li>tutorial에서 transfer learning, U-Net, Seq2Seq 등을 지원합니다.<br><br><img src="7_skorch_pipeline_9.png"><br></li></ul><h1 id="2-sklearn-pipeline"><a href="#2-sklearn-pipeline" class="headerlink" title="2. sklearn pipeline"></a>2. sklearn pipeline</h1><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html">scikit-learn.pipeline.Pipeline</a></p></blockquote><ul><li>scikit-learn의 파이프라인은 데이터 전처리에서 발생하는 불확실성을 줄여줍니다.</li><li>데이터가 거쳐갈 길을 단단하게 만들어줌으로써 실수를 사전에 예방할 수 있습니다.</li><li>특히 PCA나 One-hot encoding처럼 <b>trainset의 정보를 기억해서 testset에 적용해야 할 때 좋습니다</b>.</li></ul><h2 id="2-1-예제-데이터셋"><a href="#2-1-예제-데이터셋" class="headerlink" title="2.1. 예제 데이터셋"></a>2.1. 예제 데이터셋</h2><ul><li>펭귄 데이터셋을 사용해서 펭귄 체중 예측모델을 만들어 봅니다.</li><li>편의를 위해 결측치까지 싹 지운 채로 시작합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화 설정</span></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">font_title = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;NanumGothic&#x27;</span>, <span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 펭귄 데이터셋 불러오기</span></span><br><span class="line">df_peng = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">df_peng.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">df_peng.isna().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></li><li>실행 결과: 결측치가 모두 제거되었습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">species              0</span><br><span class="line">island               0</span><br><span class="line">bill_length_mm       0</span><br><span class="line">bill_depth_mm        0</span><br><span class="line">flipper_length_mm    0</span><br><span class="line">body_mass_g          0</span><br><span class="line">sex                  0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li></ul><ul><li>데이터셋을 준비합니다.</li><li>펭귄 체중만 y, 나머지는 모두 X입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = df_peng[<span class="string">&quot;body_mass_g&quot;</span>]</span><br><span class="line">X = df_peng.drop(<span class="string">&quot;body_mass_g&quot;</span>, axis=<span class="number">1</span>)</span><br><span class="line">X.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_10.png"><br></li></ul><ul><li>trainset과 testset으로 나눕니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data split</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-pipeline-구축"><a href="#2-2-pipeline-구축" class="headerlink" title="2.2. pipeline 구축"></a>2.2. pipeline 구축</h2><ul><li>scikit-learn으로 pipeline을 구축합니다.</li><li>numerical feature는 회귀모델 적용을 고려한 <code>PolynomialFeatures</code>와</li><li>데이터 정규화를 위한 <code>RobustScaler</code>를 거칩니다.</li><li>categorical feature는 <code>OneHotEncoder</code>를 거칩니다.</li></ul><ul><li><p>필요한 라이브러리를 불러옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoder</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> RobustScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># machine learning models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline</span></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"></span><br><span class="line"><span class="comment"># metrics</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br></pre></td></tr></table></figure></li><li><p>pipeline을 구축하는 함수를 만듭니다.</p></li><li><p><code>get_model_0()</code>을 실행하면 파이프라인이 만들어질 것입니다.</p></li><li><p>전처리 후 머신러닝 모델로는 선형회귀와 랜덤포레스트를 선택할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_0</span>(<span class="params">X_cols, degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    X_cols_ = deepcopy(X_cols)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1-1.categorical feature에 one-hot encoding 적용</span></span><br><span class="line">    cat_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) &amp; <span class="built_in">set</span>([<span class="string">&quot;species&quot;</span>, <span class="string">&quot;island&quot;</span>, <span class="string">&quot;sex&quot;</span>]))</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>, handle_unknown=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-2.numerical feature는 Power Transform과 Scaler를 거침</span></span><br><span class="line">    num_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) - <span class="built_in">set</span>(cat_features))</span><br><span class="line">    num_features.sort()</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree)), </span><br><span class="line">                                      (<span class="string">&quot;scaler&quot;</span>, RobustScaler())</span><br><span class="line">                                     ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 인자 종류별 전처리 적용</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features), </span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 전처리 후 머신러닝 모델 적용</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;lr&quot;</span>:</span><br><span class="line">        ml = LinearRegression(fit_intercept=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;rf&quot;</span>:</span><br><span class="line">        ml = RandomForestRegressor()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 3. Pipeline</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;ml&quot;</span>, ml)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li><li><p>6번째, 10번째 행을 보시면 조금 특이한 처리가 들어가 있습니다.</p></li><li><p><b>feature selection에 사용되는 장치</b>입니다.</p></li><li><p>feature 이름들을 하드코딩하면 feature selection이 불가능하기 때문에 이렇게 합니다.</p></li></ul><ul><li>만들어진 구조를 확인합니다.</li><li>일단 모든 인자를 모두 입력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> set_config</span><br><span class="line">set_config(display=<span class="string">&#x27;diagram&#x27;</span>)</span><br><span class="line">model_0 = get_model_0(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span>)</span><br><span class="line">model_0</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_11.png"><br></li></ul><h2 id="2-3-pipeline-전처리-확인"><a href="#2-3-pipeline-전처리-확인" class="headerlink" title="2.3. pipeline 전처리 확인"></a>2.3. pipeline 전처리 확인</h2><ul><li>pipeline에서 전처리 모듈만 떼어서 실행합니다.</li><li>pipeline의 모듈을 호출하는 방법은 <b>모델이름[“모듈이름”]</b>입니다.</li><li>따라서 우리의 전처리 모듈은 <b>model_0[“preprocessor”]</b>입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X_train_pp = model_0[<span class="string">&quot;preprocessor&quot;</span>].fit_transform(X_train)</span><br><span class="line"><span class="built_in">print</span>(X_train_pp.shape)</span><br><span class="line">X_train_pp[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li>실행 결과: 첫 행만 찍어봤습니다. <b>숫자가 많습니다</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">266</span>, <span class="number">12</span>)</span><br><span class="line">array([ <span class="number">0.</span>        , -<span class="number">0.80645161</span>,  <span class="number">0.08579088</span>,  <span class="number">1.</span>        ,  <span class="number">1.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">1.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        ,  <span class="number">1.</span>        ])</span><br></pre></td></tr></table></figure></li></ul><ul><li>6개의 인자를 넣었는데 12개가 나왔습니다.</li><li>처음의 0은 LinearRegression에서 만든 intercept 항입니다.</li><li>네번째 1부터는 species, island, sex의 one-hot encoding 결과물입니다.</li></ul><ul><li>전처리 이후 데이터 분포도 확인합니다.</li><li>시각화 코드는 다소 길고, 여기선 중요하지 않아서 접었습니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Figure 생성</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Subfigures 생성</span></span><br><span class="line">subfigs = fig.subfigures(nrows=<span class="number">2</span>, wspace=<span class="number">0.05</span>)</span><br><span class="line">subfigs[<span class="number">0</span>].set_facecolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">subfigs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;beige&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subfigs[0]: raw data</span></span><br><span class="line">axs0 = subfigs[<span class="number">0</span>].subplots(ncols=<span class="number">3</span>, nrows=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;bill_depth_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;bill_length_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">1</span>])</span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;flipper_length_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># subfigs[1]: preprocessed data</span></span><br><span class="line">axs1 = subfigs[<span class="number">1</span>].subplots(ncols=<span class="number">3</span>, nrows=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">1</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">2</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">1</span>])</span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">3</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs1:</span><br><span class="line">    ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> axs <span class="keyword">in</span> [axs0, axs1]:</span><br><span class="line">    <span class="keyword">for</span> i, (ax, title) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(axs, [<span class="string">&#x27;bill_depth_mm&#x27;</span>, <span class="string">&#x27;bill_length_mm&#x27;</span>, <span class="string">&#x27;flipper_length_mm&#x27;</span>])):</span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        ax.set_title(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            ax.set_ylabel(<span class="string">&quot; \n&quot;</span>)</span><br><span class="line"></span><br><span class="line">subfigs[<span class="number">0</span>].suptitle(<span class="string">&quot;raw data\n&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">subfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;preprocessed data\n&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">fig.suptitle(<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="7_skorch_pipeline_1.png"><br></p><ul><li>RobustScaler의 효과가 잘 보입니다.</li></ul><h2 id="2-3-pipeline-학습"><a href="#2-3-pipeline-학습" class="headerlink" title="2.3. pipeline 학습"></a>2.3. pipeline 학습</h2><ul><li><p><b>pipeline 전체를 사용해서 학습</b>시킵니다.</p></li><li><p>명령은 scikit-learn 스타일 그대로 <code>.fit()</code>입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_0.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></li><li><p>학습이 잘 되었는지 결과를 확인합니다.</p></li><li><p>parity plot 시각화 코드는 접어두었습니다.</p><details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parity plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">model, y_true, y_pred=<span class="literal">None</span>, X_to_pred=<span class="literal">None</span>, ax=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> y_pred <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        y_pred = model.predict(X_to_pred)</span><br><span class="line">    ax.scatter(y_true, y_pred, **kwargs)</span><br><span class="line">    xbound = ax.get_xbound()</span><br><span class="line">    xticks = [x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> xbound[<span class="number">0</span>] &lt;= x &lt;= xbound[<span class="number">1</span>]]</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.set_yticks(xticks)</span><br><span class="line">    ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    dxbound = <span class="number">0.05</span>*(xbound[<span class="number">1</span>]-xbound[<span class="number">0</span>])</span><br><span class="line">    ax.set_xlim(xbound[<span class="number">0</span>]-dxbound, xbound[<span class="number">1</span>]+dxbound)</span><br><span class="line">    ax.set_ylim(xbound[<span class="number">0</span>]-dxbound, xbound[<span class="number">1</span>]+dxbound)</span><br><span class="line">    </span><br><span class="line">    rmse = mean_squared_error(y_true, y_pred, squared=<span class="literal">False</span>)</span><br><span class="line">    r2 = r2_score(y_true, y_pred)</span><br><span class="line">    ax.text(<span class="number">0.95</span>, <span class="number">0.1</span>, <span class="string">f&quot;RMSE = <span class="subst">&#123;rmse:<span class="number">.2</span>f&#125;</span>\nR2 = <span class="subst">&#123;r2:<span class="number">.2</span>f&#125;</span>&quot;</span>, transform=ax.transAxes, </span><br><span class="line">            fontsize=<span class="number">14</span>, ha=<span class="string">&quot;right&quot;</span>, va=<span class="string">&quot;bottom&quot;</span>, bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;fc&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    ax.grid(<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line">    </span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">plot_parity(model_0, y_train, X_to_pred=X_train, ax=axs[<span class="number">0</span>], c=<span class="string">&quot;g&quot;</span>, s=<span class="number">10</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plot_parity(model_0, y_test, X_to_pred=X_test, ax=axs[<span class="number">1</span>], c=<span class="string">&quot;m&quot;</span>, s=<span class="number">10</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]):</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="7_skorch_pipeline_2.png"><br></p><ul><li><p>단순 선형 회귀 모델인데 제법 쓸만합니다.</p></li><li><p>이제 pipeline에 랜덤포레스트 모델을 탑재해서 돌려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_1 = get_model_0(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;rf&quot;</span>)</span><br><span class="line">model_1.fit(X_train, y_train)</span><br><span class="line">model_1</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_3.png"><br></p></li><li><p>과적합이 의심되긴 하지만 랜덤포레스트도 잘 나오네요.</p></li></ul><ul><li><p>이번에는 <b>feature selection</b>도 되는지 확인합니다.</p></li><li><p>부리 길이<code>bill_length_mm</code>와 종<code>species</code>만 가지고 결과를 예측해봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_2 = get_model_0([<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;species&quot;</span>], degree=<span class="number">1</span>, method=<span class="string">&quot;rf&quot;</span>)</span><br><span class="line">model_2.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_4.png"><br></p></li><li><p>멀쩡한 인자들을 제외했으니 성능이 떨어지는 건 정상입니다.</p></li><li><p><b>pipeline을 작성하기에 따라 feature 중 일부만 넣어도 동작한다</b>는 것이 중요합니다.</p></li></ul><h1 id="3-pytorch-deep-learning"><a href="#3-pytorch-deep-learning" class="headerlink" title="3. pytorch deep learning"></a>3. pytorch deep learning</h1><ul><li>딥러닝은 다른 방법에 비해 복잡하고 연산자원이 많이 들지만 장점이 많습니다.</li><li>이미지나 시계열을 다룰 때 큰 힘을 발휘하는데, 간혹 tabular data에도 필요합니다.</li><li>pytorch만을 사용해서 모델을 만들어보고 pipeline에 탑재해서도 결과를 얻어봅니다.</li></ul><h2 id="3-1-pytorch-only"><a href="#3-1-pytorch-only" class="headerlink" title="3.1. pytorch only"></a>3.1. pytorch only</h2><ul><li><p>파이토치로 신경망 모델을 만들고 같은 데이터로 같은 문제를 풀어봅니다.</p></li><li><p>간단한 신경망 모델을 만듭니다. 나중에 pipeline 안에 넣을 겁니다. </p></li><li><p>feature selection을 대비해서 input dimension을 가변적으로 만듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> CyclicLR</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegressorModule</span>(<span class="params">nn.Module</span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ninput=<span class="number">11</span>, init_weights=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegressorModule, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.model = nn.Sequential(nn.Linear(ninput, <span class="number">16</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">16</span>, <span class="number">16</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">16</span>, <span class="number">12</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">12</span>, <span class="number">8</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">8</span>, <span class="number">1</span>),</span><br><span class="line">                                   )</span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.model(X)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                nn.init.normal_(m.weight, <span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>pytorch에 데이터를 넣으려면 tensor로 만들어야 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train_tensor = torch.Tensor(pd.get_dummies(X_train).astype(np.float32).values)</span><br><span class="line">y_train_tensor = torch.Tensor(y_train.astype(np.float32).values)</span><br></pre></td></tr></table></figure></li><li><p>지금 만든 모델에 학습을 시킬 수 있는 코드를 구현합니다.</p></li><li><p>1만 epoch동안 충분히 데이터를 넣어봅니다.</p></li><li><p>loss function으로는 RMSELoss를 구현해서 사용했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">net = RegressorModule()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RMSELoss</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, eps=<span class="number">1e-6</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.mse = nn.MSELoss()</span><br><span class="line">        self.eps = eps</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,yhat,y</span>):</span></span><br><span class="line">        loss = torch.sqrt(self.mse(yhat,y) + self.eps)</span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line">    </span><br><span class="line">loss_func = RMSELoss()</span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">losses = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    output = net.forward(X_train_tensor)</span><br><span class="line">    loss = loss_func(output, y_train_tensor.view(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    </span><br><span class="line">    losses.append(loss)</span><br><span class="line">    </span><br><span class="line">plt.plot(losses)</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_5.png"><br></p></li></ul><ul><li><p>제법 학습이 잘 된 것 같습니다.</p></li><li><p>예측 성능을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy array를 pytorch tensor로 변환</span></span><br><span class="line">X_test_tensor = torch.Tensor(pd.get_dummies(X_test).astype(np.float32).values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예측값</span></span><br><span class="line">y_pred_train_tensor = net.forward(X_train_tensor)</span><br><span class="line">y_pred_test_tensor = net.forward(X_test_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pytorch tensor를 다시 numpy array로 변환</span></span><br><span class="line">y_pred_train = y_pred_train_tensor.detach().numpy()</span><br><span class="line">y_pred_test = y_pred_test_tensor.detach().numpy()</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_6.png"><br></p></li><li><p><b>딥러닝으로도 제법 괜찮은 성능이 나오는 것</b>을 확인했습니다.</p></li></ul><h2 id="3-2-pytorch-pipeline"><a href="#3-2-pytorch-pipeline" class="headerlink" title="3.2. pytorch @pipeline"></a>3.2. pytorch @pipeline</h2><ul><li><b>skorch를 이용해서 pytorch를 pipeline 안에 탑재합니다.</b></li><li><b>skorch은 pytorch를 scikit-learn 객체처럼 만들어주는 일</b>을 합니다.</li><li>그래서 skorch로 감싼 pytorch 객체의 학습은 <b><code>fit()</code></b>이고,</li><li>예측은 <b><code>.forward()&lt;/b&gt;가 아니라 &lt;b&gt;</code>.predict()</b>입니다.</li></ul><ul><li>skorch의 <code>NeuralNetRegressor()</code>로 딥러닝 모듈 전체를 감싸고,</li><li>학습에 필요한 인자를 매개변수로 전달합니다.</li></ul><ul><li>그리고 중요한 사항이 하나 있습니다.</li><li><b>scikit-learn이 뱉는 <code>np.float64</code>를 <code>np.float32</code>로 변환</b>해야 합니다.</li><li>이를 위해 custom transformer를 만들어 적용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skorch <span class="keyword">import</span> NeuralNetRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator, TransformerMixin</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_T</span>(<span class="params">X_cols, degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    X_cols_ = deepcopy(X_cols)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1-1.categorical feature에 one-hot encoding 적용</span></span><br><span class="line">    cat_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) &amp; <span class="built_in">set</span>([<span class="string">&quot;species&quot;</span>, <span class="string">&quot;island&quot;</span>, <span class="string">&quot;sex&quot;</span>]))</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>, handle_unknown=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-2.numerical feature는 Power Transform과 Scaler를 거침</span></span><br><span class="line">    num_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) - <span class="built_in">set</span>(cat_features))</span><br><span class="line">    num_features.sort()</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree)), </span><br><span class="line">                                      (<span class="string">&quot;scaler&quot;</span>, RobustScaler())</span><br><span class="line">                                     ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 인자 종류별 전처리 적용</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features), </span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. float64를 float32로 변환</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FloatTransformer</span>(<span class="params">BaseEstimator, TransformerMixin</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y=<span class="literal">None</span></span>):</span></span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, x</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.array(x, dtype=np.float32)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 전처리 후 머신러닝 모델 적용</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;lr&quot;</span>:</span><br><span class="line">        ml = LinearRegression(fit_intercept=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;rf&quot;</span>:</span><br><span class="line">        ml = RandomForestRegressor()</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;torch&quot;</span>:</span><br><span class="line">        ninput = <span class="built_in">len</span>(num_features) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;species&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;island&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;sex&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">        net = NeuralNetRegressor(RegressorModule(ninput=ninput, init_weights=<span class="literal">False</span>),</span><br><span class="line">                         max_epochs=<span class="number">1000</span>, verbose=<span class="number">0</span>,</span><br><span class="line">                         warm_start=<span class="literal">True</span>,</span><br><span class="line"><span class="comment">#                          device=&#x27;cuda&#x27;,</span></span><br><span class="line">                         criterion=RMSELoss,</span><br><span class="line">                         optimizer = optim.Adam,</span><br><span class="line">                         optimizer__lr = <span class="number">0.01</span></span><br><span class="line">                        )</span><br><span class="line">        ml = net</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 3. Pipeline</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;float64to32&quot;</span>, FloatTransformer()),</span><br><span class="line">                            (<span class="string">&quot;ml&quot;</span>, ml)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>모델을 만들고 확인합니다.</p></li><li><p>앞서 pytorch로 구현한 뉴럴넷 구조가 그대로 들어가 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_T = get_model_T(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;torch&quot;</span>)</span><br><span class="line">model_T.fit(X_train, y_train.astype(np.float32).values.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">model_T</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_13.png"><br></p></li><li><p><b>성능을 확인합니다.</b> 준수하네요.<br><img src="7_skorch_pipeline_7.png"><br></p></li></ul><h1 id="4-permutation-feature-importance"><a href="#4-permutation-feature-importance" class="headerlink" title="4. permutation feature importance"></a>4. permutation feature importance</h1><ul><li>같은 파이프라인에서 선형, 트리, 딥러닝이 모두 구현되었습니다.</li><li>각각의 인자 중요도를 한번 확인해보겠습니다.</li><li>permutation importance를 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.inspection <span class="keyword">import</span> permutation_importance</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linear Regression</span></span><br><span class="line">pi_0 = permutation_importance(model_0, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random Forest</span></span><br><span class="line">pi_1 = permutation_importance(model_1, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neural Network</span></span><br><span class="line">pi_T = permutation_importance(model_T, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화</span></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">5</span>), constrained_layout=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, pi, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [pi_0, pi_1, pi_T], [<span class="string">&quot;Linear Reg.&quot;</span>, <span class="string">&quot;Random Forest&quot;</span>, <span class="string">&quot;Neural Net&quot;</span>]):</span><br><span class="line">    ax.barh(X_test.columns, pi.importances_mean, xerr=pi.importances_std, color=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">    ax.invert_yaxis()</span><br><span class="line">    ax.set_xlim(<span class="number">0</span>, )</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_8.png"><br></li></ul><ul><li><b>입력 feature별 인자 중요도가 깔끔하게 정리되었습니다.</b></li><li>양상도 전반적으로 비슷하게 나오네요.</li><li>사소한 기능같지만 <b>tabular data를 딥러닝으로 돌렸을 때 이 그림을 그리기가 어려웠습니다.</b></li><li>이 글과 코드가 비슷한 어려움을 겪는 여러분께 도움이 되면 좋겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Deep-Learning/">Deep Learning</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/pytorch/">pytorch</category>
      
      <category domain="https://jehyunlee.github.io/tags/sklearn/">sklearn</category>
      
      <category domain="https://jehyunlee.github.io/tags/pipeline/">pipeline</category>
      
      <category domain="https://jehyunlee.github.io/tags/neural-network/">neural network</category>
      
      
    </item>
    
    <item>
      <title>Full moon</title>
      <link>https://jehyunlee.github.io/2021/09/26/Python-General-9-fullmoon/</link>
      <guid>https://jehyunlee.github.io/2021/09/26/Python-General-9-fullmoon/</guid>
      <pubDate>Sat, 25 Sep 2021 23:52:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;지난 추석, 간만에 긴장을 풀었습니다.&lt;/li&gt;
&lt;li&gt;가끔 취미로 그림을 그리고는 하는데 python으로는 안그렸네요.&lt;/li&gt;
&lt;li&gt;자다가 문득 코드가 떠올라 보름달을 그렸습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-보름달은&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>지난 추석, 간만에 긴장을 풀었습니다.</li><li>가끔 취미로 그림을 그리고는 하는데 python으로는 안그렸네요.</li><li>자다가 문득 코드가 떠올라 보름달을 그렸습니다.</li></ul><h1 id="1-보름달은"><a href="#1-보름달은" class="headerlink" title="1. 보름달은?"></a>1. 보름달은?</h1><ul><li><p><b>보름달</b>이 어떻게 생겼는지 모르는 사람은 없을 겁니다.<br><br><img src="9_fullmoon_01.jpg"><br></p></li><li><p><b>검은 밤 하늘에 떠 있는 하얀 동그라미</b>로 단순화할 수 있습니다.</p></li><li><p>토끼가 방아를 찧고 있는 듯한 모양이 있지만 잠시 잊기로 합니다.</p></li><li><p>하지만 그냥 동그라미를 그리기엔 심심합니다. 작은 동그라미를 여럿 겹칩니다.</p></li></ul><h1 id="2-코드로-그리는-보름달"><a href="#2-코드로-그리는-보름달" class="headerlink" title="2. 코드로 그리는 보름달"></a>2. 코드로 그리는 보름달</h1><h2 id="2-1-코드로-그리는-그림"><a href="#2-1-코드로-그리는-그림" class="headerlink" title="2.1. 코드로 그리는 그림"></a>2.1. 코드로 그리는 그림</h2><blockquote><p><a href="http://www.genmedia.co.kr/news/articleView.html?idxno=12738">젠미디어: 이주행 ETRI 연구원 인터뷰</a><br><a href="https://techcrunch.com/2016/05/08/the-digital-age-of-data-art/">Techcrunch: The digital age of data art</a></p></blockquote><ul><li>무미건조한 코드나 데이터로 아름다움을 만들어내는 분들이 있으십니다.</li><li>데이터 시각화의 심미적 요소를 한껏 활용하는 것으로 볼 수도 있고</li><li>그림을 그리는 도구가 바뀌었을 뿐 데이터와 무관한 아름다움을 추구하기도 합니다.</li><li>이런 분들을 따라해 보기로 합니다<br><br><img src="9_fullmoon_08.png" alt="(좌) 이주행, &quot;Pixel Stack&quot;, (우) Mark Napier &quot;Black and White&quot;"><br></li></ul><h2 id="2-2-약간의-기하학"><a href="#2-2-약간의-기하학" class="headerlink" title="2.2. 약간의 기하학"></a>2.2. 약간의 기하학</h2><ul><li><p>중심을 (0,0)으로 하는 극좌표계 공간을 만듭니다.</p></li><li><p>반지름이 1인 공간 안에 랜덤하게 한 점을 골라 원의 중심을 잡습니다.</p></li><li><p>극좌표계를 사용하여 원점으로부터의 거리과 방위각으로 좌표를 잡으면 편리합니다.</p></li><li><p>matplotlib의 Circle을 이용해서 원을 생성합니다.</p></li><li><p>원의 반지름을 <code>1-원점으로부터의 거리</code>로 설정하면 원의 윤곽선에 항상 맞닿습니다.</p></li><li><p>10개만 그려봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.patches <span class="keyword">import</span> Circle</span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span>    <span class="comment"># 원의 수</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 극좌표계에서 원 생성</span></span><br><span class="line">R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)                   <span class="comment"># 반지름의 범위: 0~1</span></span><br><span class="line">pos_r = np.random.choice(R, size=num)        <span class="comment"># 랜덤 위치 (반지름)</span></span><br><span class="line">pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=num)  <span class="comment"># 랜덤 위치 (방위각)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 직교좌표계 변환</span></span><br><span class="line">pos_x = pos_r * np.cos(pos_a)         <span class="comment"># 직교좌표계 x</span></span><br><span class="line">pos_y = pos_r * np.sin(pos_a)         <span class="comment"># 직교좌표계 y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">    r_circle = <span class="number">1</span>-r  <span class="comment"># 원의 반지름</span></span><br><span class="line">    o = Circle((x, y), r_circle, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">    ax.add_patch(o)</span><br><span class="line">    </span><br><span class="line">ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_02.png"><br></p></li></ul><h2 id="2-3-확률-제어"><a href="#2-3-확률-제어" class="headerlink" title="2.3. 확률 제어"></a>2.3. 확률 제어</h2><ul><li><p>100개를 그리면 이렇습니다.<br><img src="9_fullmoon_03.png"><br></p></li><li><p>뭔가 특이한 점을 느끼셨을까요?</p></li></ul><ul><li><p>원의 중심점 분포를 그리면 이렇습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 점들 사이 최단거리 계산</span></span><br><span class="line">pos_xy = np.array(<span class="built_in">list</span>(<span class="built_in">zip</span>(pos_x, pos_y)))</span><br><span class="line">d_shortests = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> pos_xy:</span><br><span class="line">    dp = pos_xy-p</span><br><span class="line">    d_shortest = np.inf</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dp:</span><br><span class="line">        sd = np.sqrt(d[<span class="number">0</span>]**<span class="number">2</span> + d[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; sd &lt; d_shortest:</span><br><span class="line">            d_shortest = sd</span><br><span class="line">    d_shortests.append(d_shortest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화</span></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].scatter(pos_x, pos_y)</span><br><span class="line">axs[<span class="number">0</span>].axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">sns.kdeplot(d_shortests, cut=<span class="number">0</span>, ax=axs[<span class="number">1</span>], fill=<span class="literal">True</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="built_in">max</span>(d_shortests))</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_04.png"><br></p></li><li><p>원점 부근을 중심으로 하는 점들이 월등히 많습니다.</p></li><li><p>앞서 그림을 그릴 때 원의 반지름을 <code>1-원점으로부터의 거리</code>로 설정했지요.</p></li><li><p><b>큰 원과 작은 원의 수는 비슷하더라도 작은 원은 여기저기 퍼져있고 큰 원은 뭉쳐있다</b>는 의미입니다.</p></li></ul><ul><li>나쁘다는 것은 아닙니다.</li><li>전체 원의 가운데보다 바깥 부분에 많은 선이 그려진다는 뜻이고,</li><li>원의 갯수를 키우는 것 만으로도 뭔가 3D 느낌이 납니다.</li><li>500개를 그리면 이렇게 됩니다.<br><img src="9_fullmoon_05.png"><br></li></ul><ul><li><p>다만, <b>약간의 확률 조작을 통해 연출이 가능하다</b>는 의미입니다.</p></li><li><p>예를 들어 이런 확률분포를 사용하면,<br><img src="9_fullmoon_06.png"><br></p></li><li><p>그림은 이렇게 바뀝니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 극좌표계에서 원 생성</span></span><br><span class="line">R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)                   <span class="comment"># 반지름의 범위: 0~1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.random.choice에 매개변수 p 적용, 확률 제어</span></span><br><span class="line">f = np.float_power(np.sin(R), <span class="number">10</span>)</span><br><span class="line">p = (f/<span class="built_in">max</span>(f))/<span class="built_in">sum</span>(f/<span class="built_in">max</span>(f))</span><br><span class="line">pos_r = np.random.choice(R, size=num, p=p)   <span class="comment"># 랜덤 위치 (반지름)</span></span><br><span class="line">pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=num)  <span class="comment"># 랜덤 위치 (방위각)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 직교좌표계 변환</span></span><br><span class="line">pos_x = pos_r * np.cos(pos_a)         <span class="comment"># 직교좌표계 x</span></span><br><span class="line">pos_y = pos_r * np.sin(pos_a)         <span class="comment"># 직교좌표계 y</span></span><br><span class="line"></span><br><span class="line">r_circles = []</span><br><span class="line"><span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">    r_circle = <span class="number">1</span>-r  <span class="comment"># 원의 반지름</span></span><br><span class="line">    r_circles.append(r_circle)</span><br><span class="line">    o = Circle((x, y), r_circle, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>, lw=<span class="number">0.1</span>)</span><br><span class="line">    ax.add_patch(o)</span><br><span class="line">    </span><br><span class="line">ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_07.png"><br></p></li></ul><h2 id="2-4-달-띄우기"><a href="#2-4-달-띄우기" class="headerlink" title="2.4. 달 띄우기"></a>2.4. 달 띄우기</h2><ul><li><p>달을 그리는 함수를 만들어봅니다.</p></li><li><p>앞에서 만든 함수에 딱 하나, <code>faceccolor</code>와 ‘edgecolor`를 제어하는 매개변수를 추가했습니다.</p></li><li><p>facecolor에 numpy array를 넣으면 랜덤하게 색을 입히는 기능을 추가했고요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_fullmoon</span>(<span class="params">size, scale=<span class="number">5</span>, fc=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;none&quot;</span>, filename=<span class="string">&quot;fullmoon&quot;</span>, **kwargs</span>):</span></span><br><span class="line">    scale = np.<span class="built_in">float</span>(scale)</span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">20</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">    ax.set_facecolor(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    ax.spines[[<span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.set_xticks([])</span><br><span class="line">    ax.set_yticks([])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># random circle</span></span><br><span class="line">    R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, size)</span><br><span class="line">    F = np.float_power(np.sin(R), <span class="number">10</span>)</span><br><span class="line">    P = (<span class="number">1</span>-F/<span class="built_in">max</span>(F))/<span class="built_in">sum</span>(<span class="number">1</span>-F/<span class="built_in">max</span>(F))</span><br><span class="line"></span><br><span class="line">    pos_r = np.random.choice(R, size=size, p=P)</span><br><span class="line">    pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=size)</span><br><span class="line">    pos_x = pos_r * np.cos(pos_a)</span><br><span class="line">    pos_y = pos_r * np.sin(pos_a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(fc, np.ndarray):</span><br><span class="line">            fc = np.array([<span class="number">0.8</span>, <span class="number">0.8</span>, <span class="number">0.8</span>]) + np.array([np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>), np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>), np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>)])</span><br><span class="line">            fc[<span class="number">0</span>] = <span class="built_in">min</span>(fc[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">            fc[<span class="number">1</span>] = <span class="built_in">min</span>(fc[<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">            fc[<span class="number">2</span>] = <span class="built_in">min</span>(fc[<span class="number">2</span>], <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        o = Circle((x, y), <span class="number">1</span>-r, fc=fc, ec=ec, alpha=scale/size, **kwargs)</span><br><span class="line">            </span><br><span class="line">        ax.add_patch(o)</span><br><span class="line"></span><br><span class="line">    ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.png&quot;</span>, dpi=<span class="number">300</span>)</span><br><span class="line">    </span><br><span class="line">plot_fullmoon(<span class="number">10</span>, fc=np.array([<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>]), filename=<span class="string">&quot;fmc_10&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="fmc_10.png"><br></p></li><li><p>원 10개로 그리면 이런 달이 떠오릅니다.</p></li></ul><ul><li>원 20개, 50개, 100개로도 그려볼 수 있겠죠.<br><br><img src="fmc_10-100.png"><br></li></ul><ul><li>꼭 추석이 아니더라도 모두들 둥근 달처럼 행복하시기 바랍니다.<br><br><img src="fmc_200.png"><br></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/General/">General</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/art/">art</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib 3D Plots (2)</title>
      <link>https://jehyunlee.github.io/2021/07/10/Python-DS-80-mpl3d2/</link>
      <guid>https://jehyunlee.github.io/2021/07/10/Python-DS-80-mpl3d2/</guid>
      <pubDate>Sat, 10 Jul 2021 08:09:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib으로 3D Plot을 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.&lt;/li&gt;
&lt;li&gt;막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Matplotlib으로 3D Plot을 할 수 있습니다.</li><li>많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.</li><li>막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.</li></ul><p><strong>Reference</strong></p><blockquote><p><a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">matplotlib tutorial: The mplot3d Toolkit</a><br><a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">numpy.meshgrid</a></p></blockquote><h1 id="3-3D-Visualization"><a href="#3-3D-Visualization" class="headerlink" title="3. 3D Visualization"></a>3. 3D Visualization</h1><ul><li>일반적으로는 x, y축이 있는 2D plot을 만듭니다.</li><li>간혹 3D plot을 그리려면 x, y, z 세 개의 축이 필요합니다.</li><li>3D 공간을 만드는 것부터 그림을 그리는 것까지 알아봅시다.</li></ul><h2 id="3-1-3D-Axes-만들기"><a href="#3-1-3D-Axes-만들기" class="headerlink" title="3.1. 3D Axes 만들기"></a>3.1. 3D Axes 만들기</h2><ul><li><p>3D plot <a href="https://matplotlib.org/stable/gallery/mplot3d/wire3d.html">공식 홈페이지 예제</a>를 보면 대개 이렇게 시작합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> axes3d</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_01.png"><br></p></li><li><p>위 코드를 입력하면 그림과 같이 비어있는 3D 공간이 생성됩니다.</p></li><li><p>공식 홈페이지에 있는 코드이니만큼 표준 코드겠지만 이상한 점이 있습니다.</p></li><li><p><b><code>from mpl_toolkits.mplot3d import axes3d</code></b>를 했는데, <b><code>axes3d</code></b>는 어디 쓴걸까요?</p></li></ul><ul><li><p><b>결론적으로 말씀드리면 사용되지 않았습니다.</b></p></li><li><p>과거에는 2D는 Axes, 3D는 Axes3D 객체에 따로 담았어야 했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">ax = Axes3D(fig)</span><br></pre></td></tr></table></figure></li><li><p>Matplotlib 1.0.0 이후 Axes로 통합되었습니다.</p></li><li><p>따라서 <code>fig.add_subplot(projection=&#39;3d&#39;)</code>만으로 Axes3D를 사용할 수 있는데, <code>projection=&#39;3d&#39;</code>를 사용하려면 <code>import Axes3D</code>가 필요한 것입니다.</p></li><li><p><b>하지만 이마저도 더이상 필요하지 않습니다.</b></p></li><li><p>Matplotlib 3.2.0 이후 따로 import하지 않아도 <code>projection=&#39;3d&#39;</code>를 사용할 수 있습니다.</p></li><li><p>최신 버전은 3.4.2입니다. <b>가급적 최신 버전을 사용하는 것이 좋습니다.</b></p></li></ul><ul><li>1열 3행의 3D axes를 만든다고 하면, 많은 예제 코드에서 이런 식으로 만듭니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">ax0 = fig.add_subplot(<span class="number">131</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">132</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">133</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d2_02.png"><br></li></ul><ul><li><p>그러나 <b>일일이 fig.add_subplot(projection=’3d’)를 할 필요가 없습니다.</b></p></li><li><p><code>fig, axs = plt.subplot(ncols=3)</code>에 매개변수로 <code>subplot_kw=&#123;&quot;projection&quot;:&quot;3d&quot;&#125;</code>를 추가하면 모든 Axes가 3D로 바뀝니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2D Axes</span></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_03.png"><br></p></li><li><p><code>subplot_kw=&#123;&quot;projection&quot;:&quot;3d&quot;&#125;</code> 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>), </span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_04.png"><br></p></li></ul><h2 id="3-2-각도-지정"><a href="#3-2-각도-지정" class="headerlink" title="3.2. 각도 지정"></a>3.2. 각도 지정</h2><ul><li><p>3D plot은 관찰 각도가 중요합니다.</p></li><li><p>관찰 각도에 따라 보이는 모습이 달라지기 때문입니다.</p></li><li><p><b>Matplotlib 3D view 각도는 <code>ax.view_init()</code>명령으로 제어합니다.</b></p></li><li><p>두 개의 3D 공간을 만들고 앙각(elevation angle)과 방위각(azimuthal angle)을 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.view_init(elev=<span class="number">30.</span>, azim=<span class="number">120</span>)    <span class="comment"># 각도 지정</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_10.png"><br></p></li><li><p>xlabel, ylabel, title등은 일반적인 2D axes와 동일하게 제어할 수 있습니다.</p></li></ul><h2 id="3-3-ax-scatter"><a href="#3-3-ax-scatter" class="headerlink" title="3.3. ax.scatter()"></a>3.3. <code>ax.scatter()</code></h2><ul><li><p>3D 공간에서 scatter plot을 그립니다.</p></li><li><p>위 코드에 <code>ax.scatter()</code>를 추가하는 것이 전부입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>],  <span class="comment"># 3D scatter plot</span></span><br><span class="line">               c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">5</span>, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_11.png"><br></p></li><li><p>데이터 밀도가 높은 왼쪽 그림에서는 거의 곡면으로 보입니다.</p></li><li><p>그러나 오른쪽 그림은 z가 급격하게 변하기 때문에 사이사이에 빈틈이 많이 보입니다.</p></li><li><p>이런 이유로 <b>scatter plot은 조심해서 사용해야 합니다.</b></p></li></ul><ul><li>3D plot은 2D 화면으로 전달되는데 한계가 있습니다.</li><li>이를 극복하기 위한 방법 중 가장 좋은 방법 중 하나는 <b>그림을 회전</b>시키는 것입니다.</li><li>z축을 중심으로 이미지를 회전시키며 한 장 한 장을 담아 동영상으로 출력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation </span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    <span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">        ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">        ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">        ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">        ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], </span><br><span class="line">                   c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">5</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span>(<span class="params">i</span>):</span></span><br><span class="line">    axs[<span class="number">0</span>].view_init(elev=<span class="number">30.</span>, azim=i)</span><br><span class="line">    axs[<span class="number">1</span>].view_init(elev=<span class="number">30.</span>, azim=i)</span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Animate</span></span><br><span class="line">anim = animation.FuncAnimation(fig, animate, init_func=init,</span><br><span class="line">                               frames=<span class="number">360</span>, interval=<span class="number">20</span>, blit=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">anim.save(<span class="string">&#x27;mpl3d_scatter.gif&#x27;</span>, fps=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d_scatter.gif"><br></li></ul><ul><li>동영상으로 보니 전체적인 모습이 잘 들어옵니다.</li><li>앞으로도 비슷한 그림을 동영상으로 만들겠습니다. </li><li>다만, <b>코드 구조는 동일하므로 코드는 보이지 않겠습니다.</b></li></ul><h2 id="3-4-ax-contour"><a href="#3-4-ax-contour" class="headerlink" title="3.4. ax.contour()"></a>3.4. <code>ax.contour()</code></h2><ul><li>contour plot도 3D로 표현할 수 있습니다.</li><li>2D와 마찬가지로 데이터 형식을 wide format으로 바꾸어야 합니다.</li><li><b>wide format으로만 만들어 넣으면 되었던 2D와 달리 X, Y도 필요합니다.</b></li><li><code>df.pivot_table()</code>로 만든 wide form에서 index와 columns를 떼어 X와 Y를 만듭니다.</li><li>다만 Z와 shape이 같아야 하므로 필요한 수만큼 복사하여 X, Y를 만듭니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]    </span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.contour(X, Y, Z, levels=<span class="number">20</span>, cmap=<span class="string">&quot;inferno&quot;</span>)  <span class="comment">## ax.contour()</span></span><br></pre></td></tr></table></figure><img src="mpl3d_18.png"><br></li></ul><ul><li>동영상으로도 봅시다.<br><img src="mpl3d_contour0.gif"><br></li></ul><ul><li>등고선 모양으로 contour plot이 생성되었습니다.</li><li>scatter plot보다 한결 정돈되어보이기도 하지만 <b>윤곽선이 보이지 않아 아쉽습니다.</b></li></ul><ul><li><p>입체감을 배가시키는 방법으로 등고선을 깊이 방향으로 늘릴 수 있습니다.</p></li><li><p>매개변수에 <code>extend3d=True</code>를 추가합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contour(X, Y, Z, extend3d=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_16.png"><br></p></li><li><p>또는, 깊이에 수직 방향으로 넓게 펼 수 있습니다.</p></li><li><p>이때 명령어는 <code>ax.contour()</code>가 아닌 <code>ax.contourf()</code>가 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contourf(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_17.png"><br></p></li></ul><h2 id="3-5-ax-plot-wireframe"><a href="#3-5-ax-plot-wireframe" class="headerlink" title="3.5. ax.plot_wireframe()"></a>3.5. <code>ax.plot_wireframe()</code></h2><ul><li><p>Matplotlib 3D plot의 기본 plot이라고 할 수 있는 방식입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plot_wireframe</span></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_wireframe(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)   <span class="comment"># ax.plot_wireframe()</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_19.png"><br><br><img src="mpl3d_plot_wireframe.gif"><br></p></li><li><p>데이터끼리 얽힌 wireframe으로 덕에 contour plot에 비해 <b>윤곽선이 잘 드러납니다.</b></p></li><li><p>그러나 오른쪽 그림처럼 z방향으로 급격하게 변하는 경우 외곽선이 울퉁불퉁합니다.</p></li><li><p>그리고 또 하나, <b><code>cmap=&quot;inferno&quot;</code></b>가 작동하지 않습니다.</p></li><li><p><code>ax.plot_wireframe()</code>에는 색을 입힐 수 없습니다.</p></li></ul><h2 id="3-6-ax-plot-surface"><a href="#3-6-ax-plot-surface" class="headerlink" title="3.6. ax.plot_surface()"></a>3.6. <code>ax.plot_surface()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/gallery/mplot3d/surface3d.html">matplotlib: 3D surface</a></p></blockquote><ul><li><p>Matplotlib에는 데이터를 면으로 보여주는 <code>plot_surface()</code> 명령이 있습니다.<br><img src="mpl3d_20.png"><br></p></li><li><p>3D 데이터를 이어서 면으로 보여주는 명령이기 때문에 매우 유용합니다.</p></li><li><p>제 데이터에도 적절할지 한번 확인해보겠습니다.</p></li><li><p>시각화 코드를 <code>ax.plot_surface()</code>로 교체합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_surface(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)  <span class="comment"># surface plot</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_12.png"><br></p></li><li><p>어찌된 일인지 아무 일도 발생하지 않습니다.</p></li><li><p>에러 메시지에서 <b>NaN이 문제</b>라고 합니다.</p></li><li><p>wide format으로 변형한 Z에 데이터가 포함되어 있지 않은 부분이 문제가 되는 것 같습니다.</p></li><li><p>이를 <code>numpy.nan_to_num()</code>을 이용해 다른 숫자로 대체합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = np.nan_to_num(data_pt.values, <span class="number">0.0</span>)</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_surface(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_13.png"><br><br><img src="mpl3d_plot_surface.gif"><br></p></li><li><p>존재하지 않는 데이터가 메워지자 <code>ax.contour()</code>가 동작합니다.</p></li><li><p>그러나 <b>메워진 값이 진짜 데이터로 오인</b>될 소지가 다분합니다.</p></li><li><p>심지어 메워진 값으로 인해 발생한 옆면의 색이 어지럽습니다. <b>웬만하면 이러지 맙시다</b></p></li></ul><h2 id="3-7-ax-plot-trisurf"><a href="#3-7-ax-plot-trisurf" class="headerlink" title="3.7. ax.plot_trisurf()"></a>3.7. <code>ax.plot_trisurf()</code></h2><ul><li><p><a href="https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/">지난 글</a>에서 데이터로 mesh를 만들 수 있다고 했습니다.</p></li><li><p>3D에서도 삼각형 mesh를 만들어 surface를 표현할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_trisurf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_14.png"><br><br><img src="mpl3d_plot_trisurf.gif"><br></p></li><li><p>2D에서와 마찬가지로 3D에서도 concave한 지점에 존재하지 않았던 facet이 생깁니다.</p></li><li><p>아쉽기는 하지만 전반적으로 가장 양호합니다.</p></li><li><p><b>mask 매개변수를 익혀서 삭제하는 방법</b>을 알아봐야겠습니다.</p></li></ul><h2 id="3-8-ax-plot-trisurf-ax-contour"><a href="#3-8-ax-plot-trisurf-ax-contour" class="headerlink" title="3.8. ax.plot_trisurf() + ax.contour()"></a>3.8. <code>ax.plot_trisurf()</code> + <code>ax.contour()</code></h2><ul><li>이제까지 살펴본 것 중에서 <code>ax.contour()</code>와 <code>ax.plot_trisurf</code>가 가장 쓸모있어보입니다.</li><li>둘을 함께 넣어서 입체적인 그림에 등고선을 추가합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_trisurf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.contour(X, Y, Z, levels=<span class="number">20</span>, colors=<span class="string">&quot;k&quot;</span>, linewidths=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d_21.png"><br><br><img src="mpl3d_contour_trisurf.gif"><br></li></ul><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><ul><li>x, y, z 3축의 데이터를 시각화하는 방법은 여러가지가 있습니다.</li><li>2D image처럼 표현할 수도 있고, 3D로 울퉁불퉁한 모양을 표현할 수도 있습니다.</li><li><b>무엇이 적절할지는 데이터와 프로젝트의 목적, 시각화 목적에 따라 달라집니다.</b></li><li>본인에게 적절한 방식을 슬기롭게 선택하시기 바랍니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/3D/">3D</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib 3D Plots (1)</title>
      <link>https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/</link>
      <guid>https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/</guid>
      <pubDate>Fri, 09 Jul 2021 02:17:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib으로 3D Plot을 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.&lt;/li&gt;
&lt;li&gt;막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Matplotlib으로 3D Plot을 할 수 있습니다.</li><li>많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.</li><li>막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.</li></ul><p><strong>Reference</strong></p><blockquote><p><a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">matplotlib tutorial: The mplot3d Toolkit</a><br><a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">numpy.meshgrid</a></p></blockquote><h1 id="1-예제-데이터"><a href="#1-예제-데이터" class="headerlink" title="1. 예제 데이터"></a>1. 예제 데이터</h1><h2 id="1-1-공식-예제-데이터"><a href="#1-1-공식-예제-데이터" class="headerlink" title="1.1. 공식 예제 데이터"></a>1.1. 공식 예제 데이터</h2><p><img src="mpl3d_18.png"></p><ul><li><p>위 그림이 익숙한 분들이 많으실텐데, Matplotlib이 가지고 있는 3D 예제 데이터입니다.</p></li><li><p><code>mpl_toolkits.mplot3d.axes3d</code> 모듈의 <code>get_test_data()</code>명령으로 불러올 수 있습니다.</p></li><li><p><b>매개변수</b>로 float을 받습니다. 정밀도를 나타내며 숫자가 작을수록 정밀합니다.</p></li><li><p>이상하게도 <b><a href="https://matplotlib.org/stable/api/toolkits/mplot3d.html?highlight=mplot3d#module-mpl_toolkits.mplot3d">공식 홈페이지</a>에 누락</b>되어 있습니다.</p></li><li><p>3D Plot 공식 예제에서는 보통 0.5를 넣습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.axes3d <span class="keyword">import</span> get_test_data</span><br><span class="line"></span><br><span class="line">X, Y, Z = get_test_data(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;X.shape=<span class="subst">&#123;X.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Y.shape=<span class="subst">&#123;Y.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Z.shape=<span class="subst">&#123;Z.shape&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>실행 결과 : <a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">meshgrid</a>형식의 12 x 12 데이터가 생성됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X.shape=(12, 12)</span><br><span class="line">Y.shape=(12, 12)</span><br><span class="line">Z.shape=(12, 12)</span><br></pre></td></tr></table></figure></li><li><p><code>get_test_data()</code>에 들어가는 숫자를 바꿔봅니다.</p></li><li><p>숫자에 반비례하여 해상도를 바꾸는 효과가 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, d <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.1</span>]):</span><br><span class="line">    X, Y, Z = get_test_data(d)</span><br><span class="line">    dim = X.shape[<span class="number">0</span>]</span><br><span class="line">    ax.plot_wireframe(X, Y, Z)</span><br><span class="line">    ax.set_title(<span class="string">f&quot;get_test_data(<span class="subst">&#123;d&#125;</span>): <span class="subst">&#123;dim&#125;</span>x<span class="subst">&#123;dim&#125;</span>&quot;</span>, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_19.png"><br></p></li></ul><h2 id="1-2-이번-예제-데이터"><a href="#1-2-이번-예제-데이터" class="headerlink" title="1.2. 이번 예제 데이터"></a>1.2. 이번 예제 데이터</h2><ul><li>그러나 이 글에서 우리는 저 예제 데이터를 사용하지 않을 것입니다.</li><li>기본 예제 데이터를 사용한 그림을 보고 싶으시면 <a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">공식 홈페이지</a>를 보시기 바랍니다.</li><li>이 글에서는 제가 현업에서 얻은 예제 데이터 두 가지를 사용하겠습니다.</li><li><b>보안을 위해 column name은 제거했습니다.</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data1 = pd.read_csv(<span class="string">&quot;data1.csv&quot;</span>)</span><br><span class="line">data1.head()</span><br></pre></td></tr></table></figure><img src="mpl3d_01.png"><br></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = pd.read_csv(<span class="string">&quot;data2.csv&quot;</span>)</span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_02.png"><br></p><ul><li>data1과 data2에는 Y1과 Y2가 있습니다.</li><li>data1은 X, Y1을 독립변수로 Y2과 Z를 얻은 것이고</li><li>data2는 X, Y2를 독립변수로 Y1과 Z를 얻은 것입니다.</li><li>다시 말해 <b>data1은 X와 Y1</b>이, <b>data2는 X와 Y2</b>가 <b>직교좌표계</b>에 놓여 있습니다.</li><li>그리고 <b>무의미한 데이터는 삭제</b>되어 있습니다. </li></ul><h1 id="2-2D-Visualization"><a href="#2-2D-Visualization" class="headerlink" title="2. 2D Visualization"></a>2. 2D Visualization</h1><ul><li>3D 데이터는 2D 이미지로 표현할 수 있습니다.</li><li>여러가지 방식을 사용합니다.</li></ul><h2 id="2-1-ax-scatter"><a href="#2-1-ax-scatter" class="headerlink" title="2.1. ax.scatter()"></a>2.1. <code>ax.scatter()</code></h2><ul><li><p>가장 기본적인 scatter plot을 사용합니다.</p></li><li><p>color로 Z를 사용하고 inferno colormap으로 데이터를 표기합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">10</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_03.png"><br></p></li><li><p>왼쪽 X vs Y1은 사다리꼴 모양,</p></li><li><p>오른쪽 X vs Y2는 휘어진 활 모양입니다.</p></li><li><p><b>scatter plot은 그려보기 가장 좋지만 데이터 사이 거리가 멀면 듬성듬성 구멍이 보일 수도 있습니다.</b></p></li></ul><h2 id="2-2-ax-imshow"><a href="#2-2-ax-imshow" class="headerlink" title="2.2. ax.imshow()"></a>2.2. <code>ax.imshow()</code></h2><ul><li><p>xy 평면에 놓인 데이터는 이미지처럼 다룰 수 있습니다.</p></li><li><p><code>ax.imshow()</code>명령을 쓰려면 pandas의 <code>pivot_table</code> 명령을 이용해 데이터 형태를 바꾸어야 합니다.</p></li><li><p>가로에 X 데이터를, 세로에 Y 데이터를 놓기 위해 X를 column, Y를 index로 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1.pivot_table(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;Y1&quot;</span>, <span class="string">&quot;X&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_04.png"><br></p></li><li><p>numerical data인 X와 Y를 categorical처럼 사용합니다.</p></li><li><p>데이터가 직교하지 않는 경우 매우 많은 구멍이 뚫립니다.<br>(ex. data1에서 X와 Y2로 <code>pivot_table()</code>을 하는 경우) </p></li><li><p>X, Y, Z 컬럼이 따로 있는 방식을 <b>long format</b>,</p></li><li><p>가로와 세로에 X와 Y가 놓이고 Z가 행렬처럼 놓이는 방식을 <b>wide format</b>이라고 합니다.</p></li><li><p>long format을 입력받는 명령이 있고, wide format을 입력받는 명령이 있습니다.</p></li></ul><ul><li>데이터를 이미지인양 표현합니다.</li><li><b>가로와 세로축이 index</b>이기 때문에 <b>extent</b>매개변수로 실제 값과 매핑을 시켜야 합니다.</li><li>이 작업이 없으면 값이 아니라 index로 출력됩니다.</li></ul><ul><li>그리고 하나 더, 이미지는 다른 plot과 달리 <b>y값이 위에서부터 아래로 작아집니다.</b></li><li><b><code>ax.invert_yaxis()</code>를 해서 상하를 뒤집어야 합니다.</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.imshow(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), cmap=<span class="string">&quot;inferno&quot;</span>, </span><br><span class="line">              extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(),      <span class="comment"># 가로에 X 데이터</span></span><br><span class="line">                      data[ydata].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>()]) <span class="comment"># 세로에 Y 데이터</span></span><br><span class="line">    ax.invert_yaxis()  <span class="comment"># 그림 뒤집기</span></span><br><span class="line">    ax.set_aspect((data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>() - data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>())/(data[ydata].<span class="built_in">max</span>() - data[ydata].<span class="built_in">min</span>()))</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_05.png"><br></li></ul><h2 id="2-3-ax-pcolor-ax-pcolormesh-ax-pcolorfast"><a href="#2-3-ax-pcolor-ax-pcolormesh-ax-pcolorfast" class="headerlink" title="2.3. ax.pcolor(), ax.pcolormesh(), ax.pcolorfast()"></a>2.3. <code>ax.pcolor()</code>, <code>ax.pcolormesh()</code>, <code>ax.pcolorfast()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#differences-pcolor-pcolormesh">matplotlib: Difference between pcolor() and pcolormesh()</a><br><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.pcolorfast.html?highlight=pcolorfast#matplotlib.axes.Axes.pcolorfast">matplotlib.axes.Axes.pcolorfast</a></p></blockquote><ul><li>이미지처럼 출력할 수 있는 명령은 여러 가지가 있습니다.</li><li><code>ax.pcolor()</code>, <code>ax.pcolormesh()</code>, <code>ax.pcolorfast()</code>가 그들입니다.</li><li><code>ax.imshow()</code>는 pixel의 가로세로 길이가 같아야 하지만 이들은 그렇지 않습니다.</li></ul><ul><li><code>ax.pcolor()</code>는 <a href="https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.PolyCollection">PolyCollection</a>을 return하고</li><li><code>ax.pcolormesh()</code>는 <a href="https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.QuadMesh">QuadMesh</a>를 return합니다.</li><li><code>ax.pcolormesh()</code>가 빠르고 Gouraud shading을 지원하지만 <code>ax.pcolor()</code>는 masked array를 지원합니다.</li><li><code>ax.pcolorfast()</code>는 Agg backend를 이용해 <code>ax.pcolor()</code>를 지원하는 실험적인 기능입니다.</li></ul><ul><li><p>예제 코드는 <code>ax.pcolor()</code>만 사용합니다.</p></li><li><p>실행해보면 아시겠지만 다른 명령도 결과가 똑같습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.pcolor(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X (index)&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata + <span class="string">&quot; (index)&quot;</span>, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_06.png"></p></li><li><p><b>X, Y 좌표가 실제 데이터가 아니라 index입니다.</b></p></li><li><p>index를 좌표로 바꿉니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    ax.pcolor(data_pt, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># index 중에서 그림에 표시된 범위와 전체 데이터 범위를 넘지 않는 것들 선택</span></span><br><span class="line">    xticks = [x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() </span><br><span class="line">              <span class="keyword">if</span> (ax.get_xbound()[<span class="number">0</span>] &lt;= x &lt;= ax.get_xbound()[<span class="number">1</span>])   <span class="comment"># 그림 표시 범위 안쪽</span></span><br><span class="line">                  <span class="keyword">and</span> x &lt; <span class="built_in">len</span>(data_pt.columns)]                        <span class="comment"># 전체 데이터 범위 안쪽</span></span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;data_pt.columns[<span class="built_in">int</span>(x)]:<span class="number">.3</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])   <span class="comment"># 문자열 포맷 지정</span></span><br><span class="line">    </span><br><span class="line">    yticks = [y <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() </span><br><span class="line">              <span class="keyword">if</span> (ax.get_ybound()[<span class="number">0</span>] &lt;= y &lt;= ax.get_ybound()[<span class="number">1</span>]) </span><br><span class="line">                  <span class="keyword">and</span> y &lt; <span class="built_in">len</span>(data_pt.index)]</span><br><span class="line">    ax.set_yticks(yticks)</span><br><span class="line">    ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;data_pt.index[<span class="built_in">int</span>(y)]:<span class="number">.3</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br></pre></td></tr></table></figure><p><img src="mpl3d_06_1.png"><br></p></li><li><p>이런 식으로 해당 index의 좌표를 억지로 찾아 넣을 수는 있으나 자연스럽지 못합니다.</p></li><li><p><b>pcolor 시리즈는 다른 용처를 찾아봅시다. 여긴 아닙니다.</b></p></li></ul><h2 id="2-4-ax-contour"><a href="#2-4-ax-contour" class="headerlink" title="2.4. ax.contour"></a>2.4. <code>ax.contour</code></h2><blockquote><p><a href="https://matplotlib.org/stable/gallery/images_contours_and_fields/contour_demo.html#sphx-glr-gallery-images-contours-and-fields-contour-demo-py">matplotlib: Contour Demo</a><br><a href="https://matplotlib.org/stable/api/contour_api.html?highlight=contourlabeler#matplotlib.contour.ContourLabeler">matplotlib: matplotlib.contour</a></p></blockquote><ul><li><p>Z 데이터를 등고선으로 표기합니다.</p></li><li><p>기상도나 지형도에서 많이 본 형식이기 때문에 데이터 전달력이 좋습니다.</p></li><li><p><code>ax.imshow</code>처럼 extent 매개변수를 사용할 수 있어 <b>실제 좌표로 표현이 가능</b>합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># wide format 데이터 활용</span></span><br><span class="line">               levels=<span class="number">25</span>, cmap=<span class="string">&quot;inferno&quot;</span>,         <span class="comment"># 등고선 갯수와 colormap 지정</span></span><br><span class="line">               <span class="comment"># extent 매개변수 적용 : x축과 y축에 실제 데이터값 매핑</span></span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_09.png"><br></p></li><li><p><b>등고선에 데이터 값을 표기</b>해서 <b>정확한 값을 전달</b>하는 것이 가능합니다.</p></li><li><p>데이터 값이 들어가려면 등고선의 수를 좀 줄이는 편이 좋습니다.</p></li></ul><ul><li>글자가 놓이는 부분의 등고선을 생략하려면 매개변수로 <code>inline=True</code>를 넣고,</li><li>글자 좌우 여백을 조정하고 싶으면 <code>inline_spacing</code>을 조절합니다.</li><li>매개변수로 상당히 많은 세부사항을 조정할 수 있습니다. </li><li>자세한 내용은 <a href="https://matplotlib.org/stable/api/contour_api.html?highlight=contourlabeler#matplotlib.contour.ContourLabeler">공식 홈페이지</a>의 <code>matplotlib.contour.ContourLabeler.clabel</code>을 참고합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    cs = ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># contour label 삽입을 위해 객체(cs)로 받음.</span></span><br><span class="line">                    levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>,</span><br><span class="line">                    extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.clabel(cs, inline=<span class="literal">True</span>, inline_spacing=<span class="number">0</span>, fontsize=<span class="number">12</span>) <span class="comment"># contour label 설정</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_09_1.png"><br></li></ul><h2 id="2-5-ax-contourf"><a href="#2-5-ax-contourf" class="headerlink" title="2.5. ax.contourf()"></a>2.5. <code>ax.contourf()</code></h2><ul><li>등고선 영역에 색칠을 합니다.</li><li><code>ax.imshow()</code>를 단계별로 quantize 했다고도 볼 수 있습니다.</li><li>자체적으로도 <code>ax.clabel()</code>로 등고선 레이블을 붙일 수 있지만 <code>ax.contour()</code>과 협력하면 더 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.contourf(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># 등고선 사이 채색</span></span><br><span class="line">               levels=<span class="number">25</span>, cmap=<span class="string">&quot;inferno&quot;</span>, </span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    cs = ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># 등고선</span></span><br><span class="line">               levels=<span class="number">25</span>, colors=<span class="string">&quot;w&quot;</span>, alpha=<span class="number">0.5</span>, </span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.clabel(cs, inline=<span class="literal">True</span>, inline_spacing=<span class="number">0</span>, fontsize=<span class="number">12</span>)  <span class="comment"># 등고선 레이블</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_25.png"><br></li></ul><h2 id="2-6-ax-triplot"><a href="#2-6-ax-triplot" class="headerlink" title="2.6. ax.triplot()"></a>2.6. <code>ax.triplot()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.triplot.html">matplotlib.axes.Axes.triplot</a></p></blockquote><ul><li><p>입력받은 데이터를 삼각형으로 잘게 자릅니다.</p></li><li><p>Delaunay triangulation이라고 하는데, 유한요소해석(finite element analysis)을 배운 분들께는 매우 익숙할 단어입니다.</p></li><li><p>지금 데이터가 너무 빼곡하기 때문에 일부만 샘플링을 해서 데이터 수를 줄입니다.</p></li><li><p>x의 최대와 최소, y의 최대와 최소는 남겨서 데이터 범위는 유지합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data1_ll = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_ul = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_lr = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_ur = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">data1_s = pd.concat([data1.loc[[data1_ll, data1_ul, data1_lr, data1_ur]], data1.sample(n=<span class="number">400</span>)], axis=<span class="number">0</span>)</span><br><span class="line">data1_s.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">data1_s.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_20.png"><br></p></li><li><p>data2에도 같은 처리를 합니다.</p></li><li><p>data2는 영역이 좁은만큼 데이터 수를 data1의 2분의 1로 줄입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data2_ll = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_ul = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_lr = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_ur = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">data2_s = pd.concat([data2.loc[[data2_ll, data2_ul, data2_lr, data2_ur]], data2.sample(n=<span class="number">200</span>)], axis=<span class="number">0</span>)</span><br><span class="line">data2_s.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">data2_s.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_21.png"><br></p></li><li><p>줄어든 데이터로 triplot을 그립니다.</p></li><li><p>pivot_table을 할 필요가 없습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1_s, data2_s]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1_s <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.triplot(data[<span class="string">&quot;X&quot;</span>], data[ydata], lw=<span class="number">0.1</span>) <span class="comment"># ax.triplot</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_22.png"><br></p></li><li><p>삼각형 mesh 구조가 생성되었습니다.</p></li><li><p>다 좋은데, 오른쪽 그림을 보면 데이터 위쪽 활처럼 휜 곳이 직선으로 메워졌습니다.</p></li><li><p>all-convex 도형은 괜찮은데 <b>안쪽으로 들어간(concave) 구조에 사용하기엔 적절치 않습니다.</b></p></li></ul><h2 id="2-7-ax-tricontour"><a href="#2-7-ax-tricontour" class="headerlink" title="2.7. ax.tricontour()"></a>2.7. <code>ax.tricontour()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tricontour.html?highlight=axes%20tricontour#matplotlib.axes.Axes.tricontour">matplotlib.axes.Axes.tricontour</a></p></blockquote><ul><li><code>ax.contour()</code>와 비슷한 기능입니다.</li><li>차이가 있다면 삼각형으로 쪼갠 뒤에 그립니다.</li><li>데이터의 정밀도를 높일 수 있는 방법입니다.</li><li>데이터 구조는 보았으니 앞에서 성기게 만든 데이터보다 원 데이터로 작업합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.tricontour(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_23.png"><br></li></ul><h2 id="2-8-ax-tricontourf"><a href="#2-8-ax-tricontourf" class="headerlink" title="2.8. ax.tricontourf()"></a>2.8. <code>ax.tricontourf()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tricontourf.html">matplotlib.axes.Axes.tricontourf</a></p></blockquote><ul><li><p><code>ax.contourf()</code>에 대응되는 기능입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.tricontourf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_24.png"><br></p></li><li><p>Y2가 포함된 오른쪽 그림에서 자꾸 원하지 않는 concave 영역이 나타납니다.</p></li><li><p><b>mask 매개변수를 사용해서 이런 부분을 제거할 수 있을 것</b>으로 보입니다.</p></li><li><p>미래의 나에게 숙제로 맡기겠습니다.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/3D/">3D</category>
      
      
    </item>
    
    <item>
      <title>Seaborn Heatmap &amp; Colorbar Control</title>
      <link>https://jehyunlee.github.io/2021/07/01/Python-DS-78-heatmapcolorbar/</link>
      <guid>https://jehyunlee.github.io/2021/07/01/Python-DS-78-heatmapcolorbar/</guid>
      <pubDate>Thu, 01 Jul 2021 01:55:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;seaborn의 heatmap은 매우 강력한 도구입니다.&lt;/li&gt;
&lt;li&gt;한 줄의 명령으로 colormap과 annotation, colorbar가 붙은 정돈된 그림이 나옵니다.&lt;/li&gt;
&lt;li&gt;그런데 colorbar를 조금 고치고 싶</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>seaborn의 heatmap은 매우 강력한 도구입니다.</li><li>한 줄의 명령으로 colormap과 annotation, colorbar가 붙은 정돈된 그림이 나옵니다.</li><li>그런데 colorbar를 조금 고치고 싶다면, 어떻게 할까요?</li></ul><h1 id="1-Seaborn-Heatmap"><a href="#1-Seaborn-Heatmap" class="headerlink" title="1. Seaborn Heatmap"></a>1. Seaborn Heatmap</h1><h2 id="1-1-예제-데이터-만들기"><a href="#1-1-예제-데이터-만들기" class="headerlink" title="1.1. 예제 데이터 만들기"></a>1.1. 예제 데이터 만들기</h2><ul><li>Seaborn에 내장된 펭귄 데이터셋을 사용합시다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_peng = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-PCA"><a href="#1-2-PCA" class="headerlink" title="1.2. PCA"></a>1.2. PCA</h2><ul><li><p>데이터에 PCA를 적용합니다.</p></li><li><p>주성분분석후 인자별 기여도 분석을 진행합니다.</p></li><li><p>예제 데이터라도 standard scaling은 잊지 맙시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">ss = StandardScaler()</span><br><span class="line">cols_num = [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>, <span class="string">&quot;body_mass_g&quot;</span>]</span><br><span class="line">peng_std = ss.fit_transform(df_peng[cols_num].dropna())</span><br><span class="line">peng_std</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_01.png"><br></p></li><li><p>PCA를 수행합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">pca = PCA()</span><br><span class="line">peng_pca = pca.fit_transform(peng_std)</span><br></pre></td></tr></table></figure></li><li><p>인자별 주성분 기여도를 heatmap으로 표현합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ticklabels = [<span class="string">f&quot;PC<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(peng_pca.shape[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line">sns.heatmap(pca.components_, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, </span><br><span class="line">            xticklabels=cols_num, yticklabels=ticklabels)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_02.png"><br></p></li><li><p><code>sns.heatmap()</code> 한 줄로 멋진 그림을 그렸습니다.</p></li><li><p>이 그림을 기본으로 조금씩 고쳐보겠습니다.</p></li></ul><h2 id="1-3-범위-컬러바-조정"><a href="#1-3-범위-컬러바-조정" class="headerlink" title="1.3. 범위, 컬러바 조정"></a>1.3. 범위, 컬러바 조정</h2><ul><li><p>여기서 우리는 주성분에 대한 각 인자의 기여도가 중요하지 방향은 중요하지 않다고 가정합니다.</p></li><li><p>인자별 중요도가 담긴 pca.components_에 절대값을 취하고, colorbar도 거기에 맞게 한쪽 방향으로 발산하는 inferno를 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pca_comp_abs = <span class="built_in">abs</span>(pca.components_)</span><br><span class="line">sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">            xticklabels=cols_num, yticklabels=ticklabels)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_03.png"><br></p></li><li><p>seaborn heatmap을 그리면 함께 출력되는 메시지가 있습니다.</p></li><li><p><a href="AxesSubplot:">AxesSubplot:</a> 인데, <code>sns.heatmap()</code>명령의 출력이 Matplotlib의 AxesSubplot 객체라는 의미입니다.</p></li></ul><h2 id="1-4-annotation-불투명도-조정"><a href="#1-4-annotation-불투명도-조정" class="headerlink" title="1.4. annotation 불투명도 조정"></a>1.4. annotation 불투명도 조정</h2><ul><li><p>heatmap 위의 글자가 너무 강렬하다면 불투명도를 조정할 수 있습니다.</p></li><li><p>seaborn heatmap의 annotation은 딕셔너리 형태의 <code>annot_kws</code> 인자로 제어 가능합니다.</p></li><li><p>명령 안에 <code>annot_kws=&#123;&quot;alpha&quot;: 0.3&#125;</code>을 입력하면 불투명도가 0.3으로 내려가 색이 더 잘 들어옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax = sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">                 xticklabels=cols_num, yticklabels=ticklabels, annot_kws=&#123;<span class="string">&quot;alpha&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">fig = ax.figure</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fig.get_children())</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_04.png"><br></p></li><li><p>이번에는 <code>sns.heatmap()</code> 앞에 ax=를 붙여서 heatmap 객체를 ax 변수에 저장했습니다.</p></li><li><p>그리고 <code>fig = ax.figure</code> 명령으로 ax가 속한 figure를 fig 변수에 저장했습니다.</p></li><li><p><code>fig, ax = plt.subplots()</code>에 이어서 <code>sns.heatmap(어쩌구, ax=ax)</code>한 것과 같은 효과입니다.</p></li></ul><ul><li><code>fig.get_children()</code>명령으로 fig의 구성요소를 확인하면, 맨 마지막에 colorbar가 있습니다.</li><li>ax와 fig는 이제 변수에 저장되었으니 마음껏 가지고 놀 수 있습니다.</li><li>colorbar도 마찬가지로 다뤄봅니다.</li></ul><h1 id="2-Colorbar"><a href="#2-Colorbar" class="headerlink" title="2. Colorbar"></a>2. Colorbar</h1><h2 id="2-1-colorbar-객체-분리"><a href="#2-1-colorbar-객체-분리" class="headerlink" title="2.1. colorbar 객체 분리"></a>2.1. colorbar 객체 분리</h2><ul><li><p>colorbar 객체를 figure에서 떼어냅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar = fig.get_children()[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cbar))</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_11.png"><br></p></li><li><p>타입을 확인해보니 AxesSubplot입니다.</p></li><li><p>앞에서 heatmap의 타입도 AxesSubplot이었습니다.</p></li><li><p>정리하면, 데이터가 표기되는 부분이나 colorbar가 표기되는 부분이나 Matplotlib 구조적으로는 동일하다는 뜻입니다.</p></li><li><p>그렇다면 데이터를 그리는 Axes에 적용하는 명령어를 colorbar에도 사용할 수 있겠습니다.</p></li></ul><h2 id="2-2-y눈금-수정"><a href="#2-2-y눈금-수정" class="headerlink" title="2.2. y눈금 수정"></a>2.2. y눈금 수정</h2><ul><li><p>0부터 1까지 0.2 단위로 찍힌 현재의 눈금을 0, 0.5, 1 세개만 남기고자 합니다.</p></li><li><p>일반 plot에서는 <code>set_yticks()</code>로 위치를 잡고 <code>set_yticklabels()</code>로 눈금을 입혔습니다.</p></li><li><p>한번 <code>set_yticks()</code>를 실험해 봅니다.</p></li><li><p>아까 그린 그림에서 colorbar만 수정한 후 그림을 그리라<code>display(fig)</code>명령으로 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar.set_yticks([-<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>])</span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_12.png"><br></p></li><li><p>바뀌지 않습니다.</p></li><li><p>colorbar는 축을 지정한 후 <code>set_ticks()</code>를 사용하라고 합니다.</p></li><li><p>고분고분 말을 듣습니다. <code>cbar.yaxis</code>로 y축 지정 후 <code>set_ticks()</code>를 적용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar.yaxis.set_ticks([<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>])</span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_06.png"><br></p></li><li><p>y축 눈금이 변경되었습니다.</p></li></ul><ul><li><p>y축 눈금은 다른 방식으로도 바꿀 수 있습니다.</p></li><li><p>Matplotlib의 MultipleLocator를 사용하면, 눈금 간격을 지정할 수 있습니다.</p></li><li><p>이번엔 그림을 처음부터 다시 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MultipleLocator</span><br><span class="line"></span><br><span class="line">ax = sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">                 xticklabels=cols_num, yticklabels=ticklabels, annot_kws=&#123;<span class="string">&quot;alpha&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">fig = ax.figure</span><br><span class="line">cbar = fig.get_children()[-<span class="number">1</span>]</span><br><span class="line">cbar.yaxis.set_major_locator(MultipleLocator(<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_07.png"><br></p></li><li><p>동일한 효과가 반영되었습니다.</p></li></ul><h2 id="2-3-colorbar-위-눈금"><a href="#2-3-colorbar-위-눈금" class="headerlink" title="2.3. colorbar 위 눈금"></a>2.3. colorbar 위 눈금</h2><ul><li><p>가끔 colorbar 옆에 달린 눈금이 colorbar까지 이어지면 좋겠다 싶기도 합니다.</p></li><li><p>colorbar의 정체는 Axes이므로, Axes의 수평선 명령 <code>axhline()</code>을 사용합니다.</p></li><li><p>-0.5, 0, 0.5 세 군데에 선을 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cbar.axhline(-<span class="number">0.5</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0.5</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    </span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_08.png"><br></p></li><li><p>0.5에는 그려지지만 0과 1에는 그려지지 않았습니다.</p></li><li><p>colorbar 위 아래 한계선에 딱 걸려서 그렇습니다.</p></li></ul><ul><li>이럴 때는 테두리를 그려버리면 됩니다.</li><li>내친 김에 heatmap에도 그립니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ax.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">True</span>)</span><br><span class="line">cbar.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_visible(<span class="literal">True</span>)</span><br><span class="line">cbar.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_color(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line"></span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><img src="78_heatmapcolorbar_09.png"><br></li></ul><h1 id="3-정리"><a href="#3-정리" class="headerlink" title="3. 정리"></a>3. 정리</h1><ul><li>오늘의 글은 딱 한 문장으로 요약됩니다.</li><li><b>colorbar도 Axes다.</b></li><li>괜히 겁먹지 맙시다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/seaborn/">seaborn</category>
      
      <category domain="https://jehyunlee.github.io/tags/datetime/">datetime</category>
      
      
    </item>
    
    <item>
      <title>Datetime X-axis Control</title>
      <link>https://jehyunlee.github.io/2021/06/29/Python-DS-77-datetime/</link>
      <guid>https://jehyunlee.github.io/2021/06/29/Python-DS-77-datetime/</guid>
      <pubDate>Mon, 28 Jun 2021 22:57:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;시계열 데이터를 다루면 x축에 날짜와 시간이 붙습니다.&lt;/li&gt;
&lt;li&gt;x축 데이터는 datetime 객체일 수도 있고, 그냥 string일 수도 있습니다.&lt;/li&gt;
&lt;li&gt;여러 그림을 겹쳐 그릴 때 종종 문제가 됩니다. 원인과 해결책</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>시계열 데이터를 다루면 x축에 날짜와 시간이 붙습니다.</li><li>x축 데이터는 datetime 객체일 수도 있고, 그냥 string일 수도 있습니다.</li><li>여러 그림을 겹쳐 그릴 때 종종 문제가 됩니다. 원인과 해결책을 알아봅니다.<br></li></ul><h1 id="1-예제-데이터"><a href="#1-예제-데이터" class="headerlink" title="1. 예제 데이터"></a>1. 예제 데이터</h1><ul><li>라이브러리 호출<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 라이브러리 호출</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-1-데이터-생성"><a href="#1-1-데이터-생성" class="headerlink" title="1.1. 데이터 생성"></a>1.1. 데이터 생성</h2><ul><li>datetime이 포함된 데이터를 만듭니다.</li><li>2021년 1월 1일부터 5월 1일까지 날짜데이터를 만들고,</li><li>랜덤하게 y 데이터를 생성합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터프레임 생성</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;year&quot;</span>:[<span class="number">2021</span>]*<span class="number">5</span>, </span><br><span class="line">                   <span class="string">&quot;month&quot;</span>:[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)], </span><br><span class="line">                   <span class="string">&quot;day&quot;</span>:[<span class="number">1</span>] * <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># year, month, day로 datetime 생성</span></span><br><span class="line">df[<span class="string">&quot;date_dt&quot;</span>] = pd.to_datetime(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime을 string으로 변환</span></span><br><span class="line">df[<span class="string">&quot;date_str&quot;</span>] = df[<span class="string">&quot;date_dt&quot;</span>].apply(<span class="keyword">lambda</span> x: x.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># random y 데이터 생성</span></span><br><span class="line">df[<span class="string">&quot;dy&quot;</span>] = np.random.random(size=<span class="number">5</span>)</span><br><span class="line">df[<span class="string">&quot;y&quot;</span>] = df[<span class="string">&quot;dy&quot;</span>].cumsum()</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-데이터-확인"><a href="#1-2-데이터-확인" class="headerlink" title="1.2. 데이터 확인"></a>1.2. 데이터 확인</h2><ul><li><p>생성한 데이터를 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="datetime04.png"><br></p></li><li><p>의도한 대로 데이터가 생성되었습니다.</p></li><li><p>생성한 데이터의 타입을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><p><img src="datetime05.png"><br></p></li><li><p>date_dt와 date_str 컬럼은 같은 언뜻 보기에는 같은 데이터입니다.</p></li><li><p>하지만 데이터 타입이 datetime과 object(string)으로 다릅니다.</p></li><li><p>Matplotlib이 이 데이터들을 어떻게 다루는지 봅시다.</p></li></ul><h1 id="2-데이터-시각화"><a href="#2-데이터-시각화" class="headerlink" title="2. 데이터 시각화"></a>2. 데이터 시각화</h1><h2 id="2-1-세-가지-방식"><a href="#2-1-세-가지-방식" class="headerlink" title="2.1. 세 가지 방식"></a>2.1. 세 가지 방식</h2><ul><li>시간에 따른 y의 변화를 그리는데는 크게 3가지 방법이 있습니다.</li></ul><p><b>1. <code>plot(y)</code></b> : y만 plot<br><b>2. <code>plot(datetime, y)</code></b> : datetime 형식 x, y plot<br><b>3. <code>plot(str, y)</code></b> : string 형식 x, y plot</p><ul><li><p>세 가지 방식을 위에서부터 나란히 적용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime01.png"><br></p></li><li><p>맨 위부터 차례로 세 가지 방식으로 그림을 그려 나열했습니다.</p></li><li><p>xticklabels라고 부르는 <b>x축 눈금이 다릅니다.</b></p></li></ul><p><b>1. <code>plot(y)</code></b> : <b>index를 x축으로</b> 사용합니다.<br><b>2. <code>plot(datetime, y)</code></b> : <b>데이터 사이 공간</b>에도 날짜가 찍힙니다.<br><b>3. <code>plot(str, y)</code></b> : <b>데이터가 존재하는 지점</b>에만 날짜가 찍힙니다.</p><h2 id="2-2-xticks와-xticklabels의-정체"><a href="#2-2-xticks와-xticklabels의-정체" class="headerlink" title="2.2. xticks와 xticklabels의 정체"></a>2.2. xticks와 xticklabels의 정체</h2><ul><li>x축 눈금은 두 가지로 이루어집니다.</li><li><b>눈금이 매겨지는 위치(xticks)</b>와 <b>눈금 레이블(xticklabels)</b>입니다.</li><li>세 그림에서 xticks와 xticklabels를 확인합니다.</li></ul><ul><li><b>xticks: <code>ax.get_xticks</code></b>로 확인합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    <span class="built_in">print</span>(ax.get_xticks())</span><br></pre></td></tr></table></figure><img src="datetime07.png"><br></li></ul><p><b>1. <code>plot(y)</code></b> : 그림의 눈금 좌우로 두 개 (-0.5, 4.5)가 더 있습니다.<br><b>2. <code>plot(datetime, y)</code></b> : 데이터에 없는 숫자가 나열되어 있습니다.<br><b>3. <code>plot(str, y)</code></b> : 0부터 4까지의 정수가 기록되어 있습니다.</p><ul><li>xticks의 정체가 뭘까요? 확실하게 알지 않으면 고생할 듯 합니다.</li></ul><ul><li><p><b>xticklabels: <code>ax.get_xticklabels</code></b>로 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    pprint(ax.get_xticklabels())</span><br></pre></td></tr></table></figure><p><img src="datetime08.png"><br></p></li><li><p>Text 객체가 나열되어 있습니다.</p><ul><li>Text 객체는 세 개의 데이터가 나열되어 있습니다.</li><li>첫번째는 xticks와 동일합니다.</li><li>두번째는 모두 0입니다.</li><li>세번째는 그림의 눈금에 찍힌 숫자입니다.</li></ul></li></ul><ul><li>Text 객체의 구성은 <b>(x좌표, y좌표, text내용)</b>입니다.<ul><li>따라서 <b>xticks의 정체는 눈금의 x좌표</b>입니다.</li><li>세 그림에서 xticks가 다른데서 볼 수 있듯 plot 방식에 따라 x좌표가 다루어지는 방식이 달라집니다.</li></ul></li></ul><h2 id="2-3-index가-하나-빠지면"><a href="#2-3-index가-하나-빠지면" class="headerlink" title="2.3. index가 하나 빠지면?"></a>2.3. index가 하나 빠지면?</h2><ul><li><p>결측치 제거 등으로 index에 구멍이 뚫리는 일이 자주 있습니다.</p></li><li><p>index가 빠졌을 때 각기 어떤 일이 벌어지는지 살펴봅시다.</p></li><li><p>데이터에 구멍을 뚫습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_drop = df.drop(<span class="number">3</span>)</span><br><span class="line">df_drop</span><br></pre></td></tr></table></figure><p><img src="datetime09.png"><br></p></li><li><p>index 3을 지웠기 때문에 <b>0, 1, 2, 4만 남았습니다.</b></p></li><li><p>똑같은 코드로 그림을 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                        <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df_drop[<span class="string">&quot;date_dt&quot;</span>], df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df_drop[<span class="string">&quot;date_str&quot;</span>], df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime06.png"><br></p></li><li><p>세 결과가 완전히 다릅니다. :)<br><b>1. <code>plot(y)</code></b> : 남아있는 index가 x축에 놓입니다.<br><b>2. <code>plot(datetime, y)</code></b> : 남은 index에 대응되는 datetime이 놓입니다.<br>※ 비어 있는 <b>2020-04-01를 건너 뛰고</b> 그립니다.<br><b>3. <code>plot(str, y)</code></b> : 0부터 4까지의 정수가 기록되어 있습니다.<br>※ <b>데이터를 건너뛰는 대신 균일하게 나열하기 때문에 4월이 빠진 것을 알기 어렵습니다.</b></p></li></ul><h2 id="2-4-다른-데이터와-중첩"><a href="#2-4-다른-데이터와-중첩" class="headerlink" title="2.4. 다른 데이터와 중첩"></a>2.4. 다른 데이터와 중첩</h2><ul><li><p>(0,0)-(1,1)을 잇는 짧은 직선을 겹쳐 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], <span class="string">&quot;rs:&quot;</span>)            <span class="comment"># (0,0)~(1,1) 사이 직선</span></span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text,                  <span class="comment"># text</span></span><br><span class="line">            fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime02.png"><br></p></li><li><p>가운데 결과가 완전히 다릅니다. :)<br><b>1. <code>plot(y)</code></b> : 자연스럽습니다. x축 눈금과 데이터가 일치합니다.<br><b>2. <code>plot(datetime, y)</code></b> : 완전히 다른 곳에 놓입니다.<br>※ <b>(0,0)이 1970년에 놓여 있습니다.</b> 자주 하는 실수입니다. 조심해야 합니다.<br><b>3. <code>plot(str, y)</code></b> : 맨 위와 동일하게 자연스럽습니다.<br>※ 다만, 빠진 데이터가 반영되지 않으니 사용하기 좋지 않습니다.</p></li></ul><h2 id="2-5-x축-범위-설정"><a href="#2-5-x축-범위-설정" class="headerlink" title="2.5. x축 범위 설정"></a>2.5. x축 범위 설정</h2><ul><li><p>데이터 중첩 문제는 x축 범위 설정에서 똑같이 등장합니다.</p></li><li><p>다른 방식의 범위를 비슷하게 맞춰봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(<span class="number">0.8</span>, <span class="number">2.2</span>)                            <span class="comment"># x 범위: index 기준</span></span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">1</span>].set_xlim(datetime.date(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">26</span>),            <span class="comment"># x 범위: datetime 기준</span></span><br><span class="line">                datetime.date(<span class="number">2021</span>,<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)   <span class="comment"># x data : string</span></span><br><span class="line">axs[<span class="number">2</span>].set_xlim(<span class="number">0.8</span>, <span class="number">2.2</span>)                            <span class="comment"># x 범위: index 기준</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, </span><br><span class="line">            fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime03.png"><br></p></li><li><p>xticks의 종류에 따라 처방이 다릅니다.</p></li><li><p>index 형식은 index에 맞는 범위를 넣어주고, datetime 형식은 datetime 모듈을 사용해 범위를 지정합니다.<br><b>1. <code>plot(y)</code></b> : 표현 범위의 index에 적절한 여백을 넣습니다.<br><b>2. <code>plot(datetime, y)</code></b> : datetime 모듈을 사용해서 <b>범위에 날짜를 넣습니다.</b><br><b>3. <code>plot(str, y)</code></b> : 1.과 동일합니다.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/pandas/">pandas</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/datetime/">datetime</category>
      
      
    </item>
    
    <item>
      <title>PyTorch GPU setting</title>
      <link>https://jehyunlee.github.io/2021/06/06/Python-DL-6-pytorchGPU/</link>
      <guid>https://jehyunlee.github.io/2021/06/06/Python-DL-6-pytorchGPU/</guid>
      <pubDate>Sun, 06 Jun 2021 03:01:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;PyTorch GPU 버전을 설치한다고 GPU를 사용하지 않습니다.&lt;/li&gt;
&lt;li&gt;GPU가 여럿이라면 어떤 GPU가 사용 가능한지 확인하고,&lt;/li&gt;
&lt;li&gt;변수와 모델에 GPU 사용 설정을 해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>PyTorch GPU 버전을 설치한다고 GPU를 사용하지 않습니다.</li><li>GPU가 여럿이라면 어떤 GPU가 사용 가능한지 확인하고,</li><li>변수와 모델에 GPU 사용 설정을 해야 합니다.</li></ul><h1 id="1-PyTorch-버전-확인"><a href="#1-PyTorch-버전-확인" class="headerlink" title="1. PyTorch 버전 확인"></a>1. PyTorch 버전 확인</h1><ul><li>현재 버전을 확인합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch, torchvision</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torchvision.__version__)</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.7.1+cu101</span><br><span class="line">0.8.2+cu101</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-GPU-현황-확인"><a href="#2-GPU-현황-확인" class="headerlink" title="2. GPU 현황 확인"></a>2. GPU 현황 확인</h1><ul><li>GPU가 사용 가능한지 확인합니다.</li><li>사용 가능하다면, 메모리 점유 현황을 출력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(torch.cuda.device_count()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;# DEVICE <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- Memory Usage:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Allocated: <span class="subst">&#123;<span class="built_in">round</span>(torch.cuda.memory_allocated(i)/<span class="number">1024</span>**<span class="number">3</span>,<span class="number">1</span>)&#125;</span> GB&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Cached:    <span class="subst">&#123;<span class="built_in">round</span>(torch.cuda.memory_cached(i)/<span class="number">1024</span>**<span class="number">3</span>,<span class="number">1</span>)&#125;</span> GB\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;# GPU is not available&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DEVICE 0: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># DEVICE 1: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># DEVICE 2: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="3-GPU-할당-변경"><a href="#3-GPU-할당-변경" class="headerlink" title="3. GPU 할당 변경"></a>3. GPU 할당 변경</h1><ul><li>작업할 GPU를 선정합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GPU 할당 변경하기</span></span><br><span class="line">GPU_NUM = <span class="number">2</span> <span class="comment"># 원하는 GPU 번호 입력</span></span><br><span class="line">device = torch.device(<span class="string">f&#x27;cuda:<span class="subst">&#123;GPU_NUM&#125;</span>&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">torch.cuda.set_device(device) <span class="comment"># change allocation of current GPU</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# Current cuda device: &#x27;</span>, torch.cuda.current_device()) <span class="comment"># check</span></span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Current cuda device:  2</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="4-GPU-사용을-기본값으로-설정"><a href="#4-GPU-사용을-기본값으로-설정" class="headerlink" title="4. GPU 사용을 기본값으로 설정"></a>4. GPU 사용을 기본값으로 설정</h1><ul><li>변수를 만들때 자동으로 GPU를 사용하게 설정합니다.</li><li>앞서 <code>GPU_NUM</code>으로 지정한 GPU에 할당됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    torch.set_default_tensor_type(torch.cuda.FloatTensor)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;using cuda: <span class="subst">&#123;GPU_NUM&#125;</span>, <span class="subst">&#123;torch.cuda.get_device_name(GPU_NUM)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using cuda: 2, Tesla V100-PCIE-32GB</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>변수를 만들어 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.FloatTensor([<span class="number">1.0</span>])</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>GPU 사용을 기본값으로 명시했는데 안올라갑니다.</p></li><li><p>강제로 올려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = x.cuda()</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>그냥 <b><code>torch.Tensor()</code></b>를 해야 GPU에 올라갑니다.</li><li>자료형도 내가 원하는 <code>torch.cuda.FloatTensor</code>입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor([<span class="number">1.0</span>])</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Deep-Learning/">Deep Learning</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/pytorch/">pytorch</category>
      
      <category domain="https://jehyunlee.github.io/tags/GPU/">GPU</category>
      
      
    </item>
    
    <item>
      <title>Legend Control</title>
      <link>https://jehyunlee.github.io/2021/06/06/Python-DS-76-mpllegend/</link>
      <guid>https://jehyunlee.github.io/2021/06/06/Python-DS-76-mpllegend/</guid>
      <pubDate>Sat, 05 Jun 2021 20:54:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Legend(범례)는 데이터의 의미 파악을 도와주는 도구입니다.&lt;/li&gt;
&lt;li&gt;그러나 그림이 여럿 있을 때 각각 붙은 Legend는 방해가 되기도 합니다.&lt;/li&gt;
&lt;li&gt;Legend를 한데 모아 그리는 방법을 알아봅니다.&lt;br&gt;&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Legend(범례)는 데이터의 의미 파악을 도와주는 도구입니다.</li><li>그러나 그림이 여럿 있을 때 각각 붙은 Legend는 방해가 되기도 합니다.</li><li>Legend를 한데 모아 그리는 방법을 알아봅니다.<br></li></ul><h1 id="1-Sample-Data"><a href="#1-Sample-Data" class="headerlink" title="1. Sample Data"></a>1. Sample Data</h1><ul><li>먼저 필요한 라이브러리들을 불러오고,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">&quot;whitegrid&quot;</span>)</span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>우리의 펭귄을 소환합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_p = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">df_p.head()</span><br></pre></td></tr></table></figure><img src="76_mpllegend_12.png"><br></li></ul><h1 id="2-기본-그림"><a href="#2-기본-그림" class="headerlink" title="2. 기본 그림"></a>2. 기본 그림</h1><ul><li><p>legend를 붙일 그림을 먼저 그립니다.</p></li><li><p>seaborn의 <code>regplot</code>을 사용해서 부리 길이, 폭, 날개 길이를 그립니다.</p></li><li><p>scatter_kws와 line_kws로 시각화 요소들의 색상, 크기 등을 설정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">0</span>], label=<span class="string">&quot;Bill Length&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C1&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">1</span>], label=<span class="string">&quot;Bill Depth&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C2&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;flipper_length_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">2</span>], label=<span class="string">&quot;Flipper Length&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C3&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_01.png"><br></p></li><li><p><code>sns.regplot()</code>함수가 데이터 수만큼 반복되고 있습니다.</p></li><li><p>데이터 수가 10개라면 코드가 그만큼 더 길어질 것입니다.</p></li><li><p>for loop과 zip을 사용해서 효율적으로 바꿉니다. 조금 짧아지고 유지보수가 편해집니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_01_for.png"><br></p></li><li><p><code>ax.set_ylabel(&quot;&quot;)</code>로 ylabel을 지웠습니다.</p></li><li><p>y 인자 이름을 축 레이블 대신 legend 형태로 표현하기 위해서입니다.</p></li></ul><h1 id="3-Legend-하나씩"><a href="#3-Legend-하나씩" class="headerlink" title="3. Legend 하나씩"></a>3. Legend 하나씩</h1><h2 id="3-1-Axes별-Legend"><a href="#3-1-Axes별-Legend" class="headerlink" title="3.1. Axes별 Legend"></a>3.1. Axes별 Legend</h2><ul><li>가장 기본적인 형태입니다.</li><li>Axes 하나마다 <code>ax.legend()</code>를 실행합니다.</li><li>markerscale은 데이터를 의미하는 마커를 3배 크게 그리라는 의미입니다.</li><li>잘 보이게 하고 데이터와 혼동되지 않게 하려는 의도입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ax.legend(markerscale=<span class="number">3</span>) <span class="comment"># Axes별 Legend</span></span><br></pre></td></tr></table></figure><img src="76_mpllegend_02.png"><br></li></ul><h2 id="3-2-Axes-공간-전체-사용"><a href="#3-2-Axes-공간-전체-사용" class="headerlink" title="3.2. Axes 공간 전체 사용"></a>3.2. Axes 공간 전체 사용</h2><ul><li>Axes마다 붙긴 했는데 깔끔하지 않습니다. 좀 지저분합니다.</li><li>Axes마다 Legend가 귀퉁이에 쭈그리고 있어서 그런가 싶습니다.</li><li><code>mode=&quot;extend&quot;</code>로 전체 공간을 다 사용하도록 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    ax.legend(mode=<span class="string">&quot;expand&quot;</span>, markerscale=<span class="number">3</span>) <span class="comment"># Axes별 Legend, 넓게</span></span><br></pre></td></tr></table></figure><img src="76_mpllegend_03.png"><br></li></ul><h2 id="3-3-Axes-위에-Legend"><a href="#3-3-Axes-위에-Legend" class="headerlink" title="3.3. Axes 위에 Legend"></a>3.3. Axes 위에 Legend</h2><ul><li>scatter plot은 점 하나하나가 데이터입니다.</li><li>시각화 요소들에 의해 가려지면 그만큼 데이터 전달력이 손실됩니다.</li><li>Axes 위로 Legend를 올려서 데이터를 잘 보이게 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Axes별 Legend, 위치 지정</span></span><br><span class="line">    ax.legend(loc=<span class="string">&quot;lower center&quot;</span>, bbox_to_anchor=[<span class="number">0.5</span>, <span class="number">1.03</span>], markerscale=<span class="number">3</span>) </span><br></pre></td></tr></table></figure><img src="76_mpllegend_04.png"><br></li></ul><ul><li>그런데 여기서 전체 범위를 사용하겠다고 <code>mode=&quot;extend&quot;</code>를 사용하면 오류가 납니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(loc=<span class="string">&quot;lower center&quot;</span>, bbox_to_anchor=[<span class="number">0</span>, <span class="number">1.03</span>], mode=<span class="string">&quot;expand&quot;</span>, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_05.png"><br></li></ul><ul><li>매개변수에서 bbox_to_anchor를 제거하고 사용하면 잘 됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(loc=[<span class="number">0</span>, <span class="number">1.03</span>], mode=<span class="string">&quot;expand&quot;</span>, borderaxespad=<span class="number">0</span>, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_06.png"><br></li></ul><h1 id="4-Legend-모아-붙이기"><a href="#4-Legend-모아-붙이기" class="headerlink" title="4. Legend 모아 붙이기"></a>4. Legend 모아 붙이기</h1><ul><li>Axes별로 Legend를 출력하지 않고 한데 모으면 더 깔끔합니다.</li><li>이를 가능하게 하려면 handle과 label이라는 개념을 파악할 필요가 있습니다.</li><li>legend는 의미가 담긴 label과 label이 지칭하는 대상이 있습니다. 이 대상이 handle입니다.</li></ul><ul><li><code>ax.get_legend_handles_labels</code> 명령으로 확인하고 가져올 수 있습니다.</li><li>위 그림의 첫번째 Axes에 담긴 handle과 label은 이렇습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handle, label = axs[<span class="number">0</span>].get_legend_handles_labels()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;handle= <span class="subst">&#123;handle&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;label = <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 시각화를 하나밖에 안했으므로 handle과 label이 하나씩입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">handle= [&lt;matplotlib.collections.PathCollection <span class="built_in">object</span> at <span class="number">0x7f95fa482e90</span>&gt;]</span><br><span class="line">label = [<span class="string">&#x27;Bill Length&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-1-Axes에-붙이기"><a href="#4-1-Axes에-붙이기" class="headerlink" title="4.1. Axes에 붙이기"></a>4.1. Axes에 붙이기</h2><ul><li>빈 list를 만들고, 그림을 그릴 때마다 handle과 label을 가져와 모읍니다.</li><li>그림을 모두 다 그린 후, 맨 마지막 Axes 오른쪽에 붙입니다.</li><li>추가 공간이 필요하니 그림 가로 폭을 10에서 14로 넓혀줍니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 맨 오른쪽 Axes에 붙이기</span></span><br><span class="line">axs[-<span class="number">1</span>].legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">               loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">1.1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_07.png"><br></li></ul><h2 id="4-2-Figure에-붙이기"><a href="#4-2-Figure에-붙이기" class="headerlink" title="4.2. Figure에 붙이기"></a>4.2. Figure에 붙이기</h2><ul><li>특정 Axes에 속하지 않도록 전체 그림이 담긴 Figure에 붙일 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure에 붙이기</span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_08.png"><br></li></ul><h2 id="4-2-Figure의-Axes-옆자리에-붙이기"><a href="#4-2-Figure의-Axes-옆자리에-붙이기" class="headerlink" title="4.2. Figure의 Axes 옆자리에 붙이기"></a>4.2. Figure의 Axes 옆자리에 붙이기</h2><ul><li>Axes를 그대로 놔두고 붙였더니 맨 우측 Axes에 겹쳐 그려졌습니다.</li><li>Axes 옆에 놓기 위해 legend의 위치를 섬세하게 지정합니다.</li></ul><ul><li>loc와 bbox_to_anchor 매개변수는 이런 역할을 합니다.</li><li>loc만 단독으로 사용하면 붙이는 대상에 따라 Figure나 Axes의 지정된 위치에 놓입니다</li><li>loc와 bbox_to_anchor를 함께 사용하면 loc는 legend의 지점이 되고 bbox_to_anchor는 legend가 놓일 위치가 됩니다.</li><li>bbox_to_ancher에 매개변수가 둘 들어가면 위치만, 넷 들어가면 위치와 가로세로 크기입니다.<br><br><img src="76_mpllegend_14.png"><br></li></ul><ul><li><p>맨 우측 Axes 오른쪽 상단에 붙도록 값을 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure 옆에 legend 붙이기: 화면엔 정상, 파일은 실패    </span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_13.png"><br></p></li><li><p>화면에는 정상으로 나오지만 파일을 저장하면 그렇지 않습니다.<br><br><img src="76_mpllegend_09.png"><br></p></li><li><p>legend가 전혀 보이지 않습니다.</p></li><li><p>bbox_to_anchor에서 지정한 x 위치가 Figure의 우측 한계선(1)을 넘었기 때문입니다.</p></li></ul><ul><li>파일 출력을 하려면 legend 전체가 Figure 범위 안에 들어와야 합니다.</li><li>그러려면 Axes를 좌측으로 압축시킬 필요가 있습니다.</li><li><code>fig.tight_layout()</code>에 rect 매개변수를 넣으면 됩니다. </li><li>충돌 방지를 위해 비슷한 기능을 하는 constrained_layout은 figure 생성 명령에서 삭제합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), sharex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 옆에 legend 붙이기. x 좌표 = 0.8</span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">0.8</span>, <span class="number">0.95</span>])</span><br><span class="line"><span class="comment"># Axes들 0.8 안쪽으로 압축</span></span><br><span class="line">fig.tight_layout(rect=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_10.png"><br></li></ul><h2 id="4-3-Figure의-Axes-위에-붙이기"><a href="#4-3-Figure의-Axes-위에-붙이기" class="headerlink" title="4.3. Figure의 Axes 위에 붙이기"></a>4.3. Figure의 Axes 위에 붙이기</h2><ul><li>같은 요령으로 legend를 Axes 위에 모아서 붙일 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), sharex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 위에 legend 붙이기. y 좌표 = 0.9    </span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>, ncol=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">0.045</span>, <span class="number">0.9</span>, <span class="number">1</span>, <span class="number">0.1</span>])</span><br><span class="line"><span class="comment"># Axes들 y = 0.9 안쪽으로 압축</span></span><br><span class="line">fig.tight_layout(rect=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.9</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_11.png"><br></li></ul><h1 id="5-정리"><a href="#5-정리" class="headerlink" title="5. 정리"></a>5. 정리</h1><ul><li>legend는 여러 데이터를 명확히 구분해주는, 반드시 필요한 요소입니다.</li><li>그러나 Axes가 많아지고 데이터 인자가 많아질수록 혼돈의 원인이 되기도 합니다.</li><li>적절한 위치에 적절한 형식으로 배치해서 인지능력 향상에 도움이 되면 좋겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/seaborn/">seaborn</category>
      
      <category domain="https://jehyunlee.github.io/tags/legend/">legend</category>
      
      
    </item>
    
    <item>
      <title>Lecture Survey Summary (Google Forms)</title>
      <link>https://jehyunlee.github.io/2021/05/30/Python-DS-75-googlesurvey/</link>
      <guid>https://jehyunlee.github.io/2021/05/30/Python-DS-75-googlesurvey/</guid>
      <pubDate>Sat, 29 May 2021 22:23:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;2주 전 학회에서 머신러닝 기초 강의를 했습니다.&lt;/li&gt;
&lt;li&gt;Google Forms를 통해서 참석자들에게 피드백을 받았습니다.&lt;/li&gt;
&lt;li&gt;답변 정리에 Matplotlib 함수를 적극적으로 사용했습니다.&lt;br&gt;&lt;br&gt;&lt;img </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>2주 전 학회에서 머신러닝 기초 강의를 했습니다.</li><li>Google Forms를 통해서 참석자들에게 피드백을 받았습니다.</li><li>답변 정리에 Matplotlib 함수를 적극적으로 사용했습니다.<br><br><img src="75_survey09.png"><br></li></ul><h1 id="1-Google-Forms"><a href="#1-Google-Forms" class="headerlink" title="1. Google Forms"></a>1. Google Forms</h1><ul><li><p><a href="https://docs.google.com/forms/u/0/">Google Forms</a>는 간단하게 설문조사를 할 수 있는 플랫폼입니다.</p></li><li><p><b>회의나 회식 일정</b>을 잡는데 사용하기도 편하고 <b>피드백</b>을 받기 좋습니다.<br><br><img src="75_survey04.png"><br></p></li><li><p>결과를 자체적으로 취합해서 보여주기 때문에 사실상 추가 처리가 필요치 않습니다.</p></li><li><p>스크린샷만 찍어서 보고서에 붙여넣어도 무방한 퀄리티입니다.<br><br><img src="75_survey01.png"><br></p></li><li><p>그런데 가끔 문제가 발생합니다.</p></li><li><p>강의평가 중 <b>강의 속도</b>와 <b>강의 난이도</b>는 5점 만점 중 3점에 몰려있습니다.</p></li><li><p>강의 속도와 난이도 조절을 실패한 것 처럼 보입니다.<br><br><img src="75_survey02.png"><br></p></li><li><p>그러나 실제 문항을 보면 <b>너무 느림</b>과 <b>너무 빠름</b>의 딱 중간입니다.</p></li><li><p><b>속도와 난이도가 적절했음</b>을 알 수 있습니다.</p></li><li><p>그림을 기계적으로 갖다붙이면 강의를 진행한 입장에서 몹시 억울할 것입니다.<br><br><img src="75_survey03.png"><br></p></li><li><p>Google Forms에서는 원본 데이터 다운로드를 제공합니다.</p></li><li><p>그림을 다운받아 새로 그리면 됩니다.</p></li><li><p>파이썬에서 진행합니다.</p></li></ul><h1 id="2-Python-Visualization"><a href="#2-Python-Visualization" class="headerlink" title="2. Python Visualization"></a>2. Python Visualization</h1><h2 id="2-1-데이터-다운로드"><a href="#2-1-데이터-다운로드" class="headerlink" title="2.1. 데이터 다운로드"></a>2.1. 데이터 다운로드</h2><ul><li><p>설문조사 결과지의 오른쪽 위를 클릭해 데이터를 받습니다.<br><br><img src="75_survey05.png"><br></p></li><li><p>설문조사명이 파일명이 됩니다.</p></li><li><p>적절히 짧게 바꿔 노트북에서 읽어옵니다.</p></li><li><p>데이터 중 한글이 있으므로 한글 사용 설정도 함께 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 필요 라이브러리 읽어오기</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;NanumGothic&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 파일 읽기</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;googlesurvey.csv&quot;</span>)</span><br><span class="line">df.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="75_survey06.png"><br></p></li></ul><h2 id="2-2-문항-추출"><a href="#2-2-문항-추출" class="headerlink" title="2.2. 문항 추출"></a>2.2. 문항 추출</h2><ul><li>컬럼명이 문항입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Qs = df.columns</span><br><span class="line">Qs</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Index([<span class="string">&#x27;Timestamp&#x27;</span>, <span class="string">&#x27;1-1. 강의 전까지 본인의 파이썬 경험&#x27;</span><span class="string">&#x27;, &#x27;</span>1-2. 강의 전까지 본인의 머신러닝 경험<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>1-3. 강의 전까지 본인 연구에 머신러닝 활용 계획<span class="string">&#x27;, &#x27;</span>1-4. 본인의 연차<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>2-1. 강의 커리큘럼 - 슬라이드 &amp; 예제 코드<span class="string">&#x27;, &#x27;</span>2-2. 강의 속도<span class="string">&#x27;, &#x27;</span>2-3. 강의 난이도<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>2-4. 강의 전달력<span class="string">&#x27;, &#x27;</span>2-5. 동료에게 추천 의사<span class="string">&#x27;, &#x27;</span>3-1. 강의 후 파이썬 학습 의사<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>3-2. 강의 후 머신러닝 학습 의사<span class="string">&#x27;, &#x27;</span>3-3. 강의 후 본인 연구에 머신러닝 활용 의사<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>4. 건의사항 등 강사에게 하고싶은 말 (optional)<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">      dtype=&#x27;</span>object<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-3-시각화-함수-작성"><a href="#2-3-시각화-함수-작성" class="headerlink" title="2.3. 시각화 함수 작성"></a>2.3. 시각화 함수 작성</h2><ul><li>모든 문항은 <b>본인의 연차</b>항목을 제외하고 5점 척도로 되어 있습니다.</li><li>형식은 <b>histogram</b>, 또는 <b>bar plot</b>이 적절합니다.</li><li>데이터의 전반적인 분포가 중요하고, 데이터간 변화량은 중요치 않기 때문입니다.</li></ul><ul><li><p>시각화 함수는 다음과 같이 작성되었습니다.</p></li><li><p>부분별 설명은 주석으로 달았습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_count</span>(<span class="params">x, data, color=<span class="string">&quot;C0&quot;</span>, cmap=<span class="literal">None</span>, ticks=<span class="built_in">range</span>(<span class="params"><span class="number">1</span>, <span class="number">6</span></span>), ticklabels=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               orient=<span class="string">&quot;v&quot;</span>, ax=<span class="literal">None</span>, ec=<span class="string">&quot;none&quot;</span>, figsize=(<span class="params"><span class="number">10</span>, <span class="number">5</span></span>), filename=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 지정된 Axes가 없으면 새로 만들기. 크기는 figuresize에서 입력받음.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize, constrained_layout=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># value별로 갯수 세기. 데이터가 존재하지 않으면 0을 채움.</span></span><br><span class="line">    val_cnt = data[x].value_counts().to_dict()</span><br><span class="line">    cnt_list = [val_cnt[k] <span class="keyword">if</span> k <span class="keyword">in</span> val_cnt.keys() <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> ticks]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># bar의 방향. v(ertical) 또는 h(orizontal).    </span></span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        ax.bar(x=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>), height=cnt_list, fc=color, ec=ec)</span><br><span class="line">    <span class="keyword">elif</span> orient == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        ax.barh(y=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>), width=cnt_list, fc=color, ec=ec)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 변수 이름은 xlabel이지만 실제로는 title. 시각화 코드 수정이 남긴 흔적.</span></span><br><span class="line">    <span class="comment"># Google Forms에서 받은 데이터에 홑따옴표(&#x27;)가 있어 제거 필요.</span></span><br><span class="line">    <span class="comment"># font 색상, 크기, 두께를 fontdict로 설정</span></span><br><span class="line">    xlabel = x.replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title 지정            </span></span><br><span class="line">    ax.set_title(xlabel, fontdict=font_label, pad=<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># bar 방향에 따라 ticklabels를 xticks 또는 yticks로 설정</span></span><br><span class="line">    <span class="comment"># ticklabels 입력과 무관하게 데이터값이 보이는 위치에 정수만 출력하고 grid 설정</span></span><br><span class="line">    <span class="comment"># ticklabels를 입력받으면 입력받은 값 출력</span></span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        yticks = [<span class="built_in">int</span>(y) <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() <span class="keyword">if</span> <span class="keyword">not</span> (y*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">        ax.set_yticks(yticks)</span><br><span class="line">        ax.set_yticklabels(yticks)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;y&quot;</span>)       </span><br><span class="line">        ax.set_ylabel(<span class="string">&quot;count&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ax.set_xticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">            ax.set_xticklabels(ticklabels, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">            ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        xticks = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> <span class="keyword">not</span> (x*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels(xticks)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;x&quot;</span>)       </span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;count&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ax.set_yticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">            ax.set_yticklabels(ticklabels, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">            ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 입력받은 컬러맵 사용</span></span><br><span class="line">    <span class="comment"># 데이터의 범위보다 2개 더 많은 컬러맵 색상을 지정하고 첫 색상과 끝 색상은 사용하지 않음</span></span><br><span class="line">    <span class="keyword">if</span> cmap:</span><br><span class="line">        ncmaps = <span class="number">7</span></span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ncmaps = <span class="built_in">len</span>(ticklabels) + <span class="number">2</span></span><br><span class="line">        <span class="comment"># 컬러맵 불러오기</span></span><br><span class="line">        cmap_ = plt.get_cmap(cmap, ncmaps)</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches, <span class="number">1</span>):</span><br><span class="line">            p.set_facecolor(cmap_(i))         </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 파일명 입력시 입력받은 이름으로 저장.</span></span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename, dpi=<span class="number">200</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li><li><p>시각화 결과물이 출력될 Axes를 입력받을 수도 있고 그렇지 않을 수도 있습니다.</p></li><li><p>bar plot을 가로 방향 또는 세로 방향으로 출력할 수 있습니다.</p></li><li><p>bar 색상은 특정 색상을 지정할 수도 있지만 컬러맵을 사용할 수 있습니다.</p></li><li><p>컬러맵 사용시 맨 처음과 끝 색은 사용하지 않도록 설정했습니다. 지나치게 극단적인 색상 차를 방지하기 위해서입니다.</p></li></ul><ul><li>코드가 잘 작동하는지 테스트합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">1</span>], df)</span><br></pre></td></tr></table></figure><img src="75_survey07.png"><br></li></ul><ul><li>다른 axes에 삽입도 해보고 가로 방향도 돌려봅니다.</li><li>색상도 지정해보고, 너무 밝은 색에는 테두리도 둘러봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line">plot_count(Qs[<span class="number">1</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C1&quot;</span>, ax=axs[<span class="number">0</span>])</span><br><span class="line">plot_count(Qs[<span class="number">2</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C2&quot;</span>, ax=axs[<span class="number">1</span>])</span><br><span class="line">plot_count(Qs[<span class="number">3</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C3&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>, ax=axs[<span class="number">2</span>])</span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><img src="75_survey08.png"><br></li></ul><h1 id="3-설문결과-정리"><a href="#3-설문결과-정리" class="headerlink" title="3. 설문결과 정리"></a>3. 설문결과 정리</h1><ul><li>크게 4개 항목에 대하여 설문조사를 수행했습니다.</li><li>보고서에 삽입될 그림이라 가로로 긴 모양을 택했습니다.</li></ul><p><b>1. 강의 전 본인의 상태:</b> 교육 참여자들의 파이썬, 머신러닝 친밀도와 학습 의지 조사<br><b>2. 강의 품질:</b> 강의 속도, 난이도 등 조사. 차기 강의에 반영하기 위한 데이터<br><b>3. 강의 후 본인의 상태:</b> 강의 효과 확인<br><b>4. 건의사항 등 강사에게 하고 싶은 말 (optional):</b> 설문에 담기지 않은 내용 조사</p><h2 id="3-1-강의-전-본인의-상태"><a href="#3-1-강의-전-본인의-상태" class="headerlink" title="3.1. 강의 전 본인의 상태"></a>3.1. 강의 전 본인의 상태</h2><ul><li><p>교육 참여자</p></li><li><p>첫 질문은 강의 전까지 파이썬 사용 경험입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">1</span>], df, filename=<span class="string">&quot;Q1.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>, </span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n한번도 안 써봤다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n주3회 이상 사용한다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q1.png"><br></p></li><li><p>두 번째 질문은 기존 머신러닝 경험입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">2</span>], df, filename=<span class="string">&quot;Q2.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n한번도 안 해봤다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n필요한 기술을\n능숙하게 사용한다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q2.png"><br></p></li><li><p>강의 전까지 본인 연구에 머신러닝을 활용할 계획이 있었는지 궁금했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">3</span>], df, filename=<span class="string">&quot;Q3.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n전혀 없었다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 구체적이었다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q3.png"><br></p></li><li><p>본인의 연차</p></li><li><p>ticklabels가 길어서 가로로 그렸습니다.</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">4</span>], df, filename=<span class="string">&quot;Q4.png&quot;</span>, cmap=<span class="string">&quot;Blues&quot;</span>, orient=<span class="string">&quot;h&quot;</span>,</span><br><span class="line">           ticks=[<span class="string">&quot;학부 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;석사과정 학생&quot;</span>, <span class="string">&quot;석사 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;박사과정 학생&quot;</span>, <span class="string">&quot;박사학위 소지자&quot;</span>], </span><br><span class="line">           ticklabels=[<span class="string">&quot;학부 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;석사과정 학생&quot;</span>, <span class="string">&quot;석사 졸업 후 현업 근무&quot;</span>, </span><br><span class="line">                        <span class="string">&quot;박사과정 학생&quot;</span>, <span class="string">&quot;박사학위 소지자&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q4.png"><br></p><h2 id="3-2-강의-품질"><a href="#3-2-강의-품질" class="headerlink" title="3.2. 강의 품질"></a>3.2. 강의 품질</h2><ul><li>강의 커리큘럼은 적절했는지 궁금했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">5</span>], df, filename=<span class="string">&quot;Q5.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 불만족&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 만족&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q5.png"><br></li></ul><ul><li>강의 속도와 난이도가 가장 신경쓰였습니다.</li><li>강의 속도 항목입니다. <b>딱 중간이 가장 좋고 양 끝으로 갈수록 좋지 않습니다.</b></li><li>내용 전달을 위해 컬러맵을 좌우 대칭의 diverging 타입인 RdBu_r로 바꾸었습니다.</li><li>가운데가 매우 밝은 회색이라 배경의 흰색과 잘 구분이 안되기에 테두리를 둘렀습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">6</span>], df, filename=<span class="string">&quot;Q6.png&quot;</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n너무 느림&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n적절함&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n너무 빠름&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q6.png"><br></li></ul><ul><li>강의 난이도입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">7</span>], df, filename=<span class="string">&quot;Q7.png&quot;</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n너무 쉬움&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n적절함&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n너무 어려움&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q7.png"><br></li></ul><ul><li>제가 제대로 했는지 강의 전달력도 많이 궁금했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">8</span>], df, filename=<span class="string">&quot;Q8.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 불만족&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 만족&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q8.png"><br></li></ul><ul><li>주최측에서 앞으로 계속 키워가고자 하는 행사입니다.</li><li>앞으로의 흥행이 중요합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">9</span>], df, filename=<span class="string">&quot;Q9.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 부정&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 긍정&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q9.png"><br></li></ul><ul><li>피드백을 통해 감을 잡을 수 있었습니다.</li><li>다음 강의가 열린다면, 준비를 더 잘 할 수 있을 것 같습니다.</li></ul><h2 id="3-3-강의-후-본인의-상태"><a href="#3-3-강의-후-본인의-상태" class="headerlink" title="3.3. 강의 후 본인의 상태"></a>3.3. 강의 후 본인의 상태</h2><ul><li>강의 전과 비교하여 조금 적극적이 되기를 바랬습니다.</li><li>파이썬, 머신러닝, 본인 연구에 대한 변화가 있기를 바랬습니다.</li><li>강의 시작부분에서 <b>한시간 반으로는 맛배기도 안된다. 스스로 공부하시라</b>는 말을 했기에 마음가짐 변화가 가장 중요합니다.</li></ul><ul><li><b>함수로 그린 그림을 변수로 받아 수정합니다.</b></li><li>설문조사 결과도 강의 전 결과를 그림으로 삽입하여 비교했습니다.</li><li>함수로 만들어 사용할까 했지만 몇 개 안되어 코드를 복사해서 활용했습니다.</li></ul><ul><li>먼저, 강의 전 후 파이썬 학습 의사를 조사했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수로 그림을 그립니다.</span></span><br><span class="line">ax = plot_count(Qs[<span class="number">10</span>], df, filename=<span class="string">&quot;Q10.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 부정&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 긍정&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Axes를 담고 있는 Figure를 호출합니다.</span></span><br><span class="line">fig = ax.figure</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure에 비교할 그림을 붙일 공간을 확보합니다.</span></span><br><span class="line">ax_prev = fig.add_axes([<span class="number">0.05</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 강의 전 상태를 불러와서 붙입니다.</span></span><br><span class="line">im_prev = plt.imread(<span class="string">&quot;Q1.png&quot;</span>)</span><br><span class="line">ax_prev.imshow(im_prev)</span><br><span class="line">ax_prev.axis(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과를 정리합니다.</span></span><br><span class="line">fig.savefig(<span class="string">&quot;Q10.png&quot;</span>, dpi=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><img src="Q10.png"><br></li></ul><ul><li>강의 후 머신러닝 학습 의사입니다.</li><li>코드는 거의 동일합니다.<br><img src="Q11.png"><br></li></ul><ul><li>강의 후 본인 연구에 머신러닝을 활용할 의사입니다.</li><li>코드는 거의 동일합니다.<br><img src="Q12.png"><br></li></ul><ul><li>전반적으로 강의 전보다 후에 파이썬, 머신러닝, 본인 연구 적용 의사가 높아졌습니다.</li><li>감사하게도 응답을 잘 해주셨다는 생각도 듭니다만 실제로 이런 영향이 있으면 좋겠습니다. :)</li></ul><h2 id="3-4-건의사항-등-강사에게-하고-싶은-말-optional"><a href="#3-4-건의사항-등-강사에게-하고-싶은-말-optional" class="headerlink" title="3.4. 건의사항 등 강사에게 하고 싶은 말 (optional)"></a>3.4. 건의사항 등 강사에게 하고 싶은 말 (optional)</h2><ul><li>9분 중 6분으로부터 감사한 글들을 받았습니다.</li></ul><ul><li>세미나 형식의 발표는 다수 경험했고 온라인으로 단발적인 강의를 한 적은 있었습니다.</li><li>그러나 대면수업으로 진도를 나가는 경험이 처음이었고, 90분으로 커버가 되기 어려운 내용이라 범위와 형식 선정에 신경을 썼습니다.</li><li>다행히 반응이 호의적이어서 기운이 많이 납니다. </li><li>다시 한번 감사드리며, 다음 기회에는 더 좋은 발표를 할 수 있으면 좋겠습니다..<br><br><img src="75_survey10.png"><br></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/Google-Form/">Google Form</category>
      
      
    </item>
    
    <item>
      <title>데이터 시각화 가이드 - 제발 이렇게 그리지 마세요</title>
      <link>https://jehyunlee.github.io/2021/05/24/Python-DS-74-datavisguide/</link>
      <guid>https://jehyunlee.github.io/2021/05/24/Python-DS-74-datavisguide/</guid>
      <pubDate>Mon, 24 May 2021 11:26:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;제 직장의 AI 학습조직 발표 영상입니다.&lt;ul&gt;
&lt;li&gt;시간관계상 실시간 발표 대신 온라인 영상 공유로 대신합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>제 직장의 AI 학습조직 발표 영상입니다.<ul><li>시간관계상 실시간 발표 대신 온라인 영상 공유로 대신합니다.</li></ul></li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/N_wkuXoRuPw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>더 좋은 그림이 있음에도 안좋은 그림을 그리곤 합니다.<ul><li>몰라서, 생각을 안해봐서, 코딩에 대한 두려움이 원인일 수 있습니다.</li><li><b>강의자료: <a href="210524_datavisguide.pdf">pdf 내려받기</a></b></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib Vis. Function</title>
      <link>https://jehyunlee.github.io/2021/05/18/Python-DS-73-mplfunc/</link>
      <guid>https://jehyunlee.github.io/2021/05/18/Python-DS-73-mplfunc/</guid>
      <pubDate>Tue, 18 May 2021 05:18:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;자주 사용하는 기능은 함수로 만들면 편리합니다.&lt;/li&gt;
&lt;li&gt;마찬가지로 자주 그리는 그림은 함수로 만들면 좋습니다.&lt;/li&gt;
&lt;li&gt;Matplotlib 객체지향을 사용해 함수를 만듭시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-Par</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>자주 사용하는 기능은 함수로 만들면 편리합니다.</li><li>마찬가지로 자주 그리는 그림은 함수로 만들면 좋습니다.</li><li>Matplotlib 객체지향을 사용해 함수를 만듭시다.</li></ul><h1 id="1-Parity-plot"><a href="#1-Parity-plot" class="headerlink" title="1. Parity plot"></a>1. Parity plot</h1><ul><li>머신러닝 후 참값을 x축, 예측값을 y축에 놓고 얼마나 비슷한지 평가하고는 합니다.</li><li>이런 그림을 parity plot이라고 하며, 매우 자주 그리는 그림입니다.</li><li>그림이 목적이므로 데이터는 간단히 만듭니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 샘플 데이터 생성</span></span><br><span class="line">size = <span class="number">1000</span></span><br><span class="line">x = np.random.normal(size=size, loc=<span class="number">12</span>, scale=<span class="number">3</span>)</span><br><span class="line">y = x + np.random.normal(size=size, loc=<span class="number">0</span>, scale=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>그리고, parity plot은 이렇게 그려집니다.</p></li><li><p><b>x가 큰 지점에서는 예측값이 실제값보다 큽니다.</b></p></li><li><p><b>중앙부 기준 중심선에서 5정도 어긋난 듯 합니다.</b><br><br><img src="73_mplfunc_01.png"><br></p></li></ul><ul><li>많이 본 형태라 당연하게 여길 수 있겠지만 <b>그냥</b> 그리면 이렇습니다.</li><li>대충 일치하는 것 같기는 합니다.</li><li>그런데 얼마나 일치하고 얼마나 어긋나는지 잘 모르겠습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y, alpha=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_02.png"><br></li></ul><ul><li><p>x와 y축의 눈금을 일치시키고, grid와 중심선까지 그었기 때문에 보이는 것입니다.</p></li><li><p>코드는 이렇습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># data plot</span></span><br><span class="line">ax.scatter(x, y, c=<span class="string">&quot;g&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y limits</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y ticks, ticklabels</span></span><br><span class="line">ticks = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line">ax.set_xticks(ticks)</span><br><span class="line">ax.set_xticklabels(ticks)</span><br><span class="line">ax.set_yticks(ticks)</span><br><span class="line">ax.set_yticklabels(ticks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># grid</span></span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기준선</span></span><br><span class="line">ax.plot([<span class="number">0</span>, <span class="number">25</span>], [<span class="number">0</span>, <span class="number">25</span>], c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y label</span></span><br><span class="line">font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;true&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;predict&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.set_title(<span class="string">&quot;true vs predict&quot;</span>, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일로 저장</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;73_mplfunc_01.png&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>34줄의 코드를 머신러닝 프로젝트때마다 짤 수는 있겠지만 귀찮습니다.</p></li><li><p>함수로 만들어 자동화합시다.</p></li></ul><h1 id="2-함수-만들기"><a href="#2-함수-만들기" class="headerlink" title="2. 함수 만들기"></a>2. 함수 만들기</h1><ul><li>python에서 함수는 <b><code>def 함수이름(매개변수):</code></b>로 선언함으로써 만들어집니다.</li><li>그리고 함수 내부에 parity plot을 그리는 코드를 넣어주면 작동합니다.</li><li>그렇다면, 함수의 결과물은 무엇으로 하는 게 좋을까요? 매개변수에는 뭘 넣을까요?</li><li><b>간단한 예시를 만들며 고민해 봅시다</b></li></ul><h2 id="2-1-plot-sample"><a href="#2-1-plot-sample" class="headerlink" title="2.1. plot_sample()"></a>2.1. <code>plot_sample()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/tutorials/text/mathtext.html">matplotlib: Writing mathematical expressions</a></p></blockquote><ul><li>x, y 데이터를 입력받아 scatter plot을 그리는 함수입니다.</li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample1</span>(<span class="params">x, y, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    ax.scatter(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>이 함수에 x와 y 데이터를 입력하면 다음과 같은 그림이 출력됩니다.</p></li><li><p>함수 내부에서 fontdict를 사용해 xlabel과 ylabel, title 형태를 미리 설정했기 때문에,<br><b>별다른 옵션을 지정하지 않았는데도 크기와 색상이 반영</b>되어 있습니다.</p></li><li><p>심지어 LaTeX 입력시 폰트도 roman(정확히는 Computer Modern)으로 설정됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_sample = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y_sample = np.sin(x_sample)</span><br><span class="line"></span><br><span class="line">plot_sample1(x_sample, y_sample, <span class="string">&quot;$X$&quot;</span>, <span class="string">&quot;$Y$&quot;</span>, <span class="string">&quot;$Y = \mathrm&#123;sin&#125;(X)$&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_03.png"><br></p></li><li><p>filename=에 적절한 이름을 담아 매개변수로 넣으면 파일 저장까지 자동으로 됩니다.</p></li></ul><ul><li>기본값이 지정되면 사용이 편리합니다.</li><li>xlabel, ylabel, title, filename의 <b>기본값 = None</b>으로 지정했기 때문에, 함수의 인자로 <b>x와 y만 입력해도 결과물이 출력됩니다.</b></li></ul><h2 id="2-2-시각화-유형-변환"><a href="#2-2-시각화-유형-변환" class="headerlink" title="2.2. 시각화 유형 변환"></a>2.2. 시각화 유형 변환</h2><ul><li>scatter plot 말고 다른 것도 그려봅시다.</li><li>경우에 따라 line plot을 그리고싶다면 매개변수에 종류가 있으면 됩니다.</li><li>seaborn과 pandas를 따라 이름은 <b>kind</b>로 지정합니다.</li></ul><ul><li><p>생각을 한번만 더 해봅시다.</p><ul><li>matplotlib에 익숙한 이이라면 <b><code>ax.scatter()</code></b>가 익숙할 것입니다.</li><li>seaborn을 많이 쓰는 사람이라면 <b><code>sns.scatterplot()</code></b>이 친숙할 겁니다.</li><li>kind=로 전달되는 인자에 <b>scatter</b>가 있기만 하면 scatter plot을 그립시다.</li><li><code>if &quot;scatter&quot; in kind:</code>로 구현할 수 있습니다.</li><li>line plot도 비슷하게 구현합니다.</li></ul></li><li><p>이제부터는 코드가 조금 길어집니다. 시각화 함수 코드는 기본적으로 숨겨두겠습니다.</p></li><li><p>여기를 클릭하면 보입니다.</p><details>  <summary><b><code>plot_sample2()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample2</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        ax.scatter(x, y)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        ax.plot(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><b>line plot</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_line.png"><br></p></li><li><p><b>scatter plot</b> (지정)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample, kind=<span class="string">&quot;scatterplot&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_scatter.png"><br></p></li><li><p><b>scatter plot</b> (기본값)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_default.png"><br></p></li></ul><h2 id="2-3-유형에-따른-매개변수-입력"><a href="#2-3-유형에-따른-매개변수-입력" class="headerlink" title="2.3. 유형에 따른 매개변수 입력"></a>2.3. 유형에 따른 매개변수 입력</h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html">matplotlib.axes.Axes.plot</a><br><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html">matplotlib.axes.Axes.scatter</a></p></blockquote><ul><li>Matplotlib의 <code>plot()</code>명령과 <code>scatter()</code>명령은 입력받는 인자가 다릅니다.</li><li>이 인자들을 모두 매개변수로 넣자면 너무 많고 코드 관리가 어렵습니다.</li><li><code>plot()</code>과 <code>scatter()</code>에 필요한 매개변수를 각기 <code>line_kws</code>과 <code>scatter_kws</code>라는 이름의 dictionary 형식으로 입력하게 합시다.</li></ul><ul><li><p>dictionary 형식의 인자는 기본값을 None으로 넣고, 실제 시각화 코드에 **line_kws 형식으로 unpacking하여 입력합니다.</p></li><li><p>keyword arguments로 None이 들어가면 에러가 나기 때문에 간단한 예외처리를 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 선언 부분</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample3</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">                 </span><br><span class="line">    <span class="comment">#... 전략 ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#... 후략 ...#</span></span><br></pre></td></tr></table></figure></li><li><p>keyword parameter를 적용한 코드입니다.</p><details>  <summary><b><code>plot_sample3()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample3</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><b>line_kws 적용</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plot_sample3(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>,</span><br><span class="line">             line_kws=&#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>, <span class="string">&quot;lw&quot;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">             <span class="comment"># &quot;c&quot;: &quot;r&quot;  - line color = &quot;red&quot;</span></span><br><span class="line">             <span class="comment"># &quot;ls&quot;: &quot;:&quot; - line style = ......</span></span><br><span class="line">             <span class="comment"># &quot;lw&quot;: 3   - line width = 3</span></span><br></pre></td></tr></table></figure><img src="73_mplfunc_05_line.png"><br></li></ul><ul><li><b>scatter_kws 적용</b> : line_kws는 무시됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plot_sample3(x_sample, y_sample, kind=<span class="string">&quot;scatter&quot;</span>,</span><br><span class="line">             line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;r&quot;</span>, <span class="string">&quot;ls&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;lw&quot;</span>: <span class="number">3</span>&#125;,</span><br><span class="line">             scatter_kws=&#123;<span class="string">&quot;s&quot;</span>: <span class="number">50</span>, <span class="string">&quot;ec&quot;</span>: <span class="string">&quot;b&quot;</span>, <span class="string">&quot;alpha&quot;</span>: <span class="number">0.2</span>&#125;)</span><br><span class="line">             <span class="comment"># &quot;s&quot;: 50       - marker size = 50</span></span><br><span class="line">             <span class="comment"># &quot;ec&quot;: &quot;b&quot;     - marker color = &quot;blue&quot;</span></span><br><span class="line">             <span class="comment"># &quot;alpha&quot;: 0.2  - marker 불투명도 = 0.2</span></span><br></pre></td></tr></table></figure><img src="73_mplfunc_05_scatter.png"><br></li></ul><ul><li>이제 웬만한 함수는 원하는대로 만들 수 있습니다.</li><li>그런데, <b>한번 만들고 끝일까요?</b></li><li>함수를 실행할 때는 title을 달지 않았는데, 나중에 달고 싶지 않을까요?</li><li>그럴 때 return이 유용합니다.</li></ul><h2 id="2-4-Axes-as-return"><a href="#2-4-Axes-as-return" class="headerlink" title="2.4. Axes as return"></a>2.4. Axes as return</h2><ul><li>matplotlib의 구성요소인 axes를 return 시키면 많은 것이 가능합니다.</li><li>먼저, 기존의 코드에 <b><code>return ax</code></b>만 추가하고 실행해 봅니다.<details>  <summary><b><code>plot_sample4()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample4</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul><ul><li>line plot을 그립니다.</li><li>return된 axes에는 방금 그린 그림의 정보가 모두 포함되어 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax = plot_sample4(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;lw&quot;</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_06.png"><br></li></ul><ul><li>axes에 xlabel, ylabel, title을 추가할 수 있습니다. </li><li>plot 추가도 가능합니다. 코드도 일반적인 시각화와 동일합니다.</li><li>심지어 순차적으로 적용되는 line color도 그냥 그리는 그림과 같습니다. </li><li><b>당연합니다. 객체지향 방식이니까요 :)</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xlabel, ylabel, title 추가</span></span><br><span class="line">ax.set_xlabel(<span class="string">&quot;xlabel (postprocess)&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;ylabel (postprocess)&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;title (postprocess)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot 추가</span></span><br><span class="line">ax.plot(x_sample+<span class="number">1</span>, y_sample)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jupyter cell에서 시각화</span></span><br><span class="line">display(ax.figure)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_07.png"><br></li></ul><p><b>※ 주의 ※</b></p><ul><li>그러나 자세히 보면 x, y label에는 설정된 값들이 제대로 적용되지만 <b>title에는 색상만 적용됩니다.</b></li><li>title=None일 때 matplotlib axes가 담는 정보가 불충분한 것으로 생각됩니다.</li></ul><h2 id="2-5-Axes-as-input"><a href="#2-5-Axes-as-input" class="headerlink" title="2.5. Axes as input"></a>2.5. Axes as input</h2><ul><li>axes는 함수의 입력 매개변수로 작용할 때 그 진가를 발합니다.<ul><li><b>함수</b>는 <b>복잡한 명령을 한번에 실행</b>한다는 장점이 있지만 <b>유연성이 부족</b>합니다.</li><li><b>날코딩</b>은 <b>유연성이 풍족</b>하지만 <b>일일이 코딩하기 번잡합니다.</b></li><li>이 둘을 섞을 수 있는 방법이 <b>axes를 input으로 받는 것</b>입니다.</li></ul></li></ul><ul><li><p>머신러닝 예측결과 시각화로 예를 들어보겠습니다.</p><ul><li>parity plot은 실제값과 예측값을 비교하는 그림입니다.</li><li>trainset, validation set, testset <b>세 데이터</b> 모두에 대해 그릴 수 있습니다.</li><li>이 중 <b>하나만 그릴 때도 있고 둘만, 셋 다 그릴 때</b>가 있습니다.</li><li>이 때마다 함수를 일일이 만든다면 몹시 번거로울 것입니다.</li></ul></li><li><p>이럴 때 이런 해법을 만들 수 있습니다.   </p><ol><li><b><code>plt.subplots()</code>등으로 필요한 수만큼 Axes을 만듭니다.</b></li><li><b>준비된 함수로 각각의 Axes에 parity plot을 그립니다</b></li></ol></li></ul><ul><li>그러자면, 함수로 그려질 그림이 어디에 그려질지 지정되어야 합니다.</li><li><b>매개변수로 axes를 받으면 가능합니다.</b></li><li>axes가 지정되지 않으면 스스로 figure를 만들도록 합니다. 이 때 figure size도 인자로 넣읍시다.</li><li>파일로 저장하려면 figure 객체가 필요합니다. figure 객체는 axes 입력이 없을 때만 존재하니 예외처리를 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample5</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 figsize=plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>], ax=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#... 전략 ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#... 후략 ...#</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><details>  <summary><b><code>plot_sample5()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample5</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 figsize=plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>], ax=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul><ul><li><b>그냥 그리기</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample5(x_sample, y_sample)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_08.png"></li></ul><ul><li><b>subplots 안에 넣기</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">font_title = &#123;<span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 왼쪽 axes</span></span><br><span class="line">plot_sample5(x_sample, y_sample, ax=axs[<span class="number">0</span>])</span><br><span class="line">plot_sample5(<span class="number">10</span>-x_sample, y_sample, ax=axs[<span class="number">0</span>])</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&quot;plot 1&quot;</span>, fontdict=font_title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 오른쪽 axes</span></span><br><span class="line">plot_sample5(x_sample, -y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;r&quot;</span>&#125;, ax=axs[<span class="number">1</span>])</span><br><span class="line">plot_sample5(x_sample, <span class="number">1</span>-y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;g&quot;</span>&#125;, ax=axs[<span class="number">1</span>])</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&quot;plot 1&quot;</span>, fontdict=font_title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그림 저장</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;73_mplfunc_09.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_09.png"></li></ul><ul><li>새로 그린 그림이 <code>plt.subplots()</code>로 만든 axes에 정확히 담겼습니다.</li><li>그 뿐 아니라 sharey=True 와 같은 <b>axes간 제약조건도 적용</b>됩니다. </li></ul><ul><li><b>함수의 문법이 어디선가 본 것 같다</b>고 생각하셨으면 맞게 본 것입니다.</li><li>seaborn의 함수들이 바로 이렇게 만들어졌고 작동합니다.</li></ul><h1 id="3-parity-plot"><a href="#3-parity-plot" class="headerlink" title="3. parity plot"></a>3. parity plot</h1><ul><li>다시 parity plot으로 돌아갑니다.</li><li>아래는 <b>제가 만든 함수로 그린 parity plot들</b>입니다.</li><li>다양한 경우에 활용할 수 있음을 알 수 있습니다.<br><br><img src="73_mplfunc_10.png" alt="case I"><br></li></ul><p><img src="73_mplfunc_11.png" alt="case II"><br></p><ul><li>코드입니다. 세 가지 지표를 평가하여 그림에 함께 담습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.colors <span class="keyword">as</span> colors</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metrics</span>(<span class="params">true, predict</span>):</span></span><br><span class="line">    mae = mean_absolute_error(true, predict)</span><br><span class="line">    rmse = mean_squared_error(true, predict, squared=<span class="literal">False</span>)</span><br><span class="line">    r2 = r2_score(true, predict)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mae, rmse, r2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">true, pred, kind=<span class="string">&quot;scatter&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                xlabel=<span class="string">&quot;true&quot;</span>, ylabel=<span class="string">&quot;predict&quot;</span>, title=<span class="string">&quot;true vs predict&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                hist2d_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, kde_kws=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                equal=<span class="literal">True</span>, metrics=<span class="literal">True</span>, metrics_position=<span class="string">&quot;lower right&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                figsize=(<span class="params"><span class="number">4</span>, <span class="number">4</span></span>), ax=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data range</span></span><br><span class="line">    val_min = <span class="built_in">min</span>(true.<span class="built_in">min</span>(), pred.<span class="built_in">min</span>())</span><br><span class="line">    val_max = <span class="built_in">max</span>(true.<span class="built_in">max</span>(), pred.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;alpha&#x27;</span>:<span class="number">0.5</span>&#125;</span><br><span class="line">        ax.scatter(true, pred, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;hist2d&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hist2d_kws:</span><br><span class="line">            hist2d_kws=&#123;<span class="string">&#x27;cmap&#x27;</span>:<span class="string">&#x27;Greens&#x27;</span>, <span class="string">&#x27;vmin&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">        ax.hist2d(true, pred, **hist2d_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;kde&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kde_kws:</span><br><span class="line">            kde_kws=&#123;<span class="string">&#x27;cmap&#x27;</span>:<span class="string">&#x27;viridis&#x27;</span>, <span class="string">&#x27;levels&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">        sns.kdeplot(x=true, y=pred, **kde_kws, ax=ax)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y bounds</span></span><br><span class="line">    xbounds = ax.get_xbound()</span><br><span class="line">    ybounds = ax.get_ybound()</span><br><span class="line">    max_bounds = [<span class="built_in">min</span>(xbounds[<span class="number">0</span>], ybounds[<span class="number">0</span>]), <span class="built_in">max</span>(xbounds[<span class="number">1</span>], ybounds[<span class="number">1</span>])]</span><br><span class="line">    ax.set_xlim(max_bounds)</span><br><span class="line">    ax.set_ylim(max_bounds)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y ticks, ticklabels</span></span><br><span class="line">    ticks = [<span class="built_in">int</span>(y) <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() <span class="keyword">if</span> (<span class="number">10</span>*y)%<span class="number">10</span> == <span class="number">0</span>]</span><br><span class="line">    ax.set_xticks(ticks)</span><br><span class="line">    ax.set_xticklabels(ticks)</span><br><span class="line">    ax.set_yticks(ticks)</span><br><span class="line">    ax.set_yticklabels(ticks)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># grid</span></span><br><span class="line">    ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 기준선</span></span><br><span class="line">    ax.plot(max_bounds, max_bounds, c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y label</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics</span></span><br><span class="line">    <span class="keyword">if</span> metrics:</span><br><span class="line">        rmse = mean_squared_error(true, pred, squared=<span class="literal">False</span>)</span><br><span class="line">        mae = mean_absolute_error(true, pred)</span><br><span class="line">        r2 = r2_score(true, pred)</span><br><span class="line"></span><br><span class="line">        font_metrics = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>:<span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> metrics_position == <span class="string">&quot;lower right&quot;</span>:</span><br><span class="line">            text_pos_x = <span class="number">0.98</span></span><br><span class="line">            text_pos_y = <span class="number">0.3</span></span><br><span class="line">            ha = <span class="string">&quot;right&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> metrics_position == <span class="string">&quot;upper left&quot;</span>:</span><br><span class="line">            text_pos_x = <span class="number">0.1</span></span><br><span class="line">            text_pos_y = <span class="number">0.9</span></span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text_pos_x, text_pos_y = text_position</span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line"></span><br><span class="line">        ax.text(text_pos_x, text_pos_y, <span class="string">f&quot;RMSE = <span class="subst">&#123;rmse:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line">        ax.text(text_pos_x, text_pos_y-<span class="number">0.1</span>, <span class="string">f&quot;MAE = <span class="subst">&#123;mae:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line">        ax.text(text_pos_x, text_pos_y-<span class="number">0.2</span>, <span class="string">f&quot;R2 = <span class="subst">&#123;r2:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 파일로 저장</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Python을 이용한 연구데이터 시각화 Part 3</title>
      <link>https://jehyunlee.github.io/2021/05/04/Python-DS-72-pythonvis3/</link>
      <guid>https://jehyunlee.github.io/2021/05/04/Python-DS-72-pythonvis3/</guid>
      <pubDate>Tue, 04 May 2021 01:55:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;공대 대학원생을 위한 &lt;b&gt;충북대학교 연구방법론 수업&lt;/b&gt;에서 발표한 내용입니다.&lt;br&gt;일부를 나누어 세 번째 영상을 올립니다. (Part 1: &lt;a href=&quot;https://jehyunlee.github.io/2021/04/30/P</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>공대 대학원생을 위한 <b>충북대학교 연구방법론 수업</b>에서 발표한 내용입니다.<br>일부를 나누어 세 번째 영상을 올립니다. (Part 1: <a href="https://jehyunlee.github.io/2021/04/30/Python-DS-70-pythonvis1/">바로가기</a>, Part 2: <a href="https://jehyunlee.github.io/2021/05/03/Python-DS-71-pythonvis2/">바로가기</a>)</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/GqiiJ3yYapw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>논문이나 보고에 사용될 그림은 데이터만 덜렁 그리지 않습니다.<ul><li>시각화 구성요소 설정 방법을 배워봅니다.</li><li><b>강의자료: <a href="210427.pptx">ppt 내려받기</a></b></li><li><b>실습 코드: <a href="https://bit.ly/3ezUoZJ">https://bit.ly/3ezUoZJ</a></b></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Python을 이용한 연구데이터 시각화 Part 2</title>
      <link>https://jehyunlee.github.io/2021/05/03/Python-DS-71-pythonvis2/</link>
      <guid>https://jehyunlee.github.io/2021/05/03/Python-DS-71-pythonvis2/</guid>
      <pubDate>Mon, 03 May 2021 09:48:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;공대 대학원생을 위한 &lt;b&gt;충북대학교 연구방법론 수업&lt;/b&gt;에서 발표한 내용입니다.&lt;br&gt;일부를 나누어 두 번째 영상을 올립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>공대 대학원생을 위한 <b>충북대학교 연구방법론 수업</b>에서 발표한 내용입니다.<br>일부를 나누어 두 번째 영상을 올립니다.</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/Wk-QtkKnpk8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li><p>Google Colab에서 matplotlib으로 그림을 그립니다.</p><ul><li><b>실습 코드: <a href="https://bit.ly/3ezUoZJ">https://bit.ly/3ezUoZJ</a></b></li><li>기본 3.2.2 버전을 3.4.1로 올려서 사용합니다.</li><li>한글 출력도 가능하도록 합니다.</li></ul></li><li><p>Matplotlib의 두 표준어, <b>상태기반</b>과 <b>객체지향</b>을 알아봅니다.</p><ul><li><b>객체지향</b>으로 시작하시는 게 좋습니다.</li><li>공대 대학원생이라면 더더욱 그렇습니다.</li><li>처음 시작하시는 분이라면 <b><code>fig, ax = plt.subplots()</code></b>만 외우셔도 좋습니다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Python을 이용한 연구데이터 시각화 Part 1</title>
      <link>https://jehyunlee.github.io/2021/04/30/Python-DS-70-pythonvis1/</link>
      <guid>https://jehyunlee.github.io/2021/04/30/Python-DS-70-pythonvis1/</guid>
      <pubDate>Fri, 30 Apr 2021 00:01:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;공대 대학원생을 위한 &lt;b&gt;충북대학교 연구방법론 수업&lt;/b&gt;에서 발표한 내용입니다.&lt;br&gt;일부를 나누어 첫 번째 영상을 올립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>공대 대학원생을 위한 <b>충북대학교 연구방법론 수업</b>에서 발표한 내용입니다.<br>일부를 나누어 첫 번째 영상을 올립니다.</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/dqp2v1PFS8c" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>공대를 다니면 많은 숫자를 만납니다. 이 숫자는 잘 보이지 않습니다.</li><li>숫자의 패턴과 의미를 파악하는 방법이 <b>데이터 시각화</b>입니다.</li><li>코드로 하는 시각화는 GUI대비 장점이 많습니다. <b>python</b>으로 시작해봅시다.</li><li>이번 영상에서는 matplotlib과 seaborn을 소개합니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Gibbs Sampling in N-Dimension</title>
      <link>https://jehyunlee.github.io/2021/04/20/Python-DS-69-gibbsampling/</link>
      <guid>https://jehyunlee.github.io/2021/04/20/Python-DS-69-gibbsampling/</guid>
      <pubDate>Tue, 20 Apr 2021 03:18:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;부족한 데이터는 기존 분포를 반영해 만들 수 있습니다.&lt;/li&gt;
&lt;li&gt;마르코프 체인 몬테카를로(MCMC) 방법의 일종인 깁스 샘플링(Gibbs Sampling)을 사용합시다.&lt;/li&gt;
&lt;li&gt;matplotlib 3.4. 버전에서 추가</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>부족한 데이터는 기존 분포를 반영해 만들 수 있습니다.</li><li>마르코프 체인 몬테카를로(MCMC) 방법의 일종인 깁스 샘플링(Gibbs Sampling)을 사용합시다.</li><li>matplotlib 3.4. 버전에서 추가된 <code>subfigure</code>와 <code>subplot_mosaic</code> 기능도 실습해보고,</li><li>matplotlib을 이용해 3D plot 애니메이션도 만들어 봅니다.</li></ul><p><b>contributor</b></p><blockquote><p><a href="https://github.com/jryoungw">장령우님: 조건부확률 implementation 관련 조언 제공</a><br><a href="https://github.com/SuminBae97">배수민님: Gibbs Sampling module 공동 개발</a><br><a href="https://github.com/subinium">안수빈님: 원본과 Gibbs Sampling 구분 시각화 아이디어 제공</a></p></blockquote><h1 id="1-Gibbs-Sampling"><a href="#1-Gibbs-Sampling" class="headerlink" title="1. Gibbs Sampling"></a>1. Gibbs Sampling</h1><blockquote><p><a href="https://ratsgo.github.io/statistics/2017/05/31/gibbs/">ratsgo’s blog: Gibbs Sampling</a><br><a href="https://towardsdatascience.com/can-you-do-better-sampling-strategies-with-an-emphasis-on-gibbs-sampling-practicals-and-code-c97730d54ebc">Sampling distributions with an emphasis on Gibbs sampling, practicals and code</a><br><a href="https://towardsdatascience.com/gibbs-sampling-8e4844560ae5">Gibbs Sampling</a></p></blockquote><ul><li>Gibbs Sampling은 <b>기존 데이터의 분포를 재현</b>하는 마르코프 체인 몬테카를로(MCMC: Markov-Chain Monte Carlo)방식의 일환입니다.</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/MultivariateNormal.png/793px-MultivariateNormal.png" alt="wikipedia: multivariate normal distribution"><br></p><ul><li>위 그림처럼 $$p(X, Y)$$로 표현되는 다변수함수를 모사한다고 합시다.</li><li>$$X$$와 $$Y$$의 상관관계는 조건부 확률 $$p(X|Y)$$과 $$p(Y|X)$$로부터 구할 수 있습니다.<ol><li>시작점 $$(X_0, Y_0)$$을 지정하고, <br></li><li>$$p(X|Y_0)$$로부터 다음 데이터의 $$X$$인 $$X_1$$을 랜덤으로 추출,<br></li><li>$$p(Y|X_1)$$로부터 다음 데이터의 $$Y$$인 $$Y_1$$을 랜덤으로 추출합니다.<br></li><li>이렇게 구한 $$(X_1, Y_1)$$로부터 같은 방법으로 $$(X_2, Y_2)$$를 구한 뒤<br></li><li>이 작업을 n번 반복해서 $$(X_n, Y_n)$$을 구합니다.<br></li></ol></li></ul><ul><li>이 작업을 영상으로 표현하면 다음과 같습니다.<br><img src="http://i.imgur.com/91TeFpu.gif"></li></ul><ul><li>N차원 데이터라면 $$(X_{0,N}, X_{1,N}, X_{2,N}, \ldots , X_{n,N})$$에 대해 적용합니다.</li></ul><ul><li>조건부 확률을 구하기 위해서 확률분포가 <b>수식</b>으로 주어지거나 <b>공분산</b>을 알 수 있으면 좋습니다.</li><li>하지만 많은 경우 공간상에 흩뿌려져있기 때문에, 이를 해결하고자 맡바닥부터 코딩을 해봤습니다.</li><li><a href="gibbs_sampling.py">소스코드는 여기에서</a> 받을 수 있습니다.</li><li>하지만 아직 <b>충분히 테스트가 이루어지지 않았기 때문에 다운로드를 권하지는 않습니다.</b></li><li>정리되면 pypi를 통해 공개하고자 합니다.</li></ul><h1 id="2-Discrete-Data"><a href="#2-Discrete-Data" class="headerlink" title="2. Discrete Data"></a>2. Discrete Data</h1><blockquote><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.histogramdd.html">numpy.histogramdd</a><br><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.imshow.html">matplotlib.axes.Axes.imshow</a></p></blockquote><ul><li><p>매개변수 t를 이용해서 불균일한 예제 데이터를 만듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line"><span class="comment"># normal distribution - scatter plot</span></span><br><span class="line">t = np.power(np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x = t + np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line">y = <span class="number">10</span>*np.sin(t/<span class="number">30</span>) + np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pearson coefficient</span></span><br><span class="line">pcc, pv = pearsonr(x,y)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">ax.scatter(x, y, c=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">ax.text(<span class="number">0.6</span>, <span class="number">0.3</span>, <span class="string">f&quot;pcc = <span class="subst">&#123;pcc:<span class="number">0.3</span>f&#125;</span>\np-value = <span class="subst">&#123;pv:<span class="number">0.3</span>f&#125;</span>&quot;</span>, transform=ax.transAxes, </span><br><span class="line">        fontsize=<span class="number">14</span>, va=<span class="string">&quot;top&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_1.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_1.png"><br></p></li><li><p>데이터가 왼쪽에 몰려있지만 scatter plot으로는 잘 보이지 않습니다.</p></li><li><p>matplotlib의<code>hist2d()</code>명령으로 2D histogram을 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">ax.hist2d(x, y, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_2.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_2.png"><br></p></li><li><p>그림 뿐 아니라 히스토그램의 구간과 데이터 수를 구하고 싶다면 이렇게 할 수도 있습니다.</p></li><li><p><code>numpy.histogramdd()</code>를 사용해 데이터를 분할하고 이미지를 출력하는 <code>imshow()</code>로 그림을 그립니다.</p></li><li><p>x와 y 범위를 index가 아닌 데이터 값으로 표현하기 위해 extent 매개변수를 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xy_H, xy_edges = np.histogramdd((x, y), bins=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">ax.imshow(xy_H.T, cmap=<span class="string">&quot;Greys&quot;</span>,</span><br><span class="line">          extent=[xy_edges[<span class="number">0</span>][<span class="number">0</span>], xy_edges[<span class="number">0</span>][-<span class="number">1</span>], xy_edges[<span class="number">1</span>][-<span class="number">1</span>], xy_edges[<span class="number">1</span>][<span class="number">0</span>]])</span><br><span class="line">ax.invert_yaxis()</span><br><span class="line">ax.set_aspect(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_3.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_3.png"><br></p></li></ul><h1 id="3-matplotlib-Subplot-Mosaic"><a href="#3-matplotlib-Subplot-Mosaic" class="headerlink" title="3. matplotlib: Subplot Mosaic"></a>3. matplotlib: Subplot Mosaic</h1><blockquote><p><a href="https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subfigures.html">matplotlib tutorials: Complex and semantic figure composition</a><br><a href="https://matplotlib.org/stable/users/whats_new.html?highlight=subfigure#new-subfigure-functionality">matplotlib: what’s new in Matplotlib 3.4.0</a><br><a href="https://jehyunlee.github.io/2020/10/03/Python-DS-35-seaborn_matplotlib2/">Pega Devlog: Seaborn with Matplotlib (2)</a></p></blockquote><ul><li>특정 지점에서의 $$P(X|Y_0)$$와 $$P(Y|X_0)$$를 도시합니다.</li><li>seabron의 jointplot과 유사한 그림을 matplotlib으로 그려보겠습니다.</li></ul><ul><li><p><a href="https://jehyunlee.github.io/2020/10/03/Python-DS-35-seaborn_matplotlib2/">기존 기능만 사용해도 그릴 수 있지만</a> matplotlib 3.4 버전에 새로 도입된 <code>subplot_mosaic()</code>를 사용합니다.</p></li><li><p><code>subplot_mosaic()</code>는 기존 방법과 달리 axes가 dictionary 형식으로 관리되기 때문에 <b>이름</b>으로 부를 수 있습니다.</p></li><li><p>단순 나열 데이터가 아닌, 위치별로 기능이 다를때 유용합니다.</p></li><li><p><b>2차원 리스트</b>로 모양을 잡아주고, <b>empty_sentinel 매개변수</b>로 비울 영역을 지정합니다. </p></li><li><p>원래 있던 기능인 <b>gridspec_kw</b>를 사용하면 크기 비율을 지정할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">axd = fig.subplot_mosaic(</span><br><span class="line">    [[<span class="string">&quot;dist_x&quot;</span>, <span class="string">&quot;BLANK&quot;</span>], </span><br><span class="line">     [<span class="string">&quot;hist2d&quot;</span>, <span class="string">&quot;dist_y&quot;</span>]], </span><br><span class="line">    empty_sentinel=<span class="string">&quot;BLANK&quot;</span>,</span><br><span class="line">    gridspec_kw=&#123;<span class="string">&quot;height_ratios&quot;</span>: [<span class="number">1</span>, <span class="number">5</span>], <span class="string">&quot;width_ratios&quot;</span>: [<span class="number">5</span>, <span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_4.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_4.png"><br></p></li><li><p>히스토그램으로 데이터 밀도가 가장 높은 지점을 찾습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index</span></span><br><span class="line">argmax_x, argmax_y  = np.unravel_index(np.argmax(xy_H, axis=<span class="literal">None</span>), xy_H.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;index of maxmum count: (<span class="subst">&#123;argmax_x&#125;</span>, <span class="subst">&#123;argmax_y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># coordinate</span></span><br><span class="line">bin_delta_xhalf = (xy_edges[<span class="number">0</span>][<span class="number">1</span>] - xy_edges[<span class="number">0</span>][<span class="number">0</span>])/<span class="number">2</span></span><br><span class="line">bin_delta_yhalf = (xy_edges[<span class="number">1</span>][<span class="number">1</span>] - xy_edges[<span class="number">1</span>][<span class="number">0</span>])/<span class="number">2</span></span><br><span class="line">x_coord = xy_edges[<span class="number">0</span>][argmax_x] + bin_delta_xhalf</span><br><span class="line">y_coord = xy_edges[<span class="number">1</span>][argmax_y] + bin_delta_yhalf</span><br></pre></td></tr></table></figure><ul><li>실행 결과: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index of maxmum count: (0, 4)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>“hist2d”에 2D 히스토그램을 그리고 데이터 밀도가 가장 높은 지점에 가로세로 선을 긋습니다.</p></li><li><p>“dist_x”, “dist_y”에 각기 $$P(X|Y_0)$$와 $$P(Y|X_0)$$를 히스토그램으로 표현합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">5</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">axd = fig.subplot_mosaic(</span><br><span class="line">    [[<span class="string">&quot;dist_x&quot;</span>, <span class="string">&quot;BLANK&quot;</span>], [<span class="string">&quot;hist2d&quot;</span>, <span class="string">&quot;dist_y&quot;</span>]],</span><br><span class="line">    empty_sentinel=<span class="string">&quot;BLANK&quot;</span>,</span><br><span class="line">    gridspec_kw=&#123;<span class="string">&quot;height_ratios&quot;</span>: [<span class="number">1</span>, <span class="number">5</span>], <span class="string">&quot;width_ratios&quot;</span>: [<span class="number">5</span>, <span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hist2d</span></span><br><span class="line">y_pos = y_coord</span><br><span class="line">axd[<span class="string">&quot;hist2d&quot;</span>].hist2d(x, y, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)</span><br><span class="line">axd[<span class="string">&quot;hist2d&quot;</span>].axhline(y_coord, c=<span class="string">&quot;r&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">axd[<span class="string">&quot;hist2d&quot;</span>].axvline(x_coord, c=<span class="string">&quot;b&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">axd[<span class="string">&quot;hist2d&quot;</span>].scatter(x_coord, y_coord, c=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, s=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># kdeplot (dist_x)</span></span><br><span class="line">sns.histplot(x[np.where((y &lt; y_coord+bin_delta_yhalf) &amp; (y &gt; y_coord-bin_delta_yhalf))], </span><br><span class="line">             color=<span class="string">&quot;r&quot;</span>, fill=<span class="literal">True</span>, bins=xy_edges[<span class="number">0</span>], ax=axd[<span class="string">&quot;dist_x&quot;</span>])</span><br><span class="line">axd[<span class="string">&quot;dist_x&quot;</span>].spines[[<span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">axd[<span class="string">&quot;dist_x&quot;</span>].set_xlim(axd[<span class="string">&quot;hist2d&quot;</span>].get_xlim())</span><br><span class="line">axd[<span class="string">&quot;dist_x&quot;</span>].set_xticklabels([])</span><br><span class="line">axd[<span class="string">&quot;dist_x&quot;</span>].set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># kdeplot (dist_y)</span></span><br><span class="line">sns.histplot(y=y[np.where((x &lt; x_coord+bin_delta_xhalf) &amp; (x &gt; x_coord-bin_delta_xhalf))], </span><br><span class="line">             color=<span class="string">&quot;b&quot;</span>, fill=<span class="literal">True</span>, bins=xy_edges[<span class="number">1</span>], ax=axd[<span class="string">&quot;dist_y&quot;</span>])</span><br><span class="line">axd[<span class="string">&quot;dist_y&quot;</span>].spines[[<span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">axd[<span class="string">&quot;dist_y&quot;</span>].set_ylim(axd[<span class="string">&quot;hist2d&quot;</span>].get_ylim())</span><br><span class="line">axd[<span class="string">&quot;dist_y&quot;</span>].set_yticklabels([])</span><br><span class="line">axd[<span class="string">&quot;dist_y&quot;</span>].set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_5.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_5.png"><br></p></li><li><p>이번에 만든 코드에서는 이 지점을 시작으로 Gibbs Sampling을 수행합니다.</p></li><li><p>조건부 확률은 N-Dimensional 히스토그램으로부터 계산합니다.</p></li><li><p>Gibbs Sampling 수행 과정은 이 글에서는 생략하겠습니다.</p></li></ul><h1 id="4-Gibbs-Sampling-for-2-Dimensional-Data"><a href="#4-Gibbs-Sampling-for-2-Dimensional-Data" class="headerlink" title="4. Gibbs Sampling for 2-Dimensional Data"></a>4. Gibbs Sampling for 2-Dimensional Data</h1><ul><li>모듈을 import하고 기본 데이터를 넣습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gibbs_sampling <span class="keyword">import</span> GibbsSampling</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas DataFrame 형식으로 입력받습니다.</span></span><br><span class="line">df_xy = pd.DataFrame(&#123;<span class="string">&quot;x&quot;</span>:x, <span class="string">&quot;y&quot;</span>:y&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터가 분포한 모든 차원을 20개의 구간으로 나누고,</span></span><br><span class="line"><span class="comment"># 1만개의 데이터를 생성하겠다고 선언합니다.</span></span><br><span class="line">gibbs = GibbsSampling(<span class="number">10000</span>, df_xy, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 생성합니다.</span></span><br><span class="line">gibbs_xy = gibbs.sampling()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;# type: <span class="subst">&#123;<span class="built_in">type</span>(gibbs_xy)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;# shape: <span class="subst">&#123;gibbs_xy.shape&#125;</span>&quot;</span>)</span><br><span class="line">gibbs_x = gibbs_xy[<span class="number">0</span>]</span><br><span class="line">gibbs_y = gibbs_xy[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>실행 결과: (2, 10000)의 <code>numpy.ndarray</code>가 생성됩니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># type: &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="comment"># shape: (2, 10000)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="5-matplotlib-subfigure"><a href="#5-matplotlib-subfigure" class="headerlink" title="5. matplotlib: subfigure"></a>5. matplotlib: subfigure</h1><blockquote><p><a href="https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subfigures.html">matplotlib: Figure subfigures</a></p></blockquote><ul><li>matplotlib 버전 3.4에서는 figure 속의 figure, subfigure를 지원합니다.</li><li>figure와 axes로 나뉘어 있던 구획에서 figure와 axes 사이에 위치하는 단계입니다.</li><li>axes를 원하는 대로 배치하기 좋고, 특정 구역에만 배경색을 깔기도 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### figure 생성</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1행 2열 subfigures 생성      </span></span><br><span class="line">sfigs = fig.subfigures(<span class="number">1</span>, <span class="number">2</span>, width_ratios=[<span class="number">2</span>, <span class="number">1</span>], wspace=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># left subfigure: 원본과 gibbs sampled data의 2D histogram</span></span><br><span class="line">sfigs[<span class="number">0</span>].suptitle(<span class="string">&quot;2D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># left subfigure 소속 axes</span></span><br><span class="line">axsL = sfigs[<span class="number">0</span>].subplots(ncols=<span class="number">2</span>, nrows=<span class="number">1</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">axsL[<span class="number">0</span>].hist2d(x, y, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)               <span class="comment"># original</span></span><br><span class="line">axsL[<span class="number">1</span>].hist2d(gibbs_x, gibbs_y, cmap=<span class="string">&quot;Greens&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled</span></span><br><span class="line"></span><br><span class="line">font_title = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>&#125;</span><br><span class="line">axsL[<span class="number">0</span>].set_title(<span class="string">&quot;original&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">1</span>].set_title(<span class="string">&quot;gibbs sampled&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gibbs Sampled 그림 spines 색상 변경</span></span><br><span class="line">axsL[<span class="number">1</span>].spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>]].set_color(<span class="string">&quot;#00DD00&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># right subfigure: 전체 데이터의 x, y방향 분포</span></span><br><span class="line">sfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;1D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">sfigs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;beige&quot;</span>)  <span class="comment"># 오른쪽 subfigure에만 배경색 적용</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right subfigure 소속 axes</span></span><br><span class="line">axsR = sfigs[<span class="number">1</span>].subplots(ncols=<span class="number">1</span>, nrows=<span class="number">2</span>, squeeze=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">1</span>].set_title(<span class="string">&quot;x-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(x, color=<span class="string">&quot;gray&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;original&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_x, color=<span class="string">&quot;#00DD00&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;gibbs sampled&quot;</span>)</span><br><span class="line">axsR[<span class="number">1</span>].legend(fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">0</span>].set_title(<span class="string">&quot;y-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(y, color=<span class="string">&quot;gray&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(gibbs_y, color=<span class="string">&quot;green&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_6.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="69_gs_6.png"><br></li></ul><ul><li><p>한번 저장된 원본 데이터의 정보를 이용해 반복 생성이 가능합니다.</p></li><li><p>생성 데이터 수에 따른 분포를 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sfigs = fig.subfigures(<span class="number">1</span>, <span class="number">2</span>, width_ratios=[<span class="number">2</span>, <span class="number">1</span>], wspace=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2D histogram</span></span><br><span class="line">sfigs[<span class="number">0</span>].suptitle(<span class="string">&quot;2D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">axesL = sfigs[<span class="number">0</span>].subplots(ncols=<span class="number">2</span>, nrows=<span class="number">2</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">axsL = axesL.ravel()</span><br><span class="line">axsL[<span class="number">0</span>].hist2d(x, y, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)               <span class="comment"># original</span></span><br><span class="line">axsL[<span class="number">1</span>].hist2d(gibbs_x1, gibbs_y1, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled1</span></span><br><span class="line">axsL[<span class="number">2</span>].hist2d(gibbs_x2, gibbs_y2, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled2</span></span><br><span class="line">axsL[<span class="number">3</span>].hist2d(gibbs_x3, gibbs_y3, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled3</span></span><br><span class="line"></span><br><span class="line">font_title = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>&#125;</span><br><span class="line">axsL[<span class="number">0</span>].set_title(<span class="string">&quot;original&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">1</span>].set_title(<span class="string">&quot;gibbs sampled (100)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">2</span>].set_title(<span class="string">&quot;gibbs sampled (1000)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">3</span>].set_title(<span class="string">&quot;gibbs sampled (10000)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, scolor <span class="keyword">in</span> <span class="built_in">zip</span>(axsL, [<span class="string">&quot;k&quot;</span>, <span class="string">&quot;#D00&quot;</span>, <span class="string">&quot;#0D0&quot;</span>, <span class="string">&quot;#00D&quot;</span>]):</span><br><span class="line">    ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>]].set_color(scolor)</span><br><span class="line">    ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>]].set_linewidth(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1D histogram</span></span><br><span class="line">sfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;1D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">sfigs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;beige&quot;</span>)</span><br><span class="line">axsR = sfigs[<span class="number">1</span>].subplots(ncols=<span class="number">1</span>, nrows=<span class="number">2</span>, squeeze=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">1</span>].set_title(<span class="string">&quot;x-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(x, color=<span class="string">&quot;k&quot;</span>, linewidth=<span class="number">3</span>, fill=<span class="literal">False</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], zorder=<span class="number">2</span>, label=<span class="string">&quot;original&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_x1, color=<span class="string">&quot;red&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (100)&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_x2, color=<span class="string">&quot;green&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (1000)&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_x3, color=<span class="string">&quot;blue&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (10000)&quot;</span>)</span><br><span class="line">axsR[<span class="number">1</span>].legend(fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">0</span>].set_title(<span class="string">&quot;y-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(y, color=<span class="string">&quot;k&quot;</span>, linewidth=<span class="number">3</span>, fill=<span class="literal">False</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>], zorder=<span class="number">2</span>)</span><br><span class="line">sns.kdeplot(gibbs_y1, color=<span class="string">&quot;red&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(gibbs_y2, color=<span class="string">&quot;green&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(gibbs_y3, color=<span class="string">&quot;blue&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_7.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_7.png"><br></p></li><li><p>원본 데이터는 1000개로 구성되어 있습니다.</p></li><li><p>한참 못미치는 100개는 원본 데이터의 분포와 많이 어긋나는 것을 알 수 있습니다.</p></li><li><p>1000개와 10000개를 생성하면 원본 데이터와 상당히 유사한 분포를 재현할 수 있습니다.</p></li><li><p>하지만 데이터가 많다고 항상 원본에 더 근접한 것은 아니지만 신뢰할만한 수준의 분포를 얻을 수 있었습니다.</p></li></ul><h1 id="6-Gibbs-Sampling의-한계-분리된-데이터"><a href="#6-Gibbs-Sampling의-한계-분리된-데이터" class="headerlink" title="6. Gibbs Sampling의 한계: 분리된 데이터"></a>6. Gibbs Sampling의 한계: 분리된 데이터</h1><ul><li><p>Gibbs Sampling은 조건부 확률을 사용해 데이터를 생성합니다.</p></li><li><p>따라서 데이터가 섬처럼 끊겨 있는 경우에는 그 지점을 생성할 수 없습니다.</p></li><li><p>제 코드에서는 이 점을 보완하기 위해 <b>생성할 데이터의 수를 kfold로 나누어</b> 일부를 생성한 뒤,<br><b>앞으로 생성해야 할 데이터 기준</b>으로 <b>조건부 확률과 시작점을 업데이트</b>하도록 했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 분리 데이터 생성</span></span><br><span class="line">sx1 = np.random.normal(loc=<span class="number">0</span>, size=<span class="number">1000</span>)</span><br><span class="line">sy1 = np.random.normal(loc=<span class="number">0</span>, size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">sx2 = np.random.normal(loc=<span class="number">10</span>, size=<span class="number">1000</span>)</span><br><span class="line">sy2 = np.random.normal(loc=<span class="number">10</span>, size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 결합</span></span><br><span class="line">sx = np.concatenate([sx1, sx2])</span><br><span class="line">sy = np.concatenate([sy1, sy2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># scatter plot 시각화</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">ax.scatter(sx, sy, c=<span class="string">&quot;lightgray&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_8.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_8.png"><br></p></li><li><p><b>kfold를 1, 3, 5로 나누어 영향을 확인</b>합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df_sep = pd.DataFrame(&#123;<span class="string">&quot;x&quot;</span>: sx, <span class="string">&quot;y&quot;</span>: sy&#125;)</span><br><span class="line">gibbs_sep = GibbsSampling(<span class="number">10000</span>, df_sep, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">gibbs_sx1, gibbs_sy1 = gibbs_sep.sampling(kfold=<span class="number">1</span>)</span><br><span class="line">gibbs_sx2, gibbs_sy2 = gibbs_sep.sampling(kfold=<span class="number">3</span>)</span><br><span class="line">gibbs_sx3, gibbs_sy3 = gibbs_sep.sampling(kfold=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>시각화 코드는 반복이 많아 숨겨둡니다. 클릭하면 펼쳐집니다.</p></li><li><p><b>kfold가 1일 때는 한 그룹의 데이터만 생성</b>된 것을 볼 수 있습니다.</p><details>  <summary>코드 보기/접기</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sfigs = fig.subfigures(<span class="number">1</span>, <span class="number">2</span>, width_ratios=[<span class="number">2</span>, <span class="number">1</span>], wspace=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2D histogram</span></span><br><span class="line">sfigs[<span class="number">0</span>].suptitle(<span class="string">&quot;2D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">axesL = sfigs[<span class="number">0</span>].subplots(ncols=<span class="number">2</span>, nrows=<span class="number">2</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">axsL = axesL.ravel()</span><br><span class="line">axsL[<span class="number">0</span>].hist2d(sx, sy, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)               <span class="comment"># original</span></span><br><span class="line">axsL[<span class="number">1</span>].hist2d(gibbs_sx1, gibbs_sy1, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled1</span></span><br><span class="line">axsL[<span class="number">2</span>].hist2d(gibbs_sx2, gibbs_sy2, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled2</span></span><br><span class="line">axsL[<span class="number">3</span>].hist2d(gibbs_sx3, gibbs_sy3, cmap=<span class="string">&quot;Greys&quot;</span>, bins=<span class="number">20</span>)  <span class="comment"># gibbs sampled3</span></span><br><span class="line"></span><br><span class="line">font_title = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>&#125;</span><br><span class="line">axsL[<span class="number">0</span>].set_title(<span class="string">&quot;original&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">1</span>].set_title(<span class="string">&quot;gibbs sampled (kfold=1)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">2</span>].set_title(<span class="string">&quot;gibbs sampled (kfold=3)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axsL[<span class="number">3</span>].set_title(<span class="string">&quot;gibbs sampled (kfold=5)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, scolor <span class="keyword">in</span> <span class="built_in">zip</span>(axsL, [<span class="string">&quot;k&quot;</span>, <span class="string">&quot;#D00&quot;</span>, <span class="string">&quot;#0D0&quot;</span>, <span class="string">&quot;#00D&quot;</span>]):</span><br><span class="line">    ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>]].set_color(scolor)</span><br><span class="line">    ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;bottom&quot;</span>]].set_linewidth(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1D histogram</span></span><br><span class="line">sfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;1D histogram&quot;</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">axsR = sfigs[<span class="number">1</span>].subplots(ncols=<span class="number">1</span>, nrows=<span class="number">2</span>, squeeze=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">1</span>].set_title(<span class="string">&quot;x-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(sx, color=<span class="string">&quot;k&quot;</span>, linewidth=<span class="number">3</span>, fill=<span class="literal">False</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], zorder=<span class="number">2</span>, label=<span class="string">&quot;original&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_sx1, color=<span class="string">&quot;red&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (kfold=1)&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_sx2, color=<span class="string">&quot;green&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (kfold=3)&quot;</span>)</span><br><span class="line">sns.kdeplot(gibbs_sx3, color=<span class="string">&quot;blue&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">1</span>], label=<span class="string">&quot;sampled (kfold=5)&quot;</span>)</span><br><span class="line">axsR[<span class="number">1</span>].legend(fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">axsR[<span class="number">0</span>].set_title(<span class="string">&quot;y-distribution&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">sns.kdeplot(sy, color=<span class="string">&quot;k&quot;</span>, linewidth=<span class="number">3</span>, fill=<span class="literal">False</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>], zorder=<span class="number">2</span>)</span><br><span class="line">sns.kdeplot(gibbs_sy1, color=<span class="string">&quot;red&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(gibbs_sy2, color=<span class="string">&quot;green&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(gibbs_sy3, color=<span class="string">&quot;blue&quot;</span>, fill=<span class="literal">True</span>, cut=<span class="number">0</span>, ax=axsR[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_19.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="69_gs_19.png"><br></p><h1 id="7-부가-기능"><a href="#7-부가-기능" class="headerlink" title="7. 부가 기능"></a>7. 부가 기능</h1><ul><li>활용성을 높이기 위해 몇 가지 부가 기능을 내장하고 있습니다.</li></ul><h2 id="7-1-생성데이터-저장"><a href="#7-1-생성데이터-저장" class="headerlink" title="7.1. 생성데이터 저장"></a>7.1. 생성데이터 저장</h2><ul><li>생성된 데이터를 <code>pandas.DataFrame</code>으로 저장할 수 있습니다.</li><li><code>.to_df()</code> 명령이며, 기본적으로 pickle(.pkl)로 저장하지만 파일 이름에 <code>.csv</code>를 명시하면 csv 형식으로 저장됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gibbs1D = GibbsSampling(<span class="number">10000</span>, x, bins=<span class="number">30</span>)</span><br><span class="line">gibbs1D.to_df(<span class="string">&quot;gibbs1D&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (default) exporting as pickle</span></span><br><span class="line"><span class="comment"># Sampling data export complete: gibbs1D.pkl</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7-2-데이터-시각화-1D"><a href="#7-2-데이터-시각화-1D" class="headerlink" title="7.2. 데이터 시각화 (1D)"></a>7.2. 데이터 시각화 (1D)</h2><ul><li>원본과 생성된 데이터를 한 눈에 보는 기능을 제공합니다.</li><li><code>plot()</code>을 사용합니다. filename 매개변수를 사용하면 저장도 됩니다.</li><li>1D data로 간단히 확인해보겠습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gibbs1D.plot(filename=<span class="string">&quot;gibbs1D_plot.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="gibbs1D_plot.png"></li></ul><h2 id="7-3-파일-입력"><a href="#7-3-파일-입력" class="headerlink" title="7.3. 파일 입력"></a>7.3. 파일 입력</h2><ul><li>데이터 파일로부터 직접 데이터를 생성할 수 있습니다.</li><li>GibbsSampling() 명령의 데이터 자리에 파일명을 대신 넣으면 됩니다.</li><li>방금 저장한 데이터를 읽어서 10개의 구간으로 샘플링한 후 함께 그려보겠습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gibbs1D_2nd = GibbsSampling(<span class="number">10000</span>, <span class="string">&quot;gibbs1D.pkl&quot;</span>, bins=<span class="number">10</span>)</span><br><span class="line">gibbs1D_2nd.plot(filename=<span class="string">&quot;gibbs1D_input.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="gibbs1D_input.png"></li></ul><h2 id="7-4-N-Dimensional-Gibbs-Sampling-시각화"><a href="#7-4-N-Dimensional-Gibbs-Sampling-시각화" class="headerlink" title="7.4. N-Dimensional Gibbs Sampling 시각화"></a>7.4. N-Dimensional Gibbs Sampling 시각화</h2><ul><li><p>1차원 데이터는 좌우에 나란히 보여주기 좋지만, 차원이 커지면 시각화가 어려워집니다.</p></li><li><p>이런 점을 보완하기 위해 2차원 이상의 시각화는 2D 히스토그램을 여럿 활용합니다.</p></li><li><p><code>ori=True</code>를 하면 원본 데이터가, False(기본값)로 놓으면 생성된 데이터가 그려집니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3차원 데이터를 만들고</span></span><br><span class="line">z = <span class="number">10</span>*np.log(t+<span class="number">1</span>) + np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line">df_3d = pd.DataFrame(&#123;<span class="string">&quot;x&quot;</span>:x, <span class="string">&quot;y&quot;</span>:y, <span class="string">&quot;z&quot;</span>:z&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 생성합니다.</span></span><br><span class="line"><span class="comment"># 인자별로 구간의 수를 조절할 수 있습니다. 메모리 문제를 해결하고자 넣었습니다.</span></span><br><span class="line">gibbs_3d = GibbsSampling(<span class="number">3000</span>, df_3d, bins=[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터를 시각화합니다.</span></span><br><span class="line"><span class="comment"># figsize 매개변수로 그림 크기를 지정할 수 있습니다.</span></span><br><span class="line"><span class="comment"># 원본 데이터를 먼저 그립니다.</span></span><br><span class="line">gibbs_3d.plot(cmap=<span class="string">&quot;Greys&quot;</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>), org=<span class="literal">True</span>, filename=<span class="string">&quot;69_gs_9.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="69_gs_9.png" alt="원본 데이터"><br></p></li><li><p>생성 데이터도 그려봅니다.</p></li><li><p>GibbsSampling의 <code>plot()</code> 메소드는 fig를 return 하기 때문에 추가 처리도 가능합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = gibbs_3d.plot(cmap=<span class="string">&quot;Greys&quot;</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>), org=<span class="literal">False</span>, filename=<span class="string">&quot;69_gs_10.png&quot;</span>)</span><br><span class="line">fig.set_facecolor(<span class="string">&quot;#DDF&quot;</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;69_gs_10.png&quot;</span>)</span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="69_gs_10.png" alt="Gibbs Sampling 데이터"><br></p></li></ul><h1 id="8-Matplotlib-3D-Rotation-Animation"><a href="#8-Matplotlib-3D-Rotation-Animation" class="headerlink" title="8. Matplotlib: 3D Rotation Animation"></a>8. Matplotlib: 3D Rotation Animation</h1><blockquote><p><a href="https://matplotlib.org/stable/api/animation_api.html">matplotlib.animation</a></p></blockquote><ul><li>3차원 공간을 2차원에 표현하는데는 한계가 있습니다.</li><li>3차원으로 그려도 시선 방향으로 정사영(projection)한 그림밖에 보이지 않습니다.</li><li>이럴 때 interactive와 함께 좋은 방법은 그림을 빙빙 돌리며 애니메이션으로 보는 것입니다.</li></ul><ul><li>matplotlib의 <b><code>FuncAnimation</code></b>을 활용합니다.</li><li>사용자 정의한 <code>animate()</code>함수 안에 frame마다 달라지는 그림을 iteration 매개변수 i를 사용해 그립니다.</li><li><b>return 값에 쉼표(,)를 붙여서 tuple 형태로 바꿔줘야 한다는 점</b>을 주의해야 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation </span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    axs[<span class="number">0</span>].scatter(x, y, z, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">30</span>, c=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    axs[<span class="number">1</span>].scatter(*gibbs_3d_data, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">30</span>, c=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;blue&quot;</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    </span><br><span class="line">    axs[<span class="number">0</span>].set_title(<span class="string">&quot;original&quot;</span>, fontsize=<span class="number">16</span>, pad=<span class="number">8</span>)</span><br><span class="line">    axs[<span class="number">1</span>].set_title(<span class="string">&quot;Gibbs Sampled&quot;</span>, fontsize=<span class="number">16</span>, pad=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span>(<span class="params">i</span>):</span></span><br><span class="line">    axs[<span class="number">0</span>].view_init(elev=<span class="number">10.</span>, azim=i)</span><br><span class="line">    axs[<span class="number">1</span>].view_init(elev=<span class="number">10.</span>, azim=i)</span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Animate</span></span><br><span class="line">anim = animation.FuncAnimation(fig, animate, init_func=init,</span><br><span class="line">                               frames=<span class="number">360</span>, interval=<span class="number">20</span>, blit=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">anim.save(<span class="string">&#x27;69_gs_11.gif&#x27;</span>, fps=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><img src="69_gs_11.gif"></li></ul><ul><li>코드는 버그를 확인하고 완성도를 높여 추후 공개하겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/statistics/">statistics</category>
      
      <category domain="https://jehyunlee.github.io/tags/gibbs-sampling/">gibbs sampling</category>
      
      
    </item>
    
    <item>
      <title>Validation with Visualization (3)</title>
      <link>https://jehyunlee.github.io/2021/04/09/Python-DS-68-visualcv3/</link>
      <guid>https://jehyunlee.github.io/2021/04/09/Python-DS-68-visualcv3/</guid>
      <pubDate>Fri, 09 Apr 2021 07:04:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;데이터 불균형으로 인해 train, validation, test dataset의 결과가 따로 놉니다.&lt;/li&gt;
&lt;li&gt;층화추출로 데이터를 최대한 균등하게 분할합시다.&lt;/li&gt;
&lt;li&gt;hyperparameter도 라이브러리를 사용해 편</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>데이터 불균형으로 인해 train, validation, test dataset의 결과가 따로 놉니다.</li><li>층화추출로 데이터를 최대한 균등하게 분할합시다.</li><li>hyperparameter도 라이브러리를 사용해 편리하게 피팅합시다.</li></ul><h1 id="6-Validation-set-고정"><a href="#6-Validation-set-고정" class="headerlink" title="6. Validation set 고정"></a>6. Validation set 고정</h1><ul><li>새로운 노트북을 만들어 데이터를 불러옵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">sns.set_palette(<span class="string">&quot;Pastel1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 불러오기</span></span><br><span class="line">df_vcv = pd.read_csv(<span class="string">&quot;df_vcv.csv&quot;</span>)</span><br><span class="line">df_vcv.head()</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-1-랜덤추출"><a href="#6-1-랜덤추출" class="headerlink" title="6.1. 랜덤추출"></a>6.1. 랜덤추출</h2><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html">sklearn.model_selection.train_test_split</a></p></blockquote><ul><li><p>이번엔 index를 사용하지 않고 데이터를 분할합니다.</p></li><li><p>편하게 sklearn의 <code>train_test_split()</code>을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># data split</span></span><br><span class="line">df_trainval, df_test = train_test_split(df_vcv, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">df_train, df_val = train_test_split(df_trainval, train_size=<span class="number">0.75</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">idx_train = df_train.index</span><br><span class="line">idx_val = df_val.index</span><br><span class="line">idx_test = df_test.index</span><br></pre></td></tr></table></figure></li><li><p>데이터가 잘 분할되었는지 확인합니다.</p></li><li><p><a href="https://jehyunlee.github.io/2021/04/02/Python-DS-66-visualcv/">지난번 글</a>에 있는 코드를 고쳐서 train, validation, test set의 분포를 그립니다.</p></li><li><p>코드가 길어서 접어두었습니다. 클릭하면 펴집니다.</p><details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_distribution</span>(<span class="params">df, idx_train, idx_val, idx_test, filename</span>):</span></span><br><span class="line">    fig, axes = plt.subplots(ncols=<span class="number">3</span>, nrows=<span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    axs = axes.ravel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ax, col <span class="keyword">in</span> <span class="built_in">zip</span>(axs, df.columns):</span><br><span class="line">        <span class="keyword">if</span> col != <span class="string">&quot;target&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> df[col].dtype == <span class="string">&quot;O&quot;</span>: <span class="comment"># categorical</span></span><br><span class="line">                df_train = df.loc[idx_train, col].value_counts().reset_index()</span><br><span class="line">                df_val = df.loc[idx_val, col].value_counts().reset_index()</span><br><span class="line">                df_test = df.loc[idx_test, col].value_counts().reset_index()</span><br><span class="line"></span><br><span class="line">                width_cat = <span class="number">0.8</span>/<span class="number">3</span></span><br><span class="line">                ax.bar(df_train.index-width_cat, df_train[col]/<span class="built_in">len</span>(idx_train), width=width_cat, ec=<span class="string">&quot;g&quot;</span>, fc=<span class="string">&quot;#AAFFAADD&quot;</span>)</span><br><span class="line">                ax.bar(df_val.index, df_val[col]/<span class="built_in">len</span>(idx_val), width=width_cat, ec=<span class="string">&quot;c&quot;</span>, fc=<span class="string">&quot;#AAFFFFDD&quot;</span>)</span><br><span class="line">                ax.bar(df_test.index+width_cat, df_test[col]/<span class="built_in">len</span>(idx_test), width=width_cat, ec=<span class="string">&quot;m&quot;</span>, fc=<span class="string">&quot;#FFAAFFDD&quot;</span>)</span><br><span class="line">                ax.set_xticks(<span class="built_in">list</span>(<span class="built_in">range</span>(df_train.shape[<span class="number">0</span>])))</span><br><span class="line">                ax.set_xticklabels(df_train[<span class="string">&quot;index&quot;</span>].values)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># numerical</span></span><br><span class="line">                bins = np.linspace(df[col].<span class="built_in">min</span>(), df[col].<span class="built_in">max</span>(), <span class="number">10</span>)</span><br><span class="line">                bins_center = (bins[:-<span class="number">1</span>] + bins[<span class="number">1</span>:])/<span class="number">2</span></span><br><span class="line">                bins_delta = bins[<span class="number">1</span>] - bins[<span class="number">0</span>]</span><br><span class="line">                counts_train, bins_train = np.histogram(df.loc[idx_train, col], bins=bins)</span><br><span class="line">                counts_val, bins_val = np.histogram(df.loc[idx_val, col], bins=bins)</span><br><span class="line">                counts_test, bins_test = np.histogram(df.loc[idx_test, col], bins=bins)</span><br><span class="line"></span><br><span class="line">                width_num = bins_delta/<span class="number">3</span></span><br><span class="line">                ax.bar(bins_center-width_num, counts_train/<span class="built_in">len</span>(idx_train), width=width_num, ec=<span class="string">&quot;g&quot;</span>, fc=<span class="string">&quot;#AAFFAADD&quot;</span>)</span><br><span class="line">                ax.bar(bins_center, counts_val/<span class="built_in">len</span>(idx_val), width=width_num, ec=<span class="string">&quot;g&quot;</span>, fc=<span class="string">&quot;#AAFFFFDD&quot;</span>)</span><br><span class="line">                ax.bar(bins_center+width_num, counts_test/<span class="built_in">len</span>(idx_test), width=width_num, ec=<span class="string">&quot;m&quot;</span>, fc=<span class="string">&quot;#FFAAFFDD&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sns.kdeplot(df.loc[idx_train, col], color=<span class="string">&quot;g&quot;</span>, fill=<span class="literal">True</span>, ax=ax, label=<span class="string">&quot;train&quot;</span>)</span><br><span class="line">            sns.kdeplot(df.loc[idx_val, col], color=<span class="string">&quot;c&quot;</span>, fill=<span class="literal">True</span>, ax=ax, label=<span class="string">&quot;val.&quot;</span>)</span><br><span class="line">            sns.kdeplot(df.loc[idx_test, col], color=<span class="string">&quot;m&quot;</span>, fill=<span class="literal">True</span>, ax=ax, label=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">            ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> col <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]:</span><br><span class="line">            coltype = <span class="string">&quot;categorical&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            coltype = <span class="string">&quot;numerical&quot;</span></span><br><span class="line"></span><br><span class="line">        ax.set_title(<span class="string">f&quot;<span class="subst">&#123;col&#125;</span> (<span class="subst">&#123;coltype&#125;</span>)&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    handles, labels = axs[<span class="number">5</span>].get_legend_handles_labels()</span><br><span class="line">    axs[<span class="number">2</span>].legend(handles, labels, loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=(<span class="number">1</span>,<span class="number">0.9</span>))    </span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li>matplotlib은 <b>bar plot을 나란히 놓기가 영 성가신 것이 사실</b>입니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_distribution(df_vcv, idx_train, idx_val, idx_test, <span class="string">&quot;68_vcv_1.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="68_vcv_1.png"><br></p><ul><li>categorical은 그나마 좀 나은데 numerical들이 울퉁불퉁합니다.</li><li>이 데이터들을 최대한 균등하게 나누어 봅시다.</li></ul><h2 id="6-2-층화추출-stratified-sampling"><a href="#6-2-층화추출-stratified-sampling" class="headerlink" title="6.2. 층화추출: stratified sampling"></a>6.2. 층화추출: stratified sampling</h2><ul><li><p>층화추출은 <code>train_test_split()</code>에 <code>stratify=</code> 매개변수를 넣으면 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stratify split fail</span></span><br><span class="line">df_trainval, df_test = train_test_split(df_vcv, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_vcv[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]])</span><br></pre></td></tr></table></figure><p><img src="68_vcv_0.png"><br></p></li><li><p>그런데 에러가 납니다.</p><ul><li>층화추출은 데이터의 종류에 따라 경우의 수가 결정됩니다.</li><li>B x C x E = 5 x 5 x 4 = <b>100개</b>는 되어야 하는데,</li><li>test dataset이 400 x 0.2 = <b>80개</b>밖에 안됩니다.</li><li>욕심을 줄이고 B와 C에만 층화추출을 적용합니다.</li></ul></li></ul><ul><li>1차로 train + val : test set을 8:2로 나누고</li><li>2차로 train : val 을 3:1로 나눕니다.</li><li>최종적으로 <b>train : val : test = 3 : 1 : 1</b> 로 나눕니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stratify split success</span></span><br><span class="line">df_trainval, df_test = train_test_split(df_vcv, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_vcv[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]])</span><br><span class="line">df_train, df_val = train_test_split(df_trainval, train_size=<span class="number">0.75</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_trainval[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">idx_train = df_train.index</span><br><span class="line">idx_val = df_val.index</span><br><span class="line">idx_test = df_test.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plot_distribution(df_vcv, idx_train, idx_val, idx_test, <span class="string">&quot;68_vcv_2.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="68_vcv_2.png"><br></li></ul><ul><li>분포가 한결 균일해집니다. </li></ul><h2 id="6-3-더-층화추출"><a href="#6-3-더-층화추출" class="headerlink" title="6.3. 더 층화추출"></a>6.3. 더 층화추출</h2><ul><li>B와 C에 비해 E가 덜 균일한 것이 영 아쉽습니다.</li><li>B를 절반으로 나누어서라도 층화추출을 적용해 봅니다.</li></ul><ul><li>E의 범위를 측정해서 절반으로 자릅니다</li><li><code>np.quantile()</code>을 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># quantizing E</span></span><br><span class="line"></span><br><span class="line">qbins = np.quantile(df_vcv[<span class="string">&quot;E&quot;</span>], np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">qbins[<span class="number">0</span>] = -np.inf</span><br><span class="line">qbins[-<span class="number">1</span>] = np.inf</span><br><span class="line"><span class="built_in">print</span>(qbins)</span><br><span class="line"></span><br><span class="line">qlabels = np.arange(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(qlabels)</span><br></pre></td></tr></table></figure><ul><li>실행결과 : <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[-inf  <span class="number">2.5</span>  inf]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>2.5를 중심으로 나눈 기준을 이용해 0과 1로 인코딩을 합니다.</li><li><code>pd.cut()</code>을 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_vcv[<span class="string">&quot;E_cat&quot;</span>] = pd.cut(df_vcv[<span class="string">&quot;E&quot;</span>], bins=qbins, labels=qlabels)</span><br><span class="line">df_vcv.head()</span><br></pre></td></tr></table></figure><img src="68_vcv_01.png"><br></li></ul><ul><li>B, C에 E_cat까지 이용해 나눕니다.</li><li>실제 사용할 데이터가 아니더라도 층화추출에 적용할 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stratify split success</span></span><br><span class="line">df_trainval, df_test = train_test_split(df_vcv, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_vcv[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E_cat&quot;</span>]])</span><br><span class="line">df_train, df_val = train_test_split(df_trainval, train_size=<span class="number">0.75</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_trainval[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E_cat&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">idx_train = df_train.index</span><br><span class="line">idx_val = df_val.index</span><br><span class="line">idx_test = df_test.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plot_distribution(df_vcv, idx_train, idx_val, idx_test, <span class="string">&quot;68_vcv_3.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="68_vcv_3.png"><br></li></ul><ul><li>왠지 오히려 더 안좋습니다.</li><li>아까 나누었던 B, C 층화추출을 채택하고, train, val, test set을 만듭니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stratify split success</span></span><br><span class="line">df_trainval, df_test = train_test_split(df_vcv, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_vcv[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]])</span><br><span class="line">df_train, df_val = train_test_split(df_trainval, train_size=<span class="number">0.75</span>, random_state=<span class="number">42</span>,</span><br><span class="line">                                        stratify=df_trainval[[<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">idx_train = df_train.index</span><br><span class="line">idx_val = df_val.index</span><br><span class="line">idx_test = df_test.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># dataset</span></span><br><span class="line">X = df_vcv[[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>]]</span><br><span class="line">y = df_vcv[<span class="string">&quot;target&quot;</span>]</span><br><span class="line"></span><br><span class="line">X_train, X_val, X_test = X.loc[idx_train], X.loc[idx_val], X.loc[idx_test]</span><br><span class="line">y_train, y_val, y_test = y[idx_train], y[idx_val], y[idx_test]</span><br></pre></td></tr></table></figure></li></ul><h1 id="7-머신러닝"><a href="#7-머신러닝" class="headerlink" title="7. 머신러닝"></a>7. 머신러닝</h1><h2 id="7-1-사전-준비"><a href="#7-1-사전-준비" class="headerlink" title="7.1. 사전 준비"></a>7.1. 사전 준비</h2><ul><li>지난 글까지와 달리 이번 글에서는 고정된 validation set을 사용합니다.</li><li>한편 hyperparameter는 이것저것 바꿔 넣을 것입니다.</li><li>사용된 함수들을 일부 수정합니다. 자세한 설명은 생략합니다.</li></ul><h3 id="7-1-1-pipeline"><a href="#7-1-1-pipeline" class="headerlink" title="7.1.1. pipeline"></a>7.1.1. pipeline</h3><ul><li>파이프라인을 구축합니다.</li><li>학습과 예측에 필요한 데이터와 하이퍼파라미터만 넣으면 되도록 만듭니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoder</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="comment"># machine learning models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline</span></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"></span><br><span class="line"><span class="comment"># machine learning models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.kernel_ridge <span class="keyword">import</span> KernelRidge</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model</span>(<span class="params">method=<span class="string">&quot;svr&quot;</span>, param=<span class="literal">None</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># categorical and numerical features</span></span><br><span class="line">    cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(include_bias=<span class="literal">True</span>))])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># preprocessor</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                  ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># modeling</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;svr&quot;</span>:</span><br><span class="line">        model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                                (<span class="string">&quot;svr&quot;</span>, SVR())</span><br><span class="line">                               ])</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;kridge&quot;</span>:</span><br><span class="line">        model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                                (<span class="string">&quot;kridge&quot;</span>, KernelRidge())</span><br><span class="line">                               ])</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;knr&quot;</span>:</span><br><span class="line">        model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                                (<span class="string">&quot;knr&quot;</span>, KNeighborsRegressor())</span><br><span class="line">                               ])</span><br><span class="line">        </span><br><span class="line">    model.set_params(**param)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ul><ul><li>예제 hyperparameter를 입력해서 모델이 잘 생성되는지 확인합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example: svr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hyperparameter</span></span><br><span class="line">param = &#123;<span class="string">&#x27;preprocessor__num__polynomial__degree&#x27;</span>: <span class="number">3</span>, </span><br><span class="line">         <span class="string">&#x27;svr__kernel&#x27;</span>: <span class="string">&#x27;rbf&#x27;</span>, <span class="string">&#x27;svr__C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;svr__gamma&#x27;</span>: <span class="number">0.01</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">model = get_model(method=<span class="string">&quot;svr&quot;</span>, param=param)</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualize</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> set_config</span><br><span class="line"></span><br><span class="line">set_config(display=<span class="string">&#x27;diagram&#x27;</span>)  </span><br><span class="line">display(model)</span><br></pre></td></tr></table></figure><img src="68_vcv_4.png"><br></li></ul><h3 id="7-1-2-evaluation"><a href="#7-1-2-evaluation" class="headerlink" title="7.1.2. evaluation"></a>7.1.2. evaluation</h3><ul><li>모델 평가를 위한 함수를 마련합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># evaluation metrics</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error <span class="keyword">as</span> mae_</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error <span class="keyword">as</span> mse_</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score <span class="keyword">as</span> r2_</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metrics</span>(<span class="params">model, X, y</span>):</span></span><br><span class="line">    y_pred = model.predict(X)</span><br><span class="line">    mae = mae_(y, y_pred)</span><br><span class="line">    rmse = mse_(y, y_pred, squared=<span class="literal">False</span>)</span><br><span class="line">    r2 = r2_(y, y_pred)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> y_pred, mae, rmse, r2</span><br><span class="line">    </span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">y_pred_val, mae_val, rmse_val, r2_val = get_metrics(model, X_val, y_val)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;#  mae_val : <span class="subst">&#123;mae_val:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;# rmse_val : <span class="subst">&#123;rmse_val:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;#   r2_val : <span class="subst">&#123;r2_val:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과 :<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  mae_val : 0.296</span></span><br><span class="line"><span class="comment"># rmse_val : 0.437</span></span><br><span class="line"><span class="comment">#   r2_val : 0.513</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="7-1-3-parity-plots"><a href="#7-1-3-parity-plots" class="headerlink" title="7.1.3. parity plots"></a>7.1.3. parity plots</h3><ul><li>평가 결과를 scatter plot과 함께 시각화하는 함수를 만듭니다.</li><li>지난 글에 있던 코드를 수정해서 확장성을 높였습니다.</li><li>tran &amp; val만 볼 수도, train &amp; val &amp; test도 가능합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># single parity plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">true, predict, c=<span class="string">&quot;c&quot;</span>, mae=<span class="literal">None</span>, rmse=<span class="literal">None</span>, r2=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                equal=<span class="literal">True</span>, title=<span class="literal">None</span>, xlabel=<span class="string">&quot;true&quot;</span>, ylabel=<span class="string">&quot;predict&quot;</span>, ax=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># if axes not defined, create one.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scatter plot</span></span><br><span class="line">    ax.scatter(true, predict, c=c, s=<span class="number">10</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y limits</span></span><br><span class="line">    min_ = <span class="built_in">min</span>(ax.get_xbound()[<span class="number">0</span>], ax.get_ybound()[<span class="number">0</span>])</span><br><span class="line">    max_ = <span class="built_in">max</span>(ax.get_xbound()[<span class="number">1</span>], ax.get_ybound()[<span class="number">1</span>])</span><br><span class="line">    ax.set_xlim(min_, max_)</span><br><span class="line">    ax.set_ylim(min_, max_)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y ticks</span></span><br><span class="line">    lb, ub = ax.get_ybound()</span><br><span class="line">    </span><br><span class="line">    ticks =[x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> x &gt;= lb <span class="keyword">and</span> x &lt;= ub]</span><br><span class="line">    ax.set_xticks(ticks)</span><br><span class="line">    ax.set_xticklabels(ticks)</span><br><span class="line">    ax.set_yticks(ticks)</span><br><span class="line">    ax.set_yticklabels(ticks)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># grids</span></span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.grid(axis=<span class="string">&quot;both&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> equal:</span><br><span class="line">        ax.plot([lb, ub], [lb, ub], c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels and title</span></span><br><span class="line">    ax.set_xlabel(xlabel, fontsize=<span class="number">16</span>, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontsize=<span class="number">16</span>, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_title(title, fontsize=<span class="number">16</span>, pad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># metrics</span></span><br><span class="line">    <span class="keyword">if</span> mae:</span><br><span class="line">        ax.text(<span class="number">0.95</span>, <span class="number">0.3</span>, <span class="string">f&quot; MAE =<span class="subst">&#123;mae:<span class="number">0.3</span>f&#125;</span>&quot;</span>,</span><br><span class="line">                transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> rmse:</span><br><span class="line">        ax.text(<span class="number">0.95</span>, <span class="number">0.22</span>, <span class="string">f&quot;RMSE =<span class="subst">&#123;rmse:<span class="number">0.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> r2:</span><br><span class="line">        ax.text(<span class="number">0.95</span>, <span class="number">0.14</span>, <span class="string">f&quot;R2 =<span class="subst">&#123;r2:<span class="number">0.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line">    </span><br><span class="line"><span class="comment"># multiple parity plots</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parities</span>(<span class="params">model, X_train, y_train, X_val=<span class="literal">None</span>, y_val=<span class="literal">None</span>, X_test=<span class="literal">None</span>, y_test=<span class="literal">None</span>, title=<span class="literal">None</span>, train=<span class="literal">False</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># validataion and test</span></span><br><span class="line">    vis_val = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (X_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (y_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">        vis_val = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    vis_test = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (X_test <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (y_test <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">        vis_test = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        model.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># prediction and get_metrics</span></span><br><span class="line">    y_pred_train, mae_train, rmse_train, r2_train = get_metrics(model, X_train, y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> vis_val:</span><br><span class="line">        y_pred_val, mae_val, rmse_val, r2_val = get_metrics(model, X_val, y_val)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> vis_test:</span><br><span class="line">        X_trainval = pd.concat([X_train, X_val], axis=<span class="number">0</span>)</span><br><span class="line">        y_trainval = pd.concat([y_train, y_val], axis=<span class="number">0</span>)</span><br><span class="line">        model.fit(X_trainval, y_trainval)</span><br><span class="line">        y_pred_test, mae_test, rmse_test, r2_test = get_metrics(model, X_test, y_test)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># figure preparation</span></span><br><span class="line">    ncols = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> vis_val:</span><br><span class="line">        ncols += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> vis_test:</span><br><span class="line">        ncols += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    ax_width = <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> ncols &gt; <span class="number">1</span>:</span><br><span class="line">        ax_width = <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    fig, axs = plt.subplots(ncols=ncols, figsize=(ax_width*ncols, <span class="number">5</span>), sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(axs, np.ndarray):</span><br><span class="line">        axs = [axs]</span><br><span class="line">    </span><br><span class="line">    c_train, c_val, c_test = <span class="string">&quot;g&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;m&quot;</span></span><br><span class="line">    </span><br><span class="line">    axs[<span class="number">0</span>] = plot_parity(y_train, y_pred_train, c=c_train, mae=mae_train, rmse=rmse_train, r2=r2_train, </span><br><span class="line">                         title=<span class="string">&quot;train&quot;</span>, ax=axs[<span class="number">0</span>])</span><br><span class="line">    mins = [axs[<span class="number">0</span>].get_xbound()[<span class="number">0</span>]]</span><br><span class="line">    maxs = [axs[<span class="number">0</span>].get_xbound()[<span class="number">1</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> vis_val:</span><br><span class="line">        axs[<span class="number">1</span>] = plot_parity(y_val, y_pred_val, c=c_val, mae=mae_val, rmse=rmse_val, r2=r2_val, </span><br><span class="line">                             ylabel=<span class="literal">None</span>, title=<span class="string">&quot;validation&quot;</span>, ax=axs[<span class="number">1</span>])</span><br><span class="line">        mins.append(axs[<span class="number">1</span>].get_xbound()[<span class="number">0</span>])</span><br><span class="line">        maxs.append(axs[<span class="number">1</span>].get_xbound()[<span class="number">1</span>])   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> vis_test:</span><br><span class="line">        axs[<span class="number">2</span>] = plot_parity(y_test, y_pred_test, c=c_test, mae=mae_test, rmse=rmse_test, r2=r2_test, </span><br><span class="line">                             ylabel=<span class="literal">None</span>, title=<span class="string">&quot;test (train by full trainset)&quot;</span>, ax=axs[<span class="number">2</span>])</span><br><span class="line">        mins.append(axs[<span class="number">2</span>].get_xbound()[<span class="number">0</span>])</span><br><span class="line">        maxs.append(axs[<span class="number">2</span>].get_xbound()[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># suptitle</span></span><br><span class="line">    <span class="keyword">if</span> title:</span><br><span class="line">        fig.suptitle(title, fontsize=<span class="number">20</span>, ha=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> title:</span><br><span class="line">        fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><b>train 후 validation을 출력</b>하고,</li><li><b>train set과 validation set을 합쳐 다시 학습</b>합니다.</li><li>그 후에 <b>test set으로 최종 성능을 평가</b>합니다.</li><li>층화추출이 적용되니 크게 고민하지 않은 값들을 넣었는데도 성능이 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_parities(model, X_train, y_train, X_val, y_val, X_test, y_test, </span><br><span class="line">              title=<span class="string">&quot;test: SVR&quot;</span>, train=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>![](test_ SVR.png)<br></li></ul><h2 id="7-2-hyperparameter-optimization"><a href="#7-2-hyperparameter-optimization" class="headerlink" title="7.2. hyperparameter optimization"></a>7.2. hyperparameter optimization</h2><ul><li>이제 hyperparameter 최적화에 들어갑니다.</li><li>모든 변수의 조합을 탐색하는 <b>grid search</b>와</li><li>앞선 결과를 바탕으로 최적 탐색을 하는 <b>bayesian search</b>를 해 봅니다.</li></ul><h3 id="7-2-1-grid-search"><a href="#7-2-1-grid-search" class="headerlink" title="7.2.1. grid search"></a>7.2.1. grid search</h3><ul><li>준비된 데이터셋을 모두 넣으면 grid search를 수행해서 결과를 출력하게 합니다.</li><li><a href="https://jehyunlee.github.io/2021/04/04/Python-DS-67-visualcv2/">지난 글</a>과 다른 형식으로 출력해 봅니다.</li><li>grid search를 수행해서 DataFrame 형식으로 출력합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gs_model</span>(<span class="params">X_train, y_train, X_val, y_val, method=<span class="string">&quot;svr&quot;</span>, param_grid=<span class="literal">None</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># param_grid</span></span><br><span class="line">    param_ks = param_grid.keys()</span><br><span class="line">    param_vs = <span class="built_in">list</span>(product(*param_grid.values()))</span><br><span class="line">    </span><br><span class="line">    df = pd.DataFrame(columns=<span class="built_in">list</span>(param_ks)</span><br><span class="line">                      + [<span class="string">&quot;mae_train&quot;</span>, <span class="string">&quot;mae_val&quot;</span>, <span class="string">&quot;rmse_train&quot;</span>, <span class="string">&quot;rmse_val&quot;</span>, <span class="string">&quot;r2_train&quot;</span>, <span class="string">&quot;r2_val&quot;</span>]</span><br><span class="line">                      + [<span class="string">&quot;y_pred_train&quot;</span>, <span class="string">&quot;y_pred_val&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, vs <span class="keyword">in</span> <span class="built_in">enumerate</span>(param_vs):</span><br><span class="line">        param = <span class="built_in">dict</span>(<span class="built_in">zip</span>(param_ks, vs))</span><br><span class="line">        </span><br><span class="line">        model = get_model(method=method, param=param)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># train</span></span><br><span class="line">        model.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># evaluation</span></span><br><span class="line">        y_pred_train, mae_train, rmse_train, r2_train = get_metrics(model, X_train, y_train)</span><br><span class="line">        y_pred_val, mae_val, rmse_val, r2_val = get_metrics(model, X_val, y_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># output</span></span><br><span class="line">        df.loc[i] = <span class="built_in">list</span>(vs) + [mae_train, mae_val, </span><br><span class="line">                                rmse_train, rmse_val, </span><br><span class="line">                                r2_train, r2_val, </span><br><span class="line">                                y_pred_train, y_pred_val]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>gs_model()</code>를 이용해서 모든 결과를 출력하는 함수를 만듭니다.</li><li><code>gs_model()</code> 결과물의 dataframe index에 따라 평가 결과를 출력합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gs</span>(<span class="params">X_train, y_train, X_val, y_val, method=<span class="string">&quot;svr&quot;</span>, param_grid=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    df = gs_model(X_train, y_train, X_val, y_val, method=method, param_grid=param_grid)</span><br><span class="line">    df_sort = df.sort_values(<span class="string">&quot;r2_val&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># best params</span></span><br><span class="line">    best_params = df_sort[<span class="built_in">list</span>(param_grid.keys())].iloc[<span class="number">0</span>].to_dict()</span><br><span class="line">    best_params_idx = df_sort.index[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(best_params)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># train vs validation plot</span></span><br><span class="line">    ax = df_svr[[<span class="string">&quot;r2_train&quot;</span>, <span class="string">&quot;r2_val&quot;</span>]].plot(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">    ax.axvline(best_params_idx, c=<span class="string">&quot;g&quot;</span>, ls=<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    fig = ax.figure</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> best_params</span><br></pre></td></tr></table></figure></li></ul><ul><li>hyperparameter 범위를 설정하고 grid search를 수행합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hyperparameter space</span></span><br><span class="line">param_grid = &#123;<span class="string">&#x27;preprocessor__num__polynomial__degree&#x27;</span>: [<span class="number">2</span>],</span><br><span class="line">              <span class="string">&#x27;svr__kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>], <span class="comment">#[&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;],</span></span><br><span class="line">              <span class="string">&#x27;svr__C&#x27;</span>: np.logspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">11</span>),</span><br><span class="line">              <span class="string">&#x27;svr__gamma&#x27;</span>: np.linspace(<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">11</span>),</span><br><span class="line">              <span class="string">&#x27;svr__coef0&#x27;</span>: [<span class="number">0</span>]&#125;</span><br><span class="line">              </span><br><span class="line"><span class="comment"># grid search &amp; visualization 수행  </span></span><br><span class="line">best_params = plot_gs(X_train, y_train, X_val, y_val, method=<span class="string">&quot;svr&quot;</span>, param_grid=param_grid, filename=<span class="string">&quot;68_vcv_6.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="68_vcv_6.png"><br></li></ul><ul><li><b>재미있는 현상</b>이 나타났습니다.<ul><li>validation set의 <b>r2가 가장 큰 지점(점선)</b>을 기준으로,</li><li>왼쪽에선 <b>train과 val 곡선이 비슷합니다</b></li><li>오른쪽에선 <b>두 곡선이 반대 경향입니다</b></li><li>validation r2가 증가하다 감소하는걸 볼 때 <b>underfitting에서 overfitting으로 꺾이는 지점</b>이 관측되었다고 볼 수 있습니다.</li></ul></li></ul><ul><li>최적조건으로 학습시켜 test set 평가까지 봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = get_model(method=<span class="string">&quot;svr&quot;</span>, param=best_params)</span><br><span class="line">plot_parities(model, X_train, y_train, X_val, y_val, X_test, y_test, </span><br><span class="line">              title=<span class="string">&quot;SVR: rbf (deg=2)&quot;</span>, train=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>![](SVR_ rbf _deg=2_.png)</li></ul><ul><li><b>test set의 R2가 0.7을 넘었습니다!</b><ul><li>train set과 val set의 R2도 비슷하네요.</li><li>층화추출 덕에 안정적인 성능이 나오는 것 같습니다.</li></ul></li></ul><h3 id="7-2-2-Bayesian-Search"><a href="#7-2-2-Bayesian-Search" class="headerlink" title="7.2.2. Bayesian Search"></a>7.2.2. Bayesian Search</h3><blockquote><p><a href="http://hyperopt.github.io/">hyperopt</a><br><a href="https://optuna.org/">optuna</a><br><a href="https://scikit-optimize.github.io/">scikit-optimize</a><br><a href="https://medium.com/@vincent.kr18/hyper-parameter-tuning-using-bayesian-optimisation-code-b50e0e8abe20">medium: hyperparameter tuning using bayesian optimisation code</a></p></blockquote><ul><li>그런데 모든 변수를 다 탐색하는 과정이 번거롭습니다.</li><li>scikit-optimzie를 사용해서 베이지안 탐색을 시도합니다.</li><li>다음 명령어로 설치할 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install scikit-optimize</span><br></pre></td></tr></table></figure></li></ul><ul><li>필요한 모듈을 불러옵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hyperparameter 탐색 범위 설정에 사용합니다.</span></span><br><span class="line"><span class="keyword">from</span> skopt.space <span class="keyword">import</span> Real, Integer, Categorical</span><br><span class="line"></span><br><span class="line"><span class="comment"># objective function에 들어갈 parameter를 keyword arguments로 입력하게 해줍니다.</span></span><br><span class="line"><span class="keyword">from</span> skopt.utils <span class="keyword">import</span> use_named_args</span><br></pre></td></tr></table></figure></li></ul><ul><li>탐색 공간을 정의합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">space = [Integer(<span class="number">1</span>, <span class="number">2</span>, name=<span class="string">&quot;preprocessor__num__polynomial__degree&quot;</span>),</span><br><span class="line">         Categorical([<span class="string">&quot;rbf&quot;</span>], name=<span class="string">&quot;svr__kernel&quot;</span>),</span><br><span class="line">         Real(<span class="number">0.01</span>, <span class="number">100</span>, <span class="string">&quot;log-uniform&quot;</span>, name=<span class="string">&quot;svr__C&quot;</span>),</span><br><span class="line">         Real(<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="string">&quot;uniform&quot;</span>, name=<span class="string">&quot;svr__gamma&quot;</span>),</span><br><span class="line">         Integer(<span class="number">0</span>, <span class="number">1</span>, name=<span class="string">&quot;svr__coef0&quot;</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>목표 함수(objective function)을 정의합니다.</p></li><li><p><code>@use_named_args</code>를 사용해서 keyword argument로 입력합니다.</p></li><li><p>제가 <b>7.1.1.pipeline</b>에서 만든 <code>get_model()</code>을 사용하도록 했습니다.</p></li><li><p>출력은 r2_val 값으로 하고, 마이너스를 붙여 더 큰 값이 더 작게 출력되도록 했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@use_named_args(<span class="params">space</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">objective</span>(<span class="params">**params</span>):</span></span><br><span class="line">    model = get_model(method=<span class="string">&quot;svr&quot;</span>, param=params)</span><br><span class="line">    model.fit(X_train, y_train)</span><br><span class="line">    y_pred_val, mae_val, rmse_val, r2_val = get_metrics(model, X_val, y_val)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -r2_val</span><br></pre></td></tr></table></figure></li><li><p><b>gaussian process로 최적화</b>합니다.</p></li><li><p><code>gp_minimize()</code>명령을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skopt <span class="keyword">import</span> gp_minimize</span><br><span class="line"></span><br><span class="line">model_gp = gp_minimize(objective, space, n_calls=<span class="number">50</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;best score = <span class="subst">&#123;model_gp.fun:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best score = -0.6193</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>최적 파라미터는 <code>model_gp.x</code>에 저장됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_gp.x</span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, <span class="string">&#x27;rbf&#x27;</span>, 0.7740303218260096, 0.1, 1]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>제법 괜찮은 결과를 얻은 것 같긴 한데, 수렴했는지 확인해봅니다.</li><li><code>plot_converge()</code>를 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skopt.plots <span class="keyword">import</span> plot_convergence</span><br><span class="line"></span><br><span class="line">ax = plot_convergence(model_gp)</span><br><span class="line">fig = ax.figure</span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">fig.set_figheight(<span class="number">5</span>)</span><br><span class="line">fig.set_figwidth(<span class="number">12</span>)</span><br><span class="line">fig.savefig(<span class="string">&quot;68_vcv_7.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="68_vcv_7.png"><br></li></ul><ul><li>약 <b>20회</b>만에 최적 조건에 수렴했습니다.</li><li>해당 조건이 테스트셋에선 어떤 결과를 내는지 확인해봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 최적 파라미터 key와 value 결합</span></span><br><span class="line">param_keys = [s.name <span class="keyword">for</span> s <span class="keyword">in</span> space]</span><br><span class="line">best_params = <span class="built_in">dict</span>(<span class="built_in">zip</span>(param_keys, model_gp.x))</span><br><span class="line"><span class="built_in">print</span>(best_params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 최적 파라미터로 모델 학습, 시각화</span></span><br><span class="line">model = get_model(method=<span class="string">&quot;svr&quot;</span>, param=best_params)</span><br><span class="line">plot_parities(model, X_train, y_train, X_val, y_val, X_test, y_test, </span><br><span class="line">              title=<span class="string">&quot;SVR: scikit-learn opt.&quot;</span>, train=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>![](SVR_ scikit-learn opt..png)</li></ul><ul><li><b>R2가 다시 0.7을 넘었습니다</b></li><li>이번 업무의 목표가 0.7인데 SVR에서 0.7이 넘어서 상향 조정해도 될 것 같습니다.</li></ul><ul><li>자주 사용할 수 있도록 앞에서 파편화된 함수들을 하나로 모읍니다.</li><li>local minima에 빠지지 않도록 seed를 흔들어 여러 번 시도합니다.</li><li><b><a href="https://www.youtube.com/watch?v=wKkcBPp3F1Y">Andrew Ng 교수님이 Caviar approach</a></b>라고 말씀하신 방법입니다.</li><li>뭐 하나 잘 걸리라는 느낌입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_skopt</span>(<span class="params">objective, space, method=<span class="string">&quot;svr&quot;</span>, n_calls=<span class="number">30</span>, iternum=<span class="number">10</span>, random_state_base=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">              filename_conv=<span class="literal">None</span>, filename_parity=<span class="literal">None</span>, figsize=(<span class="params"><span class="number">12</span>, <span class="number">5</span></span>)</span>):</span></span><br><span class="line">    </span><br><span class="line">    fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    best_score = np.inf</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scikit optimization</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iternum):</span><br><span class="line">        model_gp = gp_minimize(objective, space, n_calls=n_calls, random_state=i*<span class="number">100</span>+random_state_base)</span><br><span class="line">        best_score_ = model_gp.fun</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;best score #<span class="subst">&#123;i+<span class="number">1</span>&#125;</span> = <span class="subst">&#123;best_score_:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convergence plot</span></span><br><span class="line">        ax = plot_convergence(model_gp, ax=ax)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># best parameters</span></span><br><span class="line">        <span class="keyword">if</span> best_score_ &lt; best_score:</span><br><span class="line">            best_score = best_score_</span><br><span class="line">            param_keys = [s.name <span class="keyword">for</span> s <span class="keyword">in</span> space]</span><br><span class="line">            best_params = <span class="built_in">dict</span>(<span class="built_in">zip</span>(param_keys, model_gp.x))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;best parameters= <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    fig.savefig(filename_conv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># train, val and test result </span></span><br><span class="line">    best_model = get_model(method=method, param=best_params)</span><br><span class="line">    plot_parities(best_model, X_train, y_train, X_val, y_val, X_test, y_test, </span><br><span class="line">                  title=filename_parity, train=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;filename_parity&#125;</span>.pkl&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(best_model, f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> best_model, best_params</span><br></pre></td></tr></table></figure></li></ul><ul><li>사용할 때는 위의 space, objective와 함께 세트로 사용합니다.</li><li>@<b>use_named_args(space)</b> 데커레이터로 인해 space를 먼저 정의해야 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#space</span></span><br><span class="line">space = [Integer(<span class="number">1</span>, <span class="number">2</span>, name=<span class="string">&quot;preprocessor__num__polynomial__degree&quot;</span>),</span><br><span class="line">         Categorical([<span class="string">&quot;rbf&quot;</span>], name=<span class="string">&quot;svr__kernel&quot;</span>),</span><br><span class="line">         Real(<span class="number">0.001</span>, <span class="number">1000</span>, <span class="string">&quot;log-uniform&quot;</span>, name=<span class="string">&quot;svr__C&quot;</span>),</span><br><span class="line">         Real(<span class="number">1e-3</span>, <span class="number">10</span>, <span class="string">&quot;log-uniform&quot;</span>, name=<span class="string">&quot;svr__gamma&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#objective</span></span><br><span class="line"><span class="meta">@use_named_args(<span class="params">space</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">objective</span>(<span class="params">**params</span>):</span></span><br><span class="line">    model = get_model(method=<span class="string">&quot;svr&quot;</span>, param=params)</span><br><span class="line">    model.fit(X_train, y_train)</span><br><span class="line">    y_pred_val, mae_val, rmse_val, r2_val = get_metrics(model, X_val, y_val)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -r2_val</span><br><span class="line">    </span><br><span class="line"><span class="comment"># optimize</span></span><br><span class="line">best_svr_rbf, best_params = run_skopt(objective, space, method=<span class="string">&quot;svr&quot;</span>, n_calls=<span class="number">50</span>, </span><br><span class="line">                                      filename_conv=<span class="string">&quot;68_vcv_8.png&quot;</span>, </span><br><span class="line">                                      filename_parity=<span class="string">&quot;SVR_rbf_opt&quot;</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><img src="69_vcv_2.png"><br><img src="SVR_rbf_opt.png"><br></li></ul><ul><li>이제 마음껏 실전에 투입합니다. :)</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/sklearn/">sklearn</category>
      
      <category domain="https://jehyunlee.github.io/tags/machine-learning/">machine learning</category>
      
      
    </item>
    
    <item>
      <title>Validation with Visualization (2)</title>
      <link>https://jehyunlee.github.io/2021/04/04/Python-DS-67-visualcv2/</link>
      <guid>https://jehyunlee.github.io/2021/04/04/Python-DS-67-visualcv2/</guid>
      <pubDate>Sun, 04 Apr 2021 00:35:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;contributor: 김홍비님&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;지난 글에 이어 GridSearchCV를 시각화해봅니다.&lt;/li&gt;
&lt;li&gt;화면이라는 매체의 제약상 한 번에 두 개의 변수밖에 바꾸지 못합니다.</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>contributor: 김홍비님</p></blockquote><ul><li>지난 글에 이어 GridSearchCV를 시각화해봅니다.</li><li>화면이라는 매체의 제약상 한 번에 두 개의 변수밖에 바꾸지 못합니다.</li><li>그런데도 제법 속이 뚫리고 다음에 뭘 할지 아이디어가 생깁니다.</li></ul><h1 id="4-비선형-모델-kernel-SVM"><a href="#4-비선형-모델-kernel-SVM" class="headerlink" title="4. 비선형 모델: kernel SVM"></a>4. 비선형 모델: kernel SVM</h1><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html#sklearn.svm.SVR">sklearn: svm.SVR</a></p></blockquote><ul><li>선형 모델로는 한계가 있는 것 같습니다.</li><li>비선형성을 가미해봅시다.</li><li>Support Vector Machine은 선형 모델이지만 <b>비선형 커널</b>을 함께 사용할 수 있습니다.</li></ul><ul><li>파이프라인의 선형회귀를 SVR로 교체합니다.</li><li>SVR에 비선형 관련 매개변수가 들어갑니다:<br><code>kernel=&#39;rbf&#39;, gamma=1, C=0.1</code>을 넣어봅니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svr</span>(<span class="params">degree</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># categorical and numerical features</span></span><br><span class="line">    cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree, </span><br><span class="line">                                                                        include_bias=<span class="literal">True</span>))])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocessor</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                  ])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># modeling</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;svr&quot;</span>, SVR(kernel=<span class="string">&quot;rbf&quot;</span>, gamma=<span class="number">1</span>, C=<span class="number">0.1</span>)) <span class="comment"># 이 부분입니다.</span></span><br><span class="line">                           ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ul><p><img src="67_vcv2_02.png"><br></p><ul><li>SVR의 cross validation plot을 그려봅니다.</li><li>method 매개변수를 넣어서 선형회귀와 SVR을 선택할 수 있게 합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_cv</span>(<span class="params">X_train, y_train, title, method=<span class="string">&quot;linear&quot;</span></span>):</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> degree <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="comment"># model build</span></span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">            model = linear(degree)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;svr&quot;</span>:</span><br><span class="line">            model = svr(degree)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cross validation</span></span><br><span class="line">        <span class="keyword">for</span> scoring, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;neg_mean_absolute_error&quot;</span>, <span class="string">&quot;neg_mean_squared_error&quot;</span>, <span class="string">&quot;r2&quot;</span>], axs):</span><br><span class="line">            scores = cross_val_score(model, X_train, y_train, scoring=scoring, cv=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> scoring.startswith(<span class="string">&quot;neg_&quot;</span>):</span><br><span class="line">                scores = -scores</span><br><span class="line"></span><br><span class="line">            cvs = ax.bar(degree, scores.mean()) </span><br><span class="line">            ax.bar_label(cvs, fmt=<span class="string">&quot;%.2f&quot;</span>, fontsize=<span class="number">14</span>, padding=<span class="number">5</span>)</span><br><span class="line">            ax.errorbar(degree, scores.mean(), yerr=scores.std(), </span><br><span class="line">                        ecolor=<span class="string">&quot;darkgray&quot;</span>, capsize=<span class="number">5</span>, capthick=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title_, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;MAE&quot;</span>, <span class="string">&quot;RMSE&quot;</span>, <span class="string">&quot;R2&quot;</span>], axs):</span><br><span class="line">        ax.set_title(title_, pad=<span class="number">12</span>)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;y&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>, ls=<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        xticks = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels(xticks)</span><br><span class="line"></span><br><span class="line">    fig.suptitle(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_cv(X_train, y_train,  <span class="string">&quot;SVR: polynomial order vs metrics (cross validation)&quot;</span>, method=<span class="string">&quot;svr&quot;</span>)</span><br></pre></td></tr></table></figure><p>![](SVR_ polynomial order vs metrics _cross validation_.png)<br></p><ul><li>1차의 경우 <b>선형회귀보다 나은 것</b> 같습니다.</li><li><b>파라미터를 바꾸면 더 좋아지지 않을까요?</b></li><li>SVC 파라미터를 바꿀 수 있도록 코드를 조금 수정합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svr</span>(<span class="params">degree, **kwargs</span>):</span>  <span class="comment"># **kwargs로 keyword arguments를 넣을 수 있도록 고칩니다.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># categorical and numerical features</span></span><br><span class="line">    cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree, </span><br><span class="line">                                                                        include_bias=<span class="literal">True</span>))])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocessor</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                  ])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># modeling</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;svr&quot;</span>, SVR(**kwargs))</span><br><span class="line">                           ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ul><ul><li>SVC 파라미터에 따른 시각화를 할 수 있도록 수정하고 적용합니다.</li><li><code>C=0.1</code>에서 <code>C=0.2</code>로 바꾼 것만으로 <b>R2가 0.1 정도 상승</b>했습니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_cv</span>(<span class="params">X_train, y_train, title, method=<span class="string">&quot;linear&quot;</span>, **kwargs</span>):</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> degree <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="comment"># model build</span></span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">            model = linear(degree, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;svr&quot;</span>:</span><br><span class="line">            model = svr(degree, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cross validation</span></span><br><span class="line">        <span class="keyword">for</span> scoring, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;neg_mean_absolute_error&quot;</span>, <span class="string">&quot;neg_mean_squared_error&quot;</span>, <span class="string">&quot;r2&quot;</span>], axs):</span><br><span class="line">            scores = cross_val_score(model, X_train, y_train, scoring=scoring, cv=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> scoring.startswith(<span class="string">&quot;neg_&quot;</span>):</span><br><span class="line">                scores = -scores</span><br><span class="line"></span><br><span class="line">            cvs = ax.bar(degree, scores.mean()) </span><br><span class="line">            ax.bar_label(cvs, fmt=<span class="string">&quot;%.2f&quot;</span>, fontsize=<span class="number">14</span>, padding=<span class="number">5</span>)</span><br><span class="line">            ax.errorbar(degree, scores.mean(), yerr=scores.std(), </span><br><span class="line">                        ecolor=<span class="string">&quot;darkgray&quot;</span>, capsize=<span class="number">5</span>, capthick=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title_, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;MAE&quot;</span>, <span class="string">&quot;RMSE&quot;</span>, <span class="string">&quot;R2&quot;</span>], axs):</span><br><span class="line">        ax.set_title(title_, pad=<span class="number">12</span>)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;y&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>, ls=<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        xticks = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels(xticks)</span><br><span class="line"></span><br><span class="line">    fig.suptitle(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_cv(X_train, y_train,  <span class="string">&quot;SVR2: polynomial order vs metrics (cross validation)&quot;</span>, </span><br><span class="line">        method=<span class="string">&quot;svr&quot;</span>, kernel=<span class="string">&quot;rbf&quot;</span>, gamma=<span class="number">1</span>, C=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>![](SVR2_ polynomial order vs metrics _cross validation_.png)<br></p><h1 id="5-GridSearchCV"><a href="#5-GridSearchCV" class="headerlink" title="5. GridSearchCV"></a>5. GridSearchCV</h1><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV">sklearn: GridSearchCV</a></p></blockquote><ul><li>매개변수에 따른 교차검증을 자동으로 하는 방법으로 <b>GridSearchCV</b>가 좋습니다.</li><li><b>일반적</b>으로 사용하는 방법을 그대로 사용해보고, </li><li><b>시각적으로 확인</b>하는 방법을 사용해봅니다.</li></ul><h2 id="5-1-일반-활용"><a href="#5-1-일반-활용" class="headerlink" title="5.1. 일반 활용"></a>5.1. 일반 활용</h2><ul><li>GridSearchCV에 <b>어떤 변수를 어떻게 바꿀지 지정</b>합니다.</li><li>단독으로 사용할 수도 있고 <b>pipeline</b>을 포함할 수도 있습니다.</li><li><b>평가 지표(metric)를 여러개</b> 넣을 수 있습니다.</li><li>그러나 최적 조건으로 다시 학습하는 <b><code>refit=</code>은 하나를 지정</b>해야 합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svr_gscv</span>(<span class="params">degree, param_grid, **kwargs</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># categorical and numerical features</span></span><br><span class="line">    cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree, </span><br><span class="line">                                                                        include_bias=<span class="literal">True</span>))])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocessor</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                  ])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># modeling</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;svr&quot;</span>, SVR(**kwargs))</span><br><span class="line">                           ])</span><br><span class="line">    </span><br><span class="line">    gscv = GridSearchCV(model, param_grid=param_grid, </span><br><span class="line">                        scoring=[<span class="string">&quot;neg_mean_absolute_error&quot;</span>, <span class="string">&quot;neg_root_mean_squared_error&quot;</span>, <span class="string">&quot;r2&quot;</span>],</span><br><span class="line">                        refit=<span class="string">&quot;neg_root_mean_squared_error&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gscv</span><br></pre></td></tr></table></figure></li></ul><ul><li>gridsearch에 pipeline을 넣었습니다.</li><li>pipeline 중 어떤 단계의 변수를 바꿔볼지는 <code>__</code>(underscore 두 개)를 이용해 지정합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">param_grid = &#123;<span class="string">&quot;svr__C&quot;</span>: [<span class="number">1e-1</span>, <span class="number">1e0</span>, <span class="number">1e1</span>, <span class="number">1e2</span>, <span class="number">1e3</span>], </span><br><span class="line">              <span class="string">&quot;svr__gamma&quot;</span>: np.logspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>)&#125;</span><br><span class="line"></span><br><span class="line">gscv = svr_gscv(<span class="number">3</span>, param_grid=param_grid, kernel=<span class="string">&quot;rbf&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>.best_score_</code>를 입력하면 최고 점수가 나옵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gscv.best_score_</span><br></pre></td></tr></table></figure><ul><li>실행 결과: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-0.3738050475519511</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>.best_params_</code>를 입력하면 최적 조건이 나옵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gscv.best_params_</span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;svr__C&#x27;</span>: 10.0, <span class="string">&#x27;svr__gamma&#x27;</span>: 0.1&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>그러나 전체 결과를 보고 싶을 때는 <code>gscv.cv_results_</code>를 사용해 출력하고,</li><li>dictionary type이기 때문에 dataframe으로 변환하기 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_gscv = pd.DataFrame.from_dict(gscv.cv_results_)</span><br><span class="line">df_gscv.head()</span><br></pre></td></tr></table></figure><img src="67_vcv2_03.png"><br></li></ul><h2 id="5-2-시각화"><a href="#5-2-시각화" class="headerlink" title="5.2. 시각화"></a>5.2. 시각화</h2><blockquote><p><a href="https://jehyunlee.github.io/2021/04/02/Python-DS-66-visualcv/">Pega Devlog: Cross Validation with Visualization</a></p></blockquote><h3 id="5-2-1-첫-시도"><a href="#5-2-1-첫-시도" class="headerlink" title="5.2.1. 첫 시도"></a>5.2.1. 첫 시도</h3><ul><li><a href="https://jehyunlee.github.io/2021/04/02/Python-DS-66-visualcv/">지난 글</a>처럼 평균과 표준편차를 이용해 시각화합시다.</li><li>DataFrame을 pivot table로 변환합니다.</li></ul><ul><li>교차검증 평균값을 추출합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_pivot_mean = df_gscv.pivot_table(values=<span class="string">&quot;mean_test_r2&quot;</span>, index=<span class="string">&quot;param_svr__C&quot;</span>, columns=<span class="string">&quot;param_svr__gamma&quot;</span>)</span><br><span class="line">df_pivot_mean</span><br></pre></td></tr></table></figure><img src="67_vcv2_04.png"><br></li></ul><ul><li>교차검증 표준편차를 추출합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_pivot_std = df_gscv.pivot_table(values=<span class="string">&quot;std_test_r2&quot;</span>, index=<span class="string">&quot;param_svr__C&quot;</span>, columns=<span class="string">&quot;param_svr__gamma&quot;</span>)</span><br><span class="line">df_pivot_std</span><br></pre></td></tr></table></figure><img src="67_vcv2_05.png"><br></li></ul><ul><li>평균값과 표준편차를 그림으로 표현합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">sns.heatmap(df_pivot_mean, cmap=<span class="string">&quot;Blues&quot;</span>, lw=<span class="number">1</span>, cbar=<span class="literal">False</span>, </span><br><span class="line">            annot=<span class="literal">True</span>, annot_kws=&#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">14</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;right&quot;</span>&#125;,</span><br><span class="line">            ax=ax)</span><br><span class="line"></span><br><span class="line">xticks = ax.get_xticks()</span><br><span class="line">yticks = ax.get_yticks()</span><br><span class="line"></span><br><span class="line">font_labels = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>&#125;</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;param_svr__gamma&quot;</span>, fontdict=font_labels)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;param_svr__C&quot;</span>, fontdict=font_labels)</span><br><span class="line"></span><br><span class="line">idx_text = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> idx, y <span class="keyword">in</span> <span class="built_in">zip</span>(df_pivot_std.index, yticks):</span><br><span class="line">    <span class="keyword">for</span> col, x <span class="keyword">in</span> <span class="built_in">zip</span>(df_pivot_std.columns, xticks):</span><br><span class="line">        fontcolor = ax.get_children()[idx_text].get_color()</span><br><span class="line">        ax.text(x, y, <span class="string">f&quot; ± <span class="subst">&#123;df_pivot_std.loc[idx, col]:<span class="number">.2</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                color=fontcolor, fontsize=<span class="number">14</span>, va=<span class="string">&quot;center&quot;</span>)   </span><br><span class="line">        idx_text += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;gscv_svr.png&quot;</span>)</span><br></pre></td></tr></table></figure>![](gscv_svr.png)<br></li></ul><ul><li><code>.best_params_</code>를 사용해 출력하면 <b>하나의 값</b>만 나옵니다.</li><li>그러나 시각화를 하면 <b>앞뒤의 경향</b>이 보이고, <b>거의 일정한 구간</b>도 보입니다.</li><li>코드를 함수화하고 interactive하게 그림을 그리면서 최적 조건을 찾아봅니다.</li></ul><h3 id="5-2-2-함수화"><a href="#5-2-2-함수화" class="headerlink" title="5.2.2. 함수화"></a>5.2.2. 함수화</h3><ul><li><b>GridSearchCV</b>와 <b>heatmap 시각화</b>를 동시에 하는 코드를 작성합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gscv_svr</span>(<span class="params">X_train, y_train, param_grid, plot_x, plot_y, plot_metric, plot_title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                  exp_x=<span class="literal">False</span>, exp_y=<span class="literal">False</span>, figsize=(<span class="params"><span class="number">10</span>, <span class="number">5</span></span>)</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># grid search for SVR</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">svr_gscv</span>(<span class="params">param_grid</span>):</span></span><br><span class="line">        <span class="comment"># categorical and numerical features</span></span><br><span class="line">        cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">        cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">        num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                          (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(include_bias=<span class="literal">True</span>))])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># preprocessor</span></span><br><span class="line">        preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                       (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                      ])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># modeling</span></span><br><span class="line">        model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                                (<span class="string">&quot;svr&quot;</span>, SVR())</span><br><span class="line">                               ])</span><br><span class="line"></span><br><span class="line">        gscv = GridSearchCV(model, param_grid=param_grid, </span><br><span class="line">                            scoring=[<span class="string">&quot;neg_mean_absolute_error&quot;</span>, <span class="string">&quot;neg_root_mean_squared_error&quot;</span>, <span class="string">&quot;r2&quot;</span>],</span><br><span class="line">                            refit=plot_metric)</span><br><span class="line">        <span class="keyword">return</span> gscv</span><br><span class="line"></span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    gscv = svr_gscv(param_grid)</span><br><span class="line">    gscv.fit(X_train, y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># grid search results summary</span></span><br><span class="line">    df_gscv = pd.DataFrame.from_dict(gscv.cv_results_)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># creating pivot table</span></span><br><span class="line">    df_pivot_mean = df_gscv.pivot_table(values=<span class="string">f&quot;mean_test_<span class="subst">&#123;plot_metric&#125;</span>&quot;</span>, index=plot_y, columns=plot_x)</span><br><span class="line">    df_pivot_std = df_gscv.pivot_table(values=<span class="string">f&quot;std_test_<span class="subst">&#123;plot_metric&#125;</span>&quot;</span>, index=plot_y, columns=plot_x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># visualization</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_gscv</span>(<span class="params">df_pivot_mean, df_pivot_std, plot_title</span>):</span></span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">        sns.heatmap(df_pivot_mean, cmap=<span class="string">&quot;Blues&quot;</span>, lw=<span class="number">1</span>, cbar=<span class="literal">False</span>, </span><br><span class="line">                    annot=<span class="literal">True</span>, annot_kws=&#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">14</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;right&quot;</span>&#125;,</span><br><span class="line">                    ax=ax)</span><br><span class="line"></span><br><span class="line">        xticks = ax.get_xticks()</span><br><span class="line">        <span class="keyword">if</span> exp_x:</span><br><span class="line">            xticklabels = ax.get_xticklabels()</span><br><span class="line">            ax.set_xticks(xticks)</span><br><span class="line">            ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(x.get_text()):<span class="number">.1</span>e&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticklabels])</span><br><span class="line"></span><br><span class="line">        yticks = ax.get_yticks()</span><br><span class="line">        <span class="keyword">if</span> exp_y:</span><br><span class="line">            yticklabels = ax.get_yticklabels()</span><br><span class="line">            ax.set_yticks(yticks)</span><br><span class="line">            ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(y.get_text()):<span class="number">.2</span>e&#125;</span>&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticklabels], rotation=<span class="number">0</span>)</span><br><span class="line">            ax.tick_params(labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">        font_labels = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>&#125;</span><br><span class="line">        ax.set_xlabel(<span class="string">f&quot;<span class="subst">&#123;plot_x&#125;</span>&quot;</span>, fontdict=font_labels)</span><br><span class="line">        ax.set_ylabel(<span class="string">f&quot;<span class="subst">&#123;plot_y&#125;</span>&quot;</span>, fontdict=font_labels)</span><br><span class="line"></span><br><span class="line">        idx_text = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> idx, y <span class="keyword">in</span> <span class="built_in">zip</span>(df_pivot_std.index, yticks):</span><br><span class="line">            <span class="keyword">for</span> col, x <span class="keyword">in</span> <span class="built_in">zip</span>(df_pivot_std.columns, xticks):</span><br><span class="line">                fontcolor = ax.get_children()[idx_text].get_color()</span><br><span class="line">                ax.text(x, y, <span class="string">f&quot; ± <span class="subst">&#123;df_pivot_std.loc[idx, col]:<span class="number">.2</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                        color=fontcolor, fontsize=<span class="number">14</span>, va=<span class="string">&quot;center&quot;</span>)   </span><br><span class="line">                idx_text += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        fig.suptitle(<span class="string">f&quot;<span class="subst">&#123;plot_title&#125;</span>&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        fig.savefig(<span class="string">f&quot;<span class="subst">&#123;plot_title.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    plot_gscv(df_pivot_mean, df_pivot_std, plot_title)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gscv, df_gscv</span><br></pre></td></tr></table></figure></li></ul><ul><li>이 함수를 이용해 GridSearchCV를 수행합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">param_grid = &#123;<span class="string">&quot;preprocessor__num__polynomial__degree&quot;</span>: [<span class="number">3</span>],</span><br><span class="line">              <span class="string">&quot;svr__kernel&quot;</span>: [<span class="string">&quot;rbf&quot;</span>],</span><br><span class="line">              <span class="string">&quot;svr__C&quot;</span>: [<span class="number">1e-1</span>, <span class="number">1e0</span>, <span class="number">1e1</span>, <span class="number">1e2</span>, <span class="number">1e3</span>], </span><br><span class="line">              <span class="string">&quot;svr__gamma&quot;</span>: np.logspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>)&#125;</span><br><span class="line"></span><br><span class="line">gscv, df_gscv = plot_gscv_svr(X_train, y_train, param_grid,</span><br><span class="line">                     plot_x=<span class="string">&quot;param_svr__gamma&quot;</span>, plot_y=<span class="string">&quot;param_svr__C&quot;</span>, plot_metric=<span class="string">&quot;neg_root_mean_squared_error&quot;</span>, </span><br><span class="line">                     plot_title=<span class="string">&quot;GridSearchCV: SVR&quot;</span>)</span><br></pre></td></tr></table></figure>![](GridSearchCV_ SVR.png)<br></li></ul><ul><li>최적점 주변으로 C와 gamma 범위를 조정합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">param_grid = &#123;<span class="string">&quot;preprocessor__num__polynomial__degree&quot;</span>: [<span class="number">3</span>],</span><br><span class="line">              <span class="string">&quot;svr__kernel&quot;</span>: [<span class="string">&quot;rbf&quot;</span>],</span><br><span class="line">              <span class="string">&quot;svr__C&quot;</span>: np.logspace(<span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>), </span><br><span class="line">              <span class="string">&quot;svr__gamma&quot;</span>: np.logspace(-<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"></span><br><span class="line">gscv, df_gscv = plot_gscv_svr(X_train, y_train, param_grid, exp_x=<span class="literal">True</span>, exp_y=<span class="literal">True</span>,</span><br><span class="line">                     plot_x=<span class="string">&quot;param_svr__gamma&quot;</span>, plot_y=<span class="string">&quot;param_svr__C&quot;</span>, plot_metric=<span class="string">&quot;neg_root_mean_squared_error&quot;</span>, </span><br><span class="line">                     plot_title=<span class="string">&quot;GridSearchCV: SVR (refine 1)&quot;</span>)</span><br></pre></td></tr></table></figure>![](GridSearchCV_ SVR _refine 1_.png)<br></li></ul><ul><li><p>한번 더 조정합니다: 최적점을 찾은 것 같습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">param_grid = &#123;<span class="string">&quot;preprocessor__num__polynomial__degree&quot;</span>: [<span class="number">3</span>],</span><br><span class="line">              <span class="string">&quot;svr__kernel&quot;</span>: [<span class="string">&quot;rbf&quot;</span>],</span><br><span class="line">              <span class="string">&quot;svr__C&quot;</span>: np.logspace(-<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>), </span><br><span class="line">              <span class="string">&quot;svr__gamma&quot;</span>: np.linspace(<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">5</span>)&#125;</span><br><span class="line"></span><br><span class="line">gscv, df_gscv = plot_gscv_svr(X_train, y_train, param_grid, exp_x=<span class="literal">True</span>, exp_y=<span class="literal">True</span>,</span><br><span class="line">                     plot_x=<span class="string">&quot;param_svr__gamma&quot;</span>, plot_y=<span class="string">&quot;param_svr__C&quot;</span>, plot_metric=<span class="string">&quot;neg_root_mean_squared_error&quot;</span>, </span><br><span class="line">                     plot_title=<span class="string">&quot;GridSearchCV: SVR (refine 2)&quot;</span>, figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>![](GridSearchCV_ SVR _refine 2_.png)<br></p></li><li><p>parity plot을 그려봅니다.</p></li><li><p><b>train과 testset의 R2</b>는 각기 <b>0.985</b>, <b>0.459</b>입니다. </p></li><li><p>오버피팅이지만 <b>같은 차수의 선형회귀보다는 R2가 0.1 늘었습니다.</b><br>![](SVR _degree=3, rbf_.png)<br></p></li></ul><h3 id="5-2-3-마음껏-사용"><a href="#5-2-3-마음껏-사용" class="headerlink" title="5.2.3. 마음껏 사용"></a>5.2.3. 마음껏 사용</h3><ul><li>polynomial의 차수가 2차인 경우도 한번 해봅니다.</li><li>이번엔 <b>과정을 동영상으로 캡처</b>했습니다.<br><img src="67_vcv2_01.gif"><br></li></ul><ul><li>2차는 3차일때보다 또 <b>R2가 0.1 정도 상승</b>했습니다.<br>![](SVR _degree=2, rbf_.png)<br></li></ul><ul><li>2차원이라는 한계로 인해 한번에 변수를 두개씩밖에 못바꾸는 아쉬움이 있습니다.</li><li>그럼에도 불구하고 공간상 추세가 보이기 때문에 <b>다음 단계의 아이디어</b>가 생깁니다.</li><li>이렇게 계속 찾아가 보겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/sklearn/">sklearn</category>
      
      <category domain="https://jehyunlee.github.io/tags/machine-learning/">machine learning</category>
      
      
    </item>
    
    <item>
      <title>Validation with Visualization (1)</title>
      <link>https://jehyunlee.github.io/2021/04/02/Python-DS-66-visualcv/</link>
      <guid>https://jehyunlee.github.io/2021/04/02/Python-DS-66-visualcv/</guid>
      <pubDate>Fri, 02 Apr 2021 05:07:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;데이터 시각화는 머신러닝 과정을 확인하기 좋습니다.&lt;/li&gt;
&lt;li&gt;하이퍼파라미터에 따라 확인할 값이 여럿 있고,&lt;/li&gt;
&lt;li&gt;숫자로 확인할 수도 있지만 눈에 잘 들어오지 않아 그림으로 표현해 보았습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>데이터 시각화는 머신러닝 과정을 확인하기 좋습니다.</li><li>하이퍼파라미터에 따라 확인할 값이 여럿 있고,</li><li>숫자로 확인할 수도 있지만 눈에 잘 들어오지 않아 그림으로 표현해 보았습니다.</li></ul><h1 id="1-데이터-amp-분석-설정"><a href="#1-데이터-amp-분석-설정" class="headerlink" title="1. 데이터 &amp; 분석 설정"></a>1. 데이터 &amp; 분석 설정</h1><blockquote><p><a href="https://matplotlib.org/stable/users/whats_new.html">What’s new in Matplotlib 3.4.0</a></p></blockquote><ul><li>필요한 라이브러리들을 불러옵니다.</li><li>업데이트된 matplotlib 버전 3.4.1을 사용합니다.</li><li>새로 생긴 기능을 사용해 볼 것입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">sns.set_palette(<span class="string">&quot;Pastel1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.__verion__</span><br></pre></td></tr></table></figure></li><li>실행 결과 : <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;3.4.1&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>현업 데이터를 가져왔습니다.</li><li><b>범주형 2개</b>, <b>수치형 3개</b>, 400줄짜리 단촐한 데이터입니다.</li><li><b>수치형</b> 변수를 맞추는 regression 문제입니다.</li></ul><ul><li><b>train : test = 8 : 2</b>로 분리합니다.</li><li>제겐 굳이 index를 뽑아서 분리하는 버릇이 있습니다.</li><li>여차할 때 확인해보기 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df_vcv = pd.read_csv(<span class="string">&quot;df_vcv.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">train_portion = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">idx_train = np.random.choice(X.index, size=<span class="built_in">int</span>(X.shape[<span class="number">0</span>]*train_portion))</span><br><span class="line">idx_test = <span class="built_in">list</span>(<span class="built_in">set</span>(X.index) - <span class="built_in">set</span>(idx_train))</span><br><span class="line"></span><br><span class="line">X_train = X.loc[idx_train]</span><br><span class="line">X_test = X.loc[idx_test]</span><br><span class="line"></span><br><span class="line">y_train = y.loc[idx_train]</span><br><span class="line">y_test = y.loc[idx_test]</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-데이터-분포-확인"><a href="#2-데이터-분포-확인" class="headerlink" title="2. 데이터 분포 확인"></a>2. 데이터 분포 확인</h1><ul><li>쪼갠 <b>trainset, testset</b>을 확인합니다.</li><li>데이터 분포를 비율로 그려서 trainset과 testset이 비슷한지 봅니다.</li><li><b>train을 green, test를 magenta로</b> 나란히 그려서 비교합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(ncols=<span class="number">3</span>, nrows=<span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">axs = axes.ravel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, col <span class="keyword">in</span> <span class="built_in">zip</span>(axs, df_vcv.columns):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># X features</span></span><br><span class="line">    <span class="keyword">if</span> col != <span class="string">&quot;target&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> df_vcv[col].dtype == <span class="string">&quot;O&quot;</span>: <span class="comment"># categorical</span></span><br><span class="line">            df_train = df_vcv.loc[idx_train, col].value_counts().reset_index()</span><br><span class="line">            df_test = df_vcv.loc[idx_test, col].value_counts().reset_index()</span><br><span class="line">            </span><br><span class="line">            width_cat = <span class="number">0.4</span></span><br><span class="line">            ax.bar(df_train.index-width_cat/<span class="number">2</span>, df_train[col]/<span class="built_in">len</span>(idx_train), width=width_cat, ec=<span class="string">&quot;g&quot;</span>, fc=<span class="string">&quot;#AAFFAADD&quot;</span>)</span><br><span class="line">            ax.bar(df_test.index+width_cat/<span class="number">2</span>, df_test[col]/<span class="built_in">len</span>(idx_test), width=width_cat, ec=<span class="string">&quot;m&quot;</span>, fc=<span class="string">&quot;#FFAAFFDD&quot;</span>)</span><br><span class="line">            ax.set_xticks(<span class="built_in">list</span>(<span class="built_in">range</span>(df_train.shape[<span class="number">0</span>])))</span><br><span class="line">            ax.set_xticklabels(df_train[<span class="string">&quot;index&quot;</span>].values)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># numerical</span></span><br><span class="line">            bins = np.linspace(df_vcv[col].<span class="built_in">min</span>(), df_vcv[col].<span class="built_in">max</span>(), <span class="number">20</span>)</span><br><span class="line">            bins_center = (bins[:-<span class="number">1</span>] + bins[<span class="number">1</span>:])/<span class="number">2</span></span><br><span class="line">            bins_delta = bins[<span class="number">1</span>] - bins[<span class="number">0</span>]</span><br><span class="line">            counts_train, bins_train = np.histogram(df_vcv.loc[idx_train, col], bins=bins)</span><br><span class="line">            counts_test, bins_test = np.histogram(df_vcv.loc[idx_test, col], bins=bins)</span><br><span class="line">            </span><br><span class="line">            width_num = bins_delta/<span class="number">2</span></span><br><span class="line">            ax.bar(bins_center-width_num/<span class="number">2</span>, counts_train/<span class="built_in">len</span>(idx_train), width=width_num, ec=<span class="string">&quot;g&quot;</span>, fc=<span class="string">&quot;#AAFFAADD&quot;</span>)</span><br><span class="line">            ax.bar(bins_center+width_num/<span class="number">2</span>, counts_test/<span class="built_in">len</span>(idx_test), width=width_num, ec=<span class="string">&quot;m&quot;</span>, fc=<span class="string">&quot;#FFAAFFDD&quot;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># y feature    </span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sns.kdeplot(df_vcv.loc[idx_train, col], color=<span class="string">&quot;g&quot;</span>, fill=<span class="literal">True</span>, ax=ax, label=<span class="string">&quot;train&quot;</span>)</span><br><span class="line">        sns.kdeplot(df_vcv.loc[idx_test, col], color=<span class="string">&quot;m&quot;</span>, fill=<span class="literal">True</span>, ax=ax, label=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> col <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]:</span><br><span class="line">        coltype = <span class="string">&quot;categorical&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        coltype = <span class="string">&quot;numerical&quot;</span></span><br><span class="line">        </span><br><span class="line">    ax.set_title(<span class="string">f&quot;<span class="subst">&#123;col&#125;</span> (<span class="subst">&#123;coltype&#125;</span>)&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">handles, labels = axs[<span class="number">5</span>].get_legend_handles_labels()</span><br><span class="line">axs[<span class="number">2</span>].legend(handles, labels, loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=(<span class="number">1</span>,<span class="number">0.9</span>))    </span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;6_vcv_01.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="6_vcv_01.png"><br></p><h1 id="3-Machine-Learning"><a href="#3-Machine-Learning" class="headerlink" title="3. Machine Learning"></a>3. Machine Learning</h1><ul><li>데이터 전처리와 선형회귀에 필요한 라이브러리를 불러옵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoder</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="comment"># machine learning models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline</span></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-1-Pipeline-구축"><a href="#3-1-Pipeline-구축" class="headerlink" title="3.1. Pipeline 구축"></a>3.1. Pipeline 구축</h2><blockquote><p><a href="https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html">sklearn: Column Transformer with Mixed Types</a></p></blockquote><ul><li>scaler와 one-hot encoder 등을 수행하며 데이터가 바뀌는 과정을 바라볼 수 있습니다.</li><li>변환이 눈과 손에 익지 않았을 때는 유용한 방법이지만 <b>깊이 분석하기엔 한계가 있습니다.</b></li><li>예를 들어 <b>feature importance</b>를 도출할 때, <b>one-hot encoding</b>이 수행된 범주형 인자는 원소 하나하나에 대한 중요도가 나와버려 정작 <b>인자의 중요도</b>를 구하기 어렵습니다.</li><li>체계적으로 분석할 수 있도록 <b>pipeline을 구축합시다.</b></li></ul><ul><li>범주형 데이터와 수치형 데이터에 다른 전처리를 수행합니다.</li><li>sklearn의 <code>set_config(display=&#39;diagram&#39;)</code>을 이용하면 그림으로 볼 수 있습니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linear regression model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear</span>(<span class="params">degree</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># categorical and numerical features</span></span><br><span class="line">    cat_features = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    num_features = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;scaler&quot;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree, </span><br><span class="line">                                                                        include_bias=<span class="literal">True</span>))])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># preprocessor</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features),</span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)</span><br><span class="line">                                                  ])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># modeling</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;linear&quot;</span>, LinearRegression())</span><br><span class="line">                           ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline output</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> set_config</span><br><span class="line">set_config(display=<span class="string">&#x27;diagram&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">model = linear(<span class="number">3</span>)</span><br><span class="line">display(model)</span><br></pre></td></tr></table></figure></li></ul><p><img src="6_vcv_03.png" alt="pipeline 구조"><br></p><ul><li><code>set_config(display=&#39;text&#39;)</code>를 통해 출력 모드를 바꿀 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_config(display=<span class="string">&#x27;text&#x27;</span>) </span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></li><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Pipeline(steps=[(<span class="string">&#x27;preprocessor&#x27;</span>,</span><br><span class="line">                 ColumnTransformer(transformers=[(<span class="string">&#x27;num&#x27;</span>,</span><br><span class="line">                                                  Pipeline(steps=[(<span class="string">&#x27;scaler&#x27;</span>,</span><br><span class="line">                                                                   StandardScaler()),</span><br><span class="line">                                                                  (<span class="string">&#x27;polynomial&#x27;</span>,</span><br><span class="line">                                                                   PolynomialFeatures(degree=3))]),</span><br><span class="line">                                                  [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]),</span><br><span class="line">                                                 (<span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">                                                  OneHotEncoder(sparse=False),</span><br><span class="line">                                                  [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])])),</span><br><span class="line">                (<span class="string">&#x27;linear&#x27;</span>, LinearRegression())])</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-평가-metrics"><a href="#3-2-평가-metrics" class="headerlink" title="3.2. 평가: metrics"></a>3.2. 평가: metrics</h2><ul><li><p>파이프라인으로 구축한 머신러닝 모델의 성능을 평가합니다.</p></li><li><p>평가 지표로는 <b>MAE</b>(mean absolute error), <b>RMSE</b>(root mean squared error), <b>R2</b>(coefficient of determination)를 사용합니다.</p></li><li><p>모델과 데이터를 넣으면 <b>예측결과</b>와 <b>평가지표</b>를 뽑아주는 함수를 만듭니다.</p><details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># evaluation metrics</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error <span class="keyword">as</span> mae_</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error <span class="keyword">as</span> mse_</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score <span class="keyword">as</span> r2_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 평가지표 계산 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metrics</span>(<span class="params">model, X_train, X_test, y_train, y_test</span>):</span></span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    y_pred_train = model.predict(X_train)</span><br><span class="line">    mae_train = mae_(y_train, y_pred_train)</span><br><span class="line">    rmse_train = np.sqrt(mse_(y_train, y_pred_train))</span><br><span class="line">    r2_train = r2_(y_train, y_pred_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    y_pred_test = model.predict(X_test)</span><br><span class="line">    mae_test = mae_(y_test, y_pred_test)</span><br><span class="line">    rmse_test = mse_(y_test, y_pred_test, squared=<span class="literal">False</span>)</span><br><span class="line">    r2_test = r2_(y_test, y_pred_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_pred_train,y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 평가지표 도출</span></span><br><span class="line">y_pred_train, y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test = \</span><br><span class="line">get_metrics(model, X_train, X_test, y_train, y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 평가지표 출력</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;# train dataset&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  MAE : <span class="subst">&#123;mae_train:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  RMSE: <span class="subst">&#123;rmse_train:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  R2  : <span class="subst">&#123;r2_train:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n# test dataset&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  MAE : <span class="subst">&#123;mae_test:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  RMSE: <span class="subst">&#123;rmse_test:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  R2  : <span class="subst">&#123;r2_test:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>실행 결과:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train dataset</span></span><br><span class="line">  MAE : 0.394</span><br><span class="line">  RMSE: 0.537</span><br><span class="line">  R2  : 0.513</span><br><span class="line"></span><br><span class="line"><span class="comment"># test dataset</span></span><br><span class="line">  MAE : 0.427</span><br><span class="line">  RMSE: 0.568</span><br><span class="line">  R2  : 0.379</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-Visualization-Parity-Plot"><a href="#3-3-Visualization-Parity-Plot" class="headerlink" title="3.3. Visualization: Parity Plot"></a>3.3. Visualization: Parity Plot</h2><ul><li>머신러닝 모델의 예측력은 평가 지표와 같은 수치로 도출되지만 충분하지 않습니다.</li><li>어떤 부분이 잘 맞고 어디가 틀린지 확인해야 보완할 수 있습니다.</li><li><b>데이터 시각화</b>를 통해 확인해 봅시다.</li></ul><ul><li>참값과 예측값을 비교하는 방법으로 <b>parity plot</b>을 흔히 사용합니다.</li><li>참값과 예측값이 $$y = x$$에 가까울 수록 좋습니다.</li><li>x와 y축 범위를 일치시켜 그립니다.</li><li><code>return ax</code>로 axes를 받을 수 있도록 설계합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">true, predict, c=<span class="string">&quot;c&quot;</span>, mae=<span class="literal">None</span>, rmse=<span class="literal">None</span>, r2=<span class="literal">None</span>, equal=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                title=<span class="literal">None</span>, xlabel=<span class="string">&quot;true&quot;</span>, ylabel=<span class="string">&quot;predict&quot;</span>, ax=<span class="literal">None</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># if axes not defined, create one.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scatter plot</span></span><br><span class="line">    ax.scatter(true, predict, c=c, s=<span class="number">10</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y limits</span></span><br><span class="line">    min_ = <span class="built_in">min</span>(ax.get_xbound()[<span class="number">0</span>], ax.get_ybound()[<span class="number">0</span>])</span><br><span class="line">    max_ = <span class="built_in">max</span>(ax.get_xbound()[<span class="number">1</span>], ax.get_ybound()[<span class="number">1</span>])</span><br><span class="line">    ax.set_xlim(min_, max_)</span><br><span class="line">    ax.set_ylim(min_, max_)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y ticks</span></span><br><span class="line">    lb, ub = ax.get_ybound()</span><br><span class="line">    </span><br><span class="line">    ticks =[x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> x &gt;= lb <span class="keyword">and</span> x &lt;= ub]</span><br><span class="line">    ax.set_xticks(ticks)</span><br><span class="line">    ax.set_xticklabels(ticks)</span><br><span class="line">    ax.set_yticks(ticks)</span><br><span class="line">    ax.set_yticklabels(ticks)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># grids</span></span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.grid(axis=<span class="string">&quot;both&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> equal:</span><br><span class="line">        ax.plot([lb, ub], [lb, ub], c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels and title</span></span><br><span class="line">    ax.set_xlabel(xlabel, fontsize=<span class="number">16</span>, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontsize=<span class="number">16</span>, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_title(title, fontsize=<span class="number">16</span>, pad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># metrics</span></span><br><span class="line">    ax.text(<span class="number">0.95</span>, <span class="number">0.3</span>, <span class="string">f&quot; MAE =<span class="subst">&#123;mae:<span class="number">0.3</span>f&#125;</span>&quot;</span>,</span><br><span class="line">            transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    ax.text(<span class="number">0.95</span>, <span class="number">0.22</span>, <span class="string">f&quot;RMSE =<span class="subst">&#123;rmse:<span class="number">0.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">            transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    ax.text(<span class="number">0.95</span>, <span class="number">0.14</span>, <span class="string">f&quot;R2 =<span class="subst">&#123;r2:<span class="number">0.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">            transform=ax.transAxes, fontsize=<span class="number">16</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax = plot_parity(y_train, y_pred_train, mae=mae_train, rmse=rmse_train, r2=r2_train, equal=<span class="literal">True</span>)</span><br><span class="line">fig = ax.figure  <span class="comment"># axes가 속한 figure 접근</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;6_vcv_02.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="6_vcv_02.png"><br></p><h2 id="3-4-Visualization-Parity-Plots"><a href="#3-4-Visualization-Parity-Plots" class="headerlink" title="3.4. Visualization: Parity Plots"></a>3.4. Visualization: Parity Plots</h2><ul><li><b>train data와 test 데이터를 함께</b> 그리려고 합니다.</li><li>방금 만든 <code>plot_parity()</code> 함수를 <b>두 번</b> 사용합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parities</span>(<span class="params">X_train, X_test, y_train, y_test, title</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get metrics</span></span><br><span class="line">    y_pred_train, y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test = \</span><br><span class="line">    get_metrics(model, X_train, X_test, y_train, y_test)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># figure prepartion</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>), sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    c_train, c_test = <span class="string">&quot;g&quot;</span>, <span class="string">&quot;m&quot;</span></span><br><span class="line">    axs[<span class="number">0</span>] = plot_parity(y_train, y_pred_train, c_train, </span><br><span class="line">                         mae_train, rmse_train, r2_train, title=<span class="string">f&quot;train&quot;</span>, ax=axs[<span class="number">0</span>])</span><br><span class="line">    min0, max0 = axs[<span class="number">0</span>].get_xbound()</span><br><span class="line">    </span><br><span class="line">    axs[<span class="number">1</span>] = plot_parity(y_test, y_pred_test, c_test, </span><br><span class="line">                         mae_test, rmse_test, r2_test, title=<span class="string">f&quot;test&quot;</span>, ax=axs[<span class="number">1</span>])</span><br><span class="line">    min1, max1 = axs[<span class="number">1</span>].get_xbound()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mis setting</span></span><br><span class="line">    axs[<span class="number">1</span>].set_ylabel(<span class="literal">None</span>)</span><br><span class="line">    min_, max_ = <span class="built_in">min</span>(min0, min1), <span class="built_in">max</span>(max0, max1)</span><br><span class="line">    axs[<span class="number">1</span>].set_xlim(min_, max_)</span><br><span class="line">    axs[<span class="number">1</span>].set_ylim(min_, max_)</span><br><span class="line">    <span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">        ax.plot([min_, max_], [min_, max_], <span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    </span><br><span class="line">    fig.suptitle(title, fontsize=<span class="number">20</span>, ha=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_parities(X_train, X_test, y_train, y_test, <span class="string">&quot;linear regression (degree=3)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="linearregression_degree3_.png"><br></p><ul><li>train, test 결과가 모두 마음에 들지 않습니다.</li><li>선형회귀 차수를 바꿔서 확인합시다.</li><li>먼저, <b>1차 함수</b>를 시도해 봅니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = linear(<span class="number">1</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred_train, y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test = \</span><br><span class="line">get_metrics(model, X_train, X_test, y_train, y_test)</span><br><span class="line"></span><br><span class="line">plot_parities(X_train, X_test, y_train, y_test, <span class="string">&quot;linear regression (degree=1)&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="linearregression_degree1_.png"><br></p><ul><li>역시 별로입니다.</li><li><b>이번에는 5차 함수</b>를 시도합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = linear(<span class="number">5</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pred_train, y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test = \</span><br><span class="line">get_metrics(model, X_train, X_test, y_train, y_test)</span><br><span class="line"></span><br><span class="line">plot_parities(X_train, X_test, y_train, y_test, <span class="string">&quot;linear regression (degree=5)&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="linearregression_degree5_.png"><br></p><ul><li>1, 3, 5차 모두 마음에 들지 않습니다.</li><li><b>차수에 대한 경향</b>을 보면 답에 가까워질 것 같습니다.</li><li><b>Grid Search</b>를 사용하면 좋을 것 같습니다.</li></ul><h2 id="3-5-Grid-Search-polynomial-order"><a href="#3-5-Grid-Search-polynomial-order" class="headerlink" title="3.5. Grid Search: polynomial order"></a>3.5. Grid Search: polynomial order</h2><ul><li>sklearn에서 제공하는 <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html">GridSearchCV</a>는 다음에 씁시다.</li><li>변수가 하나뿐이니 <b>수동</b>으로 바꾸어가면서 성능을 평가합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_metrics</span>(<span class="params">X_train, X_test, y_train, y_test, title</span>):</span></span><br><span class="line">    maes_train, maes_test = [], []</span><br><span class="line">    rmses_train, rmses_test = [], []</span><br><span class="line">    r2s_train, r2s_test = [], []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># polynomial degree</span></span><br><span class="line">    <span class="keyword">for</span> degree <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="comment"># model build</span></span><br><span class="line">        model = linear(degree)</span><br><span class="line">        model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># model evaluation</span></span><br><span class="line">        y_pred_train, y_pred_test, mae_train, mae_test, rmse_train, rmse_test, r2_train, r2_test = \</span><br><span class="line">        get_metrics(model, X_train, X_test, y_train, y_test)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># store metrics</span></span><br><span class="line">        maes_train.append(mae_train)</span><br><span class="line">        maes_test.append(mae_test)</span><br><span class="line">        rmses_train.append(rmse_train)</span><br><span class="line">        rmses_test.append(rmse_test)</span><br><span class="line">        r2s_train.append(r2_train)</span><br><span class="line">        r2s_test.append(r2_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data visualization</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    axs[<span class="number">0</span>].plot(maes_train, maes_test, <span class="string">&quot;ro-&quot;</span>, lw=<span class="number">3</span>)</span><br><span class="line">    axs[<span class="number">1</span>].plot(rmses_train, rmses_test, <span class="string">&quot;go-&quot;</span>, lw=<span class="number">3</span>)</span><br><span class="line">    axs[<span class="number">2</span>].plot(r2s_train, r2s_test, <span class="string">&quot;bo-&quot;</span>, lw=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># numbering: degree</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maes_train)):</span><br><span class="line">        axs[<span class="number">0</span>].text(maes_train[i], maes_test[i], <span class="built_in">str</span>(i+<span class="number">1</span>), ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">14</span>, </span><br><span class="line">                    bbox = &#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;circle&quot;</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;r&quot;</span>&#125;)</span><br><span class="line">        axs[<span class="number">1</span>].text(rmses_train[i], rmses_test[i], <span class="built_in">str</span>(i+<span class="number">1</span>), ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">14</span>, </span><br><span class="line">                    bbox = &#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;circle&quot;</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;g&quot;</span>&#125;)</span><br><span class="line">        axs[<span class="number">2</span>].text(r2s_train[i], r2s_test[i], <span class="built_in">str</span>(i+<span class="number">1</span>), ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">14</span>, </span><br><span class="line">                    bbox = &#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;circle&quot;</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;b&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mis</span></span><br><span class="line">    <span class="keyword">for</span> ax, metric <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;MAE&quot;</span>, <span class="string">&quot;RMSE&quot;</span>, <span class="string">&quot;R2&quot;</span>]):</span><br><span class="line">        min_ = <span class="built_in">min</span>(ax.get_xlim()[<span class="number">0</span>], ax.get_ylim()[<span class="number">0</span>])</span><br><span class="line">        max_ = <span class="built_in">max</span>(ax.get_xlim()[<span class="number">1</span>], ax.get_ylim()[<span class="number">1</span>])</span><br><span class="line">        ax.plot([min_, max_], [min_, max_], <span class="string">&quot;-k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">        ax.set_xlim(min_, max_)</span><br><span class="line">        ax.set_ylim(min_, max_)</span><br><span class="line">        ax.set_title(metric, pad=<span class="number">12</span>)</span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;train&quot;</span>)</span><br><span class="line">        ticks = [<span class="built_in">round</span>(x,<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> x &lt;= ax.get_xbound()[<span class="number">1</span>] <span class="keyword">and</span>  x &gt;= ax.get_xbound()[<span class="number">0</span>]]</span><br><span class="line">        ax.set_xticks(ticks)</span><br><span class="line">        ax.set_xticklabels(ticks)</span><br><span class="line">        ax.set_yticks(ticks)</span><br><span class="line">        ax.set_yticklabels(ticks)</span><br><span class="line">        ax.grid()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    axs[<span class="number">0</span>].set_ylabel(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fig.suptitle(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title.replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="polynomialdegreevsmetrics.png"><br></p><ul><li>가로축은 trainset, 세로축은 testset입니다.</li><li><b>차수</b>가 거듭될수록 MAE와 RMSE, R2 모두 overfitting이 관찰됩니다.</li><li><b>1차</b>나 <b>2차</b>를 고르면 되나 싶지만, 한번 더 확인합시다.</li></ul><ul><li>train과 test 데이터 분할을 다시 해서 확인합니다.</li><li>split에 사용된 numpy random seed를 교체해서 데이터를 다시 만들고 똑같이 진행합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train_2 = np.random.choice(X.index, size=<span class="built_in">int</span>(X.shape[<span class="number">0</span>]*train_portion))</span><br><span class="line">idx_test_2 = <span class="built_in">list</span>(<span class="built_in">set</span>(X.index) - <span class="built_in">set</span>(idx_train_2))</span><br><span class="line"></span><br><span class="line">X_train_2 = X.loc[idx_train_2]</span><br><span class="line">X_test_2 = X.loc[idx_test_2]</span><br><span class="line"></span><br><span class="line">y_train_2 = y.loc[idx_train_2]</span><br><span class="line">y_test_2 = y.loc[idx_test_2]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_metrics(X_train_2, X_test_2, y_train_2, y_test_2, <span class="string">&quot;polynomial degree vs metrics (2)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="polynomialdegreevsmetrics_2_.png"><br></p><ul><li>1차보다 2차가 $$y = x$$에 가깝습니다.</li><li>그런데 그게 문제가 아닐 것 같습니다. 거동이 완전히 바뀌었습니다.</li><li><b>데이터에 따른 편차</b>가 상당히 큽니다.</li></ul><h2 id="3-6-Grid-Search-Cross-Validation-polynomial-order"><a href="#3-6-Grid-Search-Cross-Validation-polynomial-order" class="headerlink" title="3.6. Grid Search Cross Validation: polynomial order"></a>3.6. Grid Search Cross Validation: polynomial order</h2><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html">sklearn: GridSearchCV</a></p></blockquote><ul><li>그런데 하나 잊은 것이 있습니다.</li><li><b>test data는 최종 검증용</b>으로만 사용해야지, 이렇게 성능을 테스트셋에 맞추면 결국 <b>테스트셋에 오버피팅될 뿐</b>입니다.</li><li>이건 안봤다고 치고 덮어놓고, <b>train data</b>만 가지고 최적을 찾아봅시다.</li><li><b>Grid Search</b> + <b>Cross Validation</b>이 필요합니다.</li></ul><ul><li><b>다항식의 차수</b>만 바꾸면서 각각의 <code>cross validataion score</code>를 측정합니다.</li><li><code>cv=5</code>로 다섯 번 수행한 교차검증의 <b>평균</b>과 <b>표준편차</b>를 구합니다.</li><li>성능이 좋으려면 <b>평균</b>이 높아야 하고, <b>표준편차</b>는 작아야 합니다.</li><li>교차검증을 신뢰하려면 적어도 <b>표준편차</b>라도 작아야 합니다.</li></ul><ul><li>과연 그럴지 확인합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_cv</span>(<span class="params">X_train, y_train, title</span>):</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># polynomial degree</span></span><br><span class="line">    <span class="keyword">for</span> degree <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="comment"># model build</span></span><br><span class="line">        model = linear(degree)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cross validation</span></span><br><span class="line">        <span class="keyword">for</span> scoring, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;neg_mean_absolute_error&quot;</span>, <span class="string">&quot;neg_mean_squared_error&quot;</span>, <span class="string">&quot;r2&quot;</span>], axs):</span><br><span class="line">            scores = cross_val_score(model, X_train, y_train, scoring=scoring, cv=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> scoring.startswith(<span class="string">&quot;neg_&quot;</span>):</span><br><span class="line">                scores = -scores</span><br><span class="line"></span><br><span class="line">            <span class="comment"># bar plot</span></span><br><span class="line">            cvs = ax.bar(degree, scores.mean()) </span><br><span class="line">            <span class="comment"># bar label : bar마다 데이터값 표기</span></span><br><span class="line">            ax.bar_label(cvs, fmt=<span class="string">&quot;%.2f&quot;</span>, fontsize=<span class="number">14</span>, padding=<span class="number">5</span>)</span><br><span class="line">            <span class="comment"># error bar 표현</span></span><br><span class="line">            ax.errorbar(degree, scores.mean(), yerr=scores.std(), </span><br><span class="line">                        ecolor=<span class="string">&quot;darkgray&quot;</span>, capsize=<span class="number">5</span>, capthick=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title_, ax <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&quot;MAE&quot;</span>, <span class="string">&quot;RMSE&quot;</span>, <span class="string">&quot;R2&quot;</span>], axs):</span><br><span class="line">        ax.set_title(title_, pad=<span class="number">12</span>)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;y&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>, ls=<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        xticks = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels(xticks)</span><br><span class="line"></span><br><span class="line">    fig.suptitle(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;title.replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;_&#x27;</span>)&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><code>ax.bar()</code>에 <code>yerr</code>를 사용하면 굳이 <code>ax.errorbar()</code> 없이도 에러바 표현이 가능합니다.</li><li>그러나 이 경우 모처럼 matplotlib 3.4에 처음 도입된 <b><code>ax.bar_label()</code></b>이 <b>errorbar 위</b>에 붙어 보기 힘듭니다.</li></ul><ul><li>Grid Search 결과를 곧장 그려봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_cv(X_train, y_train, <span class="string">&quot;polynomial order vs metrics (cross validation)&quot;</span>)</span><br></pre></td></tr></table></figure><img src="polynomialordervsmetrics_crossvalidation_.png"><br></li></ul><ul><li>바꾸었던 데이터를 적용해 봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_cv(X_train, y_train, <span class="string">&quot;polynomial order vs metrics 2 (cross validation)&quot;</span>)</span><br></pre></td></tr></table></figure><img src="polynomialordervsmetrics2_crossvalidation_.png"><br></li></ul><ul><li>두 경우 모두, 결과를 신뢰하기에는 RMSE와 R2의 <b>표준편차가 너무나 큽니다.</b></li><li>특히 MAE보다 RMSE의 표준편차가 크다는 점에서 <b>이상치의 역할이 큼</b>을 짐작할 수 있습니다.</li><li>5차에서는 <b>$$R^2 &lt; 0$$</b> 마저 등장하는데, 모든 범위에서 선형 회귀가 힘을 쓰지 못합니다.</li></ul><ul><li>선형 회귀가 엉망이라는 점에서 <b>비선형성이 매우 강하다</b>는 추측을 할 수 있습니다.</li><li>다음 글에서는 <b>비선형 회귀</b>에 도전하겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/sklearn/">sklearn</category>
      
      <category domain="https://jehyunlee.github.io/tags/machine-learning/">machine learning</category>
      
      
    </item>
    
    <item>
      <title>사람을 향한 데이터 시각화</title>
      <link>https://jehyunlee.github.io/2021/03/29/Python-DS-65-dni2021/</link>
      <guid>https://jehyunlee.github.io/2021/03/29/Python-DS-65-dni2021/</guid>
      <pubDate>Mon, 29 Mar 2021 05:15:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;D&amp;amp;I Learning Day 2021&lt;/b&gt;에서 발표한 내용입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/Se</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><b>D&amp;I Learning Day 2021</b>에서 발표한 내용입니다.</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/SeEj_Glttys" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li><p><b>누군가에게 보이기 위한 작업</b>으로서의 <b>데이터 시각화</b>롤 고민했고,<br><b>최선의 의사 결정을 위한 조언</b>이라는 결론을 얻었습니다.</p></li><li><p>예시를 위해 <a href="https://jehyunlee.github.io/2021/03/27/Python-DS-64-kr_pop_sn/">지난 글</a>을 작성했고<br>업무적, 기술적인 면이 아닌 <b>시각적인 면</b>에서 제 의도와 이유를 설명하는 발표입니다.</p></li><li><p><b>다양성과 포용성을 위한 AI</b>라는 취지의 행사입니다.</p><ul><li>요청받은 발표가 주제와는 조금 거리가 있는 듯 하여 처음에는 고사했습니다.</li><li>하지만 주관사인 <a href="http://aifactory.space/">(주)인공지능팩토리</a>의 <a href="https://tykimos.github.io/">김태영 대표님</a>의 설득에 발표하게 되었습니다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Visualization with Messages</title>
      <link>https://jehyunlee.github.io/2021/03/27/Python-DS-64-kr_pop_sn/</link>
      <guid>https://jehyunlee.github.io/2021/03/27/Python-DS-64-kr_pop_sn/</guid>
      <pubDate>Sat, 27 Mar 2021 12:29:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;데이터 시각화는 예쁜 그림에 머물러서는 안 된다고 생각합니다.&lt;/li&gt;
&lt;li&gt;데이터 분석의 일환인 만큼 분석의 목적에 충실해야 하는 것은 물론이고,&lt;/li&gt;
&lt;li&gt;데이터 시각화를 수행하는 사람만큼 데이터를 깊이 파는 사람이 없습니다</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>데이터 시각화는 예쁜 그림에 머물러서는 안 된다고 생각합니다.</li><li>데이터 분석의 일환인 만큼 분석의 목적에 충실해야 하는 것은 물론이고,</li><li>데이터 시각화를 수행하는 사람만큼 데이터를 깊이 파는 사람이 없습니다.</li><li><b>최고의 조언자로서의 데이터 시각화</b>에 도전해봅니다.</li></ul><h1 id="1-데이터"><a href="#1-데이터" class="headerlink" title="1. 데이터"></a>1. 데이터</h1><blockquote><p><a href="https://jehyunlee.github.io/2020/12/17/Python-DS-48-suneung/">Pega Devlog: 수능 Trend Visualization</a><br><a href="https://www.data.go.kr/data/15001549/fileData.do">한국교육과정평가원 대학수학능력시험 정보</a><br><a href="https://kosis.kr/statisticsList/statisticsListIndex.do?menuId=M_01_01&vwcd=MT_ZTITLE&parmTabId=M_01_01&outLink=Y&parentId=A.1;A_3.2;#A_3.2">국가통계포털</a></p></blockquote><p><img src="https://jehyunlee.github.io/2020/12/24/Python-DS-50-suneung3/50_sn_6.png"></p><ul><li><a href="https://jehyunlee.github.io/2020/12/17/Python-DS-48-suneung/">수능 데이터</a>를 가지고 시각화를 수행한 적이 있습니다.</li><li>여기에 <a href="https://kosis.kr/statisticsList/statisticsListIndex.do?menuId=M_01_01&vwcd=MT_ZTITLE&parmTabId=M_01_01&outLink=Y&parentId=A.1;A_3.2;#A_3.2">인구 데이터</a>를 얹어서 출생아 수와의 연관성을 그려봅시다.</li></ul><ul><li>데이터는 여기서 다운받을 수 있습니다.<ul><li><a href="df_sn.csv">수능 데이터 다운로드</a></li><li><a href="kr_birth.csv">출생아 수 데이터 다운로드</a></li></ul></li></ul><ul><li>이 데이터를 <b>추세를 보여달라</b>는 요청에 따라 시각화했다고 가정했습니다.</li></ul><h1 id="2-시각화-결과물"><a href="#2-시각화-결과물" class="headerlink" title="2. 시각화 결과물"></a>2. 시각화 결과물</h1><ul><li>결과 그림을 먼저 보여드리고, 제 생각의 과정을 나중에 말씀드리겠습니다.</li></ul><ul><li>시각화 목적은 <b>저출산 추세를 반영한 20년 뒤 대학 등 교육 정책 수립</b>으로 가정했습니다.</li><li>단순하게 년도별 출산률과 수능 지원자 수를 나열하고 싶지 않았습니다.</li><li><b>선명한 메시지를 도출</b>해서 <b>적극적으로 전달</b>하고자 했습니다.</li></ul><h2 id="2-1-시각화-결과물-1-요청에-충실"><a href="#2-1-시각화-결과물-1-요청에-충실" class="headerlink" title="2.1. 시각화 결과물 (1) - 요청에 충실"></a>2.1. 시각화 결과물 (1) - 요청에 충실</h2><p><img src="64_kr_pop_sn_15.png" alt="ver. 1"><br></p><ul><li><b>추세를 보여달라</b>는 요청에 충실한 결과물일 것입니다.</li><li>출생년도와 이 해에 태어난 학생들이 수능을 치르는 학년도를 겹쳐서 <b>비교하기 편하게</b> 그렸습니다.</li><li>그림 뿐 아니라 <b>x축도 어긋나게 겹쳐</b> 한눈에 보이고자 하였습니다.</li></ul><ul><li><b>가장 최근의 실제 데이터</b>는 2002년도에 태어난 학생들이 치른 2021학년도 수능입니다.</li><li>이 데이터와 <b>2021년 출산 데이터</b>를 바탕으로 <b>2039학년도 지원자를 예측</b>했습니다.</li><li><b>지원자 45% 감소</b>라는 충격적인 결론입니다.</li></ul><ul><li>그런데 조금 이상합니다.</li><li><b>“태어난 학생 전체가 수능을 본다고?”</b>라는 합리적 의심이 가능합니다.</li><li>심지어 과거엔 <b>태어난 학생보다 더 많이</b> 수능을 보기도 했습니다. </li></ul><h2 id="2-2-시각화-결과물-2-의구심-해소"><a href="#2-2-시각화-결과물-2-의구심-해소" class="headerlink" title="2.2. 시각화 결과물 (2) - 의구심 해소"></a>2.2. 시각화 결과물 (2) - 의구심 해소</h2><p><img src="64_kr_pop_sn_16.png" alt="ver. 2"><br></p><ul><li>수능 데이터에 포함된 그룹별 데이터를 함께 표시했습니다.</li><li>재수생을 비롯한 <b>졸업생</b> 비중이 상당하고, <b>재학생(고3)</b>은 80%가 채 되지 않습니다.</li><li>저 재학생 중 일부가 졸업생으로 다시 수능을 치릅니다. 이제 이해됩니다.</li></ul><ul><li>의구심은 해소됐지만 시각화의 목적은 이게 아닐겁니다.</li><li>앞으로 <b>교육 정책</b>을 어쩔거냐를 생각할 때 과거보다 미래가 중요합니다.</li></ul><h2 id="2-3-시각화-결과물-3-메시지-전달"><a href="#2-3-시각화-결과물-3-메시지-전달" class="headerlink" title="2.3. 시각화 결과물 (3) - 메시지 전달"></a>2.3. 시각화 결과물 (3) - 메시지 전달</h2><p><img src="64_kr_pop_sn_17.png" alt="ver. 3"><br></p><ul><li>지원자 비중은 <b>2021년 것</b>만 텍스트로 표기했습니다.</li><li><b>“이게 말이 돼?”</b>라는 의구심에 대한 대응으로 충분합니다.</li><li>과거 의 지원자 비중 변화 추세까지 전달할 필요는 없기 때문입니다.</li></ul><ul><li><b>향후 추세에 집중</b>했습니다.</li><li>과거의 패턴으로부터 <b>수능 지원자 수 변동은 출생자 수와 밀접한 연관</b>이 있습니다.</li><li>앞으로도 그렇다고 봤을 때, <b>2034년까지는 현 수준</b>을 오르내릴 것입니다.</li><li>문제는 그 뒤입니다. <b>5년간 45%가량 급감</b>합니다.</li></ul><ul><li><b>14년 뒤가 진짜 위기이니 그 전에 미리 잘 준비하세요</b>라는 의미를 담고자 했습니다.</li><li><b>현상 유지 구간</b>은 <b>불편한 느낌</b>이 들도록 <b>회색</b>을 깔고</li><li><b>급락 구간</b>은 <b>위기감</b>을 느끼도록 붉은색을 깔았습니다.</li><li>텍스트를 노랗게 해봤지만 빨강이 더 위태로워보여 주의력을 일부 희생했습니다.</li></ul><h1 id="3-시각화-코드"><a href="#3-시각화-코드" class="headerlink" title="3. 시각화 코드"></a>3. 시각화 코드</h1><ul><li>시각화 단계별로 코드를 공개합니다.</li><li>첫 코드는 17줄, 마지막 코드는 165줄입니다.</li></ul><h2 id="3-1-시각화-세팅"><a href="#3-1-시각화-세팅" class="headerlink" title="3.1. 시각화 세팅"></a>3.1. 시각화 세팅</h2><ul><li>pandas로 읽고 matplotlib으로 그렸습니다.</li><li>seaborn은 기본 설정에만 사용했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 한글 사용 설정 </span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;NanumGothic&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 데이터</span></span><br><span class="line">df_birth = pd.read_csv(<span class="string">&quot;kr_birth.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 데이터</span></span><br><span class="line">df_sn = pd.read_csv(<span class="string">&quot;df_sn.csv&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>데이터 확인 부분은 생략합니다.</li><li>직접 해보시면 좋을 것 같습니다.</li></ul><h2 id="3-2-데이터-확인"><a href="#3-2-데이터-확인" class="headerlink" title="3.2. 데이터 확인"></a>3.2. 데이터 확인</h2><ul><li>여러 컬럼 중 가장 중요한 <b>년도, 출생아 수, 수능 지원자 수</b>만 그립니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.plot(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], c=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y축 범위 지정</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_02.png"><br> </p><h2 id="3-3-spines-정리-grid-추가-선-굵게"><a href="#3-3-spines-정리-grid-추가-선-굵게" class="headerlink" title="3.3. spines 정리, grid 추가, 선 굵게"></a>3.3. spines 정리, grid 추가, 선 굵게</h2><ul><li>불필요한 구성요소를 모두 제거합니다.</li><li><b>출생</b>은 <b>진한 갈색<code>saddlebrown</code></b>,</li><li><b>수능</b>은 <b>검정<code>k</code></b>으로 통일합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.plot(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], c=color_birth, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y축 범위 지정</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_03.png"><br> </p><h2 id="3-4-x축-눈금-중첩-준비"><a href="#3-4-x축-눈금-중첩-준비" class="headerlink" title="3.4. x축 눈금 중첩 준비"></a>3.4. x축 눈금 중첩 준비</h2><blockquote><p><a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes.html">matplotlib: Parasite Axes demo</a></p></blockquote><ul><li><p>두 데이터가 19년의 시차를 두고 형태가 비슷합니다.</p></li><li><p>기왕이면 겹쳐서 <b>연관성</b>을 더 명확히 보여주면 좋겠습니다.</p></li><li><p><b>x축도 가까이</b> 놓고 19년 시차를 한눈에 보여줄 준비를 합니다.</p></li><li><p><code>ax_sn = ax.twiny()</code>로 y축을 공유하는 복제 axes를 만듭니다.</p></li><li><p>수능 데이터는 여기에 다 몰아서 표시합니다.</p></li><li><p>이 axes(ax_sn)도 불필요한 요소를 모두 지웁니다.</p><details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.plot(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], c=color_birth, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># y축 범위 지정</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_04.png"><br> </p><ul><li>처음에는 유사한 <a href="https://matplotlib.org/stable/gallery/axisartist/demo_parasite_axes.html">matplotlib 예제</a>를 적용하려고 했습니다.</li><li>그런데 왠지 <code>hostaxes</code>는 <code>spines[].set_visible(False)</code>가 적용되지 않습니다.</li><li>확인해보면 적용은 되었다고 나오는데 여전히 시야에 보여서 방법을 바꾼 것입니다.</li></ul><h2 id="3-5-x축-눈금-설정-완료"><a href="#3-5-x축-눈금-설정-완료" class="headerlink" title="3.5. x축 눈금 설정 완료"></a>3.5. x축 눈금 설정 완료</h2><ul><li>위에 올라붙은 수능 axes(ax_sn)를 아래로 내립니다.</li><li>구분하기 좋도록 두 spines와 ticks, ticklabels를 각자의 색으로 칠합니다.</li><li>19년을 옮겨 범위까지 맞춰주면 연관성이 명확히 드러납니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.plot(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], c=color_birth, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_05.png"><br> </p><h2 id="3-6-yticklabels-xlabels-title-색칠"><a href="#3-6-yticklabels-xlabels-title-색칠" class="headerlink" title="3.6. yticklabels, xlabels, title, 색칠"></a>3.6. yticklabels, xlabels, title, 색칠</h2><ul><li>x축 제목을 붙입니다.</li><li>x축 눈금 아래에 붙이는 것이 일반적이지만, 우리 그림에서는 공간이 없습니다.</li><li><b>x축 오른쪽</b>에 붙입시다. <b>출생은 출생 색</b>, <b>수능은 수능 색</b>으로요.</li><li>출생자 수 아래엔 연한 노란색을 칠하고 y축 눈금도 붙입니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, label=<span class="string">&quot;출생&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">ax.plot(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], c=color_birth, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_07.png"><br> </p><h2 id="3-7-시간의-흐름-강조-1-출생-추세-그레이디언트-적용"><a href="#3-7-시간의-흐름-강조-1-출생-추세-그레이디언트-적용" class="headerlink" title="3.7. 시간의 흐름 강조 1: 출생 추세 그레이디언트 적용"></a>3.7. 시간의 흐름 강조 1: 출생 추세 그레이디언트 적용</h2><ul><li>정지된 그림의 최대 단점은 <b>변화를 담기가 어렵다</b>는 점입니다.</li><li>그럼에도 불구하고 <b>시간이 흐르는 모습</b>을 표현하겠습니다.</li></ul><ul><li>가장 고전적인 방법은 <b>화살표</b>를 사용하는 것이지만 촌스럽게 느껴집니다.</li><li>최근 연구에 따르면 <b>화살표보다 그레이디언트가 더 효과적</b>으로 움직임을 전달한다고 합니다.</li><li>구체적으로는 시신경의 반응량이 더 많다고 합니다.</li></ul><ul><li>matplotlib에서 line plot에 그레이디언트를 표현하는 방법은,</li><li><b>짧은 도막으로 나누고 각각을 다른 색으로 칠하는 것</b>입니다.</li><li><b>순차적으로 변하는 색상은 colormap</b>에서 가져오면 됩니다.</li><li>맨 마지막에는 동그라미를 달아서 머리를 알려줍니다. </li><li><b>변화에 대한 인지능력이 향상</b>됩니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, label=<span class="string">&quot;출생&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=color_sn, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_10.png"><br> </p><h2 id="3-8-시간의-흐름-강조-2-수능-추세-그레이디언트-적용"><a href="#3-8-시간의-흐름-강조-2-수능-추세-그레이디언트-적용" class="headerlink" title="3.8. 시간의 흐름 강조 2: 수능 추세 그레이디언트 적용"></a>3.8. 시간의 흐름 강조 2: 수능 추세 그레이디언트 적용</h2><ul><li>같은 기법을 수능 데이터에도 적용합니다.</li><li>그런데 그냥 그리면 출생 데이터와 너무 겹쳐 깨끗해보이지 않습니다.</li><li>수능 데이터에 <b>하얀 윤곽선</b>을 달아줍니다.</li><li><b>조금 굵은 선을 밑에 깔아주면</b> 쉽게 그릴 수 있습니다.</li></ul><ul><li>하나 더, 적용한 컬러맵(Greys)은 <b>끝 지점이 흰색</b>입니다.</li><li>line plot에 흰색이 들어가면 알아보기 힘들게 됩니다. </li><li><b>기준점을 조정</b>해 흰색이 보이지 않게 합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">greys = cm.get_cmap(<span class="string">&quot;Greys&quot;</span>, lut=df_sn.shape[<span class="number">0</span>] + <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_sn.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax_sn.plot(df_sn.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[i:i+<span class="number">1</span>, <span class="string">&quot;apply&quot;</span>], c=greys(i + <span class="number">10</span>), lw=<span class="number">5</span>, zorder=<span class="number">3</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=color_sn, zorder=<span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수 윤곽선</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">11</span>, zorder=<span class="number">2</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">300</span>, c=<span class="string">&quot;w&quot;</span>, zorder=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.04</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_12.png"><br> </p><h2 id="3-9-2002년과-2020년-출생자-2021학년도와-2039학년도-수능-지원자"><a href="#3-9-2002년과-2020년-출생자-2021학년도와-2039학년도-수능-지원자" class="headerlink" title="3.9. 2002년과 2020년 출생자, 2021학년도와 2039학년도 수능 지원자"></a>3.9. 2002년과 2020년 출생자, 2021학년도와 2039학년도 수능 지원자</h2><ul><li>명확한 전달을 위해 <b>데이터를 숫자로 표기</b>합니다.</li><li><code>ax.annotate()</code>와 <code>ax.text()</code>를 함께 사용합니다.</li><li><code>bbox=</code> 파라미터로 배경에 모서리가 둥근 사각형을 배치해서 잘 띄이게 합니다.</li><li><b>범례(legend)를 따로 달지 않습니다.</b></li><li>데이터 옆에 굵은 글씨로 데이터 이름을 적어줍니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">greys = cm.get_cmap(<span class="string">&quot;Greys&quot;</span>, lut=df_sn.shape[<span class="number">0</span>] + <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_sn.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax_sn.plot(df_sn.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[i:i+<span class="number">1</span>, <span class="string">&quot;apply&quot;</span>], c=greys(i + <span class="number">10</span>), lw=<span class="number">5</span>, zorder=<span class="number">3</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=color_sn, zorder=<span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수 윤곽선</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">11</span>, zorder=<span class="number">2</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">300</span>, c=<span class="string">&quot;w&quot;</span>, zorder=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년(index 29), 2020년(index 47) 출생자 데이터 추가</span></span><br><span class="line">font_annot = &#123;<span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;alpha&quot;</span>:<span class="number">0.8</span>&#125;</span><br><span class="line">font_textyear = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">annot_birth_y = <span class="number">8e5</span></span><br><span class="line">annot_birth_offset = <span class="number">5e4</span></span><br><span class="line">annot_birth_yearoffset = <span class="number">1e5</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">29</span>, <span class="number">47</span>]:</span><br><span class="line">    <span class="comment"># 출생자</span></span><br><span class="line">    ax.annotate(<span class="built_in">format</span>(df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">                xy=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>]+annot_birth_offset), </span><br><span class="line">                xytext=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], annot_birth_y),</span><br><span class="line">                arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">                color=color_birth, alpha=<span class="number">0.8</span></span><br><span class="line">               )</span><br><span class="line">    ax.text(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], </span><br><span class="line">            annot_birth_y + annot_birth_yearoffset, </span><br><span class="line">            <span class="built_in">str</span>(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>]), </span><br><span class="line">            transform=ax.transData, </span><br><span class="line">            fontdict=font_textyear, </span><br><span class="line">            color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수 legend    </span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.79</span>, <span class="string">&quot;출생자 수&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021학년도 수능 지원자 추가</span></span><br><span class="line">annot_sn_y = <span class="number">17e4</span></span><br><span class="line">annot_sn_offset = -<span class="number">5e4</span></span><br><span class="line">annot_sn_year_offset = -<span class="number">1e5</span></span><br><span class="line">ax_sn.annotate(<span class="built_in">format</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">               xy=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>]+annot_sn_offset), </span><br><span class="line">               xytext=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2021</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2021&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년에서 2020년까지 출생자 감소율</span></span><br><span class="line">delta_birth_ratio = df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>]/df_birth.loc[<span class="number">29</span>, <span class="string">&quot;num_birth&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 수</span></span><br><span class="line">apply_2039 = <span class="built_in">int</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>] * delta_birth_ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 추가</span></span><br><span class="line">ax_sn.annotate(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">format</span>(apply_2039, <span class="string">&#x27;,&#x27;</span>)&#125;</span> 명 (?)&quot;</span>, </span><br><span class="line">               xy=(<span class="number">2039</span>, df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>] + annot_sn_offset), </span><br><span class="line">               xytext=(<span class="number">2039</span>, annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2039</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2039&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 legend</span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.17</span>, <span class="string">&quot;수능 지원자&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_14.png"><br> </p><h2 id="3-10-ver-1-감소량을-표시합니다"><a href="#3-10-ver-1-감소량을-표시합니다" class="headerlink" title="3.10. ver 1. 감소량을 표시합니다."></a>3.10. ver 1. 감소량을 표시합니다.</h2><ul><li><code>ax.text()</code>는 화살표 안에 글자를 담을 수 있습니다.</li><li>-45%라는 <b>감소량을 강조</b>합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">greys = cm.get_cmap(<span class="string">&quot;Greys&quot;</span>, lut=df_sn.shape[<span class="number">0</span>] + <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_sn.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax_sn.plot(df_sn.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[i:i+<span class="number">1</span>, <span class="string">&quot;apply&quot;</span>], c=greys(i + <span class="number">10</span>), lw=<span class="number">5</span>, zorder=<span class="number">3</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=color_sn, zorder=<span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수 윤곽선</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">11</span>, zorder=<span class="number">2</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">300</span>, c=<span class="string">&quot;w&quot;</span>, zorder=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년(index 29), 2020년(index 47) 출생자 데이터 추가</span></span><br><span class="line">font_annot = &#123;<span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;alpha&quot;</span>:<span class="number">0.8</span>&#125;</span><br><span class="line">font_textyear = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">annot_birth_y = <span class="number">8e5</span></span><br><span class="line">annot_birth_offset = <span class="number">5e4</span></span><br><span class="line">annot_birth_yearoffset = <span class="number">1e5</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">29</span>, <span class="number">47</span>]:</span><br><span class="line">    <span class="comment"># 출생자</span></span><br><span class="line">    ax.annotate(<span class="built_in">format</span>(df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">                xy=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>]+annot_birth_offset), </span><br><span class="line">                xytext=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], annot_birth_y),</span><br><span class="line">                arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">                color=color_birth, alpha=<span class="number">0.8</span></span><br><span class="line">               )</span><br><span class="line">    ax.text(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], </span><br><span class="line">            annot_birth_y + annot_birth_yearoffset, </span><br><span class="line">            <span class="built_in">str</span>(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>]), </span><br><span class="line">            transform=ax.transData, </span><br><span class="line">            fontdict=font_textyear, </span><br><span class="line">            color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수 legend    </span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.79</span>, <span class="string">&quot;출생자 수&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021학년도 수능 지원자 추가</span></span><br><span class="line">annot_sn_y = <span class="number">17e4</span></span><br><span class="line">annot_sn_offset = -<span class="number">5e4</span></span><br><span class="line">annot_sn_year_offset = -<span class="number">1e5</span></span><br><span class="line">ax_sn.annotate(<span class="built_in">format</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">               xy=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>]+annot_sn_offset), </span><br><span class="line">               xytext=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2021</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2021&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년에서 2020년까지 출생자 감소율</span></span><br><span class="line">delta_birth_ratio = df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>]/df_birth.loc[<span class="number">29</span>, <span class="string">&quot;num_birth&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 수</span></span><br><span class="line">apply_2039 = <span class="built_in">int</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>] * delta_birth_ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 추가</span></span><br><span class="line">ax_sn.annotate(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">format</span>(apply_2039, <span class="string">&#x27;,&#x27;</span>)&#125;</span> 명 (?)&quot;</span>, </span><br><span class="line">               xy=(<span class="number">2039</span>, df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>] + annot_sn_offset), </span><br><span class="line">               xytext=(<span class="number">2039</span>, annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2039</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2039&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 legend</span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.17</span>, <span class="string">&quot;수능 지원자&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 감소율 추가</span></span><br><span class="line">change_birth_ratio = <span class="string">f&quot;<span class="subst">&#123;delta_birth_ratio*<span class="number">100</span>-<span class="number">100</span>:<span class="number">.0</span>f&#125;</span> %&quot;</span></span><br><span class="line">change_birth_ratio_pos_birth = (<span class="number">2002</span> + <span class="number">2020</span>)/<span class="number">2</span></span><br><span class="line">ax.text(change_birth_ratio_pos_birth, annot_birth_y, change_birth_ratio,</span><br><span class="line">        fontdict=font_textyear, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">        bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;rarrow&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;r&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 예상 감소율 추가</span></span><br><span class="line">change_birth_ratio_pos_sn = (<span class="number">2021</span> + <span class="number">2039</span>)/<span class="number">2</span></span><br><span class="line">ax_sn.text(change_birth_ratio_pos_sn, annot_sn_y, change_birth_ratio,</span><br><span class="line">           fontdict=font_textyear, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">           bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;rarrow&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;linestyle&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_15.png"><br></p><h2 id="3-11-ver-2-구성요소를-표시합니다"><a href="#3-11-ver-2-구성요소를-표시합니다" class="headerlink" title="3.11. ver 2. 구성요소를 표시합니다."></a>3.11. ver 2. 구성요소를 표시합니다.</h2><ul><li>“죄다 수능을 본다고?”라는 의문에 대한 답을 미리 제시합니다.</li><li><code>ax.fill_between()</code>으로 영역을 칠하고, <b>구석에 범례를 삽입</b>합니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">greys = cm.get_cmap(<span class="string">&quot;Greys&quot;</span>, lut=df_sn.shape[<span class="number">0</span>] + <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_sn.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax_sn.plot(df_sn.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[i:i+<span class="number">1</span>, <span class="string">&quot;apply&quot;</span>], c=greys(i + <span class="number">10</span>), lw=<span class="number">5</span>, zorder=<span class="number">3</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=color_sn, zorder=<span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 구성</span></span><br><span class="line">ged = ax_sn.fill_between(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>]-df_sn[<span class="string">&quot;ged&quot;</span>], </span><br><span class="line">                         fc=<span class="string">&quot;c&quot;</span>, alpha=<span class="number">0.3</span>, label=<span class="string">&quot;고시 등&quot;</span>) <span class="comment"># 고시 등</span></span><br><span class="line">grad = ax_sn.fill_between(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>]-df_sn[<span class="string">&quot;ged&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>]-df_sn[<span class="string">&quot;ged&quot;</span>]-df_sn[<span class="string">&quot;grad&quot;</span>], </span><br><span class="line">                          fc=<span class="string">&quot;b&quot;</span>, alpha=<span class="number">0.2</span>, label=<span class="string">&quot;졸업생&quot;</span>) <span class="comment"># 졸업생</span></span><br><span class="line">enroll = ax_sn.fill_between(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;enroll&quot;</span>],</span><br><span class="line">                            fc=<span class="string">&quot;gray&quot;</span>,alpha=<span class="number">0.2</span>, label=<span class="string">&quot;재학생&quot;</span>) <span class="comment"># 재학생</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>]-df_sn[<span class="string">&quot;ged&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">3</span>)</span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;enroll&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수 윤곽선</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">11</span>, zorder=<span class="number">2</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">300</span>, c=<span class="string">&quot;w&quot;</span>, zorder=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년(index 29), 2020년(index 47) 출생자 데이터 추가</span></span><br><span class="line">font_annot = &#123;<span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;alpha&quot;</span>:<span class="number">0.8</span>&#125;</span><br><span class="line">font_textyear = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">annot_birth_y = <span class="number">8e5</span></span><br><span class="line">annot_birth_offset = <span class="number">5e4</span></span><br><span class="line">annot_birth_yearoffset = <span class="number">1e5</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">29</span>, <span class="number">47</span>]:</span><br><span class="line">    <span class="comment"># 출생자</span></span><br><span class="line">    ax.annotate(<span class="built_in">format</span>(df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">                xy=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>]+annot_birth_offset), </span><br><span class="line">                xytext=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], annot_birth_y),</span><br><span class="line">                arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">                color=color_birth, alpha=<span class="number">0.8</span></span><br><span class="line">               )</span><br><span class="line">    ax.text(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], </span><br><span class="line">            annot_birth_y + annot_birth_yearoffset, </span><br><span class="line">            <span class="built_in">str</span>(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>]), </span><br><span class="line">            transform=ax.transData, </span><br><span class="line">            fontdict=font_textyear, </span><br><span class="line">            color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수 legend    </span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.79</span>, <span class="string">&quot;출생자 수&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021학년도 수능 지원자 추가</span></span><br><span class="line">annot_sn_y = <span class="number">17e4</span></span><br><span class="line">annot_sn_offset = -<span class="number">5e4</span></span><br><span class="line">annot_sn_year_offset = -<span class="number">1e5</span></span><br><span class="line">ax_sn.annotate(<span class="built_in">format</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">               xy=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>]+annot_sn_offset), </span><br><span class="line">               xytext=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2021</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2021&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년에서 2020년까지 출생자 감소율</span></span><br><span class="line">delta_birth_ratio = df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>]/df_birth.loc[<span class="number">29</span>, <span class="string">&quot;num_birth&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 수</span></span><br><span class="line">apply_2039 = <span class="built_in">int</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>] * delta_birth_ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 추가</span></span><br><span class="line">ax_sn.annotate(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">format</span>(apply_2039, <span class="string">&#x27;,&#x27;</span>)&#125;</span> 명 (?)&quot;</span>, </span><br><span class="line">               xy=(<span class="number">2039</span>, df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>] + annot_sn_offset), </span><br><span class="line">               xytext=(<span class="number">2039</span>, annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2039</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2039&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 legend</span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.17</span>, <span class="string">&quot;수능 지원자&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 감소율 추가</span></span><br><span class="line">change_birth_ratio = <span class="string">f&quot;<span class="subst">&#123;delta_birth_ratio*<span class="number">100</span>-<span class="number">100</span>:<span class="number">.0</span>f&#125;</span> %&quot;</span></span><br><span class="line">change_birth_ratio_pos_birth = (<span class="number">2002</span> + <span class="number">2020</span>)/<span class="number">2</span></span><br><span class="line">ax.text(change_birth_ratio_pos_birth, annot_birth_y, change_birth_ratio,</span><br><span class="line">        fontdict=font_textyear, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">        bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;rarrow&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;r&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 예상 감소율 추가</span></span><br><span class="line">change_birth_ratio_pos_sn = (<span class="number">2021</span> + <span class="number">2039</span>)/<span class="number">2</span></span><br><span class="line">ax_sn.text(change_birth_ratio_pos_sn, annot_sn_y, change_birth_ratio,</span><br><span class="line">           fontdict=font_textyear, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">           bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;rarrow&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;linestyle&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 카테고리</span></span><br><span class="line">ax_sn.legend(ncol=<span class="number">3</span>, loc=<span class="string">&quot;lower left&quot;</span>)</span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_16.png"><br></p><h2 id="3-12-ver-3-메시지-전달력-강화"><a href="#3-12-ver-3-메시지-전달력-강화" class="headerlink" title="3.12. ver.3. 메시지 전달력 강화"></a>3.12. ver.3. 메시지 전달력 강화</h2><ul><li>데이터를 들여다보면서 찾은 메시지를 담습니다.</li><li>미래를 두 구간으로 나누고 각기 의미를 담습니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">6</span>), facecolor=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axes 추가</span></span><br><span class="line">ax_sn = ax.twiny()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수</span></span><br><span class="line">color_birth = <span class="string">&quot;saddlebrown&quot;</span></span><br><span class="line">ax.fill_between(df_birth[<span class="string">&quot;year&quot;</span>], df_birth[<span class="string">&quot;num_birth&quot;</span>], fc=<span class="string">&quot;lightyellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">oranges = cm.get_cmap(<span class="string">&quot;Oranges&quot;</span>, lut=df_birth.shape[<span class="number">0</span>]*<span class="number">1.2</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_birth.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax.plot(df_birth.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_birth.loc[i:i+<span class="number">1</span>, <span class="string">&quot;num_birth&quot;</span>], c=oranges(i), lw=<span class="number">5</span>)</span><br><span class="line">ax.scatter(df_birth[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_birth[<span class="string">&quot;num_birth&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=[oranges(df_birth.shape[<span class="number">0</span>])])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 수능 지원자 수</span></span><br><span class="line">color_sn = <span class="string">&quot;k&quot;</span></span><br><span class="line">greys = cm.get_cmap(<span class="string">&quot;Greys&quot;</span>, lut=df_sn.shape[<span class="number">0</span>] + <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, alpha <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(df_sn.shape[<span class="number">0</span>]-<span class="number">1</span>)):</span><br><span class="line">    ax_sn.plot(df_sn.loc[i: i+<span class="number">1</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[i:i+<span class="number">1</span>, <span class="string">&quot;apply&quot;</span>], c=greys(i + <span class="number">10</span>), lw=<span class="number">5</span>, zorder=<span class="number">3</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">150</span>, c=color_sn, zorder=<span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 수 윤곽선</span></span><br><span class="line">ax_sn.plot(df_sn[<span class="string">&quot;year&quot;</span>], df_sn[<span class="string">&quot;apply&quot;</span>], c=<span class="string">&quot;w&quot;</span>, lw=<span class="number">11</span>, zorder=<span class="number">2</span>)</span><br><span class="line">ax_sn.scatter(df_sn[<span class="string">&quot;year&quot;</span>].tail(<span class="number">1</span>), df_sn[<span class="string">&quot;apply&quot;</span>].tail(<span class="number">1</span>), s=<span class="number">300</span>, c=<span class="string">&quot;w&quot;</span>, zorder=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spines 정리</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;top&quot;</span>]:</span><br><span class="line">    ax.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax_sn.spines[s].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생 x, y축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">1975</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 x, y 축 범위 지정</span></span><br><span class="line">offset_sn = <span class="number">19</span></span><br><span class="line">ax_sn.set_xlim(<span class="number">1975</span>+offset_sn, <span class="number">2021</span>+offset_sn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># grid 추가</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생년도 bottom spine 색상을 line plot과 통일</span></span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_birth)</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;x&quot;</span>, color=color_birth, labelcolor=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 xticks를 bottom으로 이동</span></span><br><span class="line">ax_sn.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 학년도 bottom spine을 아래로 이동, 수능 곡선 색상과 통일</span></span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;axes&quot;</span>, -<span class="number">0.12</span>))</span><br><span class="line">ax_sn.spines[<span class="string">&quot;bottom&quot;</span>].set_edgecolor(color_sn)</span><br><span class="line">ax_sn.tick_params(color=color_sn, labelcolor=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticklabels</span></span><br><span class="line">yticks = <span class="built_in">list</span>(np.linspace(<span class="number">0</span>, <span class="number">1e6</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line">ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(y/<span class="number">1e4</span>)&#125;</span>만명&quot;</span> <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0명&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br><span class="line"></span><br><span class="line"><span class="comment"># xticklabels</span></span><br><span class="line">font_xlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.075</span>, <span class="string">&quot;출생년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line">ax.text(<span class="number">1.06</span>, -<span class="number">0.195</span>, <span class="string">&quot;수능 학년도&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">ax.set_title(<span class="string">&quot;년도별 출생 및 수학능력시험 지원자 추이&quot;</span>, fontsize=<span class="number">24</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년(index 29), 2020년(index 47) 출생자 데이터 추가</span></span><br><span class="line">font_annot = &#123;<span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="number">16</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;alpha&quot;</span>:<span class="number">0.8</span>&#125;</span><br><span class="line">font_textyear = &#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">annot_birth_y = <span class="number">8e5</span></span><br><span class="line">annot_birth_offset = <span class="number">5e4</span></span><br><span class="line">annot_birth_yearoffset = <span class="number">1e5</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">29</span>, <span class="number">47</span>]:</span><br><span class="line">    <span class="comment"># 출생자</span></span><br><span class="line">    ax.annotate(<span class="built_in">format</span>(df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">                xy=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], df_birth.loc[idx, <span class="string">&quot;num_birth&quot;</span>]+annot_birth_offset), </span><br><span class="line">                xytext=(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], annot_birth_y),</span><br><span class="line">                arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_birth&#125;,</span><br><span class="line">                ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">                color=color_birth, alpha=<span class="number">0.8</span></span><br><span class="line">               )</span><br><span class="line">    ax.text(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>], </span><br><span class="line">            annot_birth_y + annot_birth_yearoffset, </span><br><span class="line">            <span class="built_in">str</span>(df_birth.loc[idx, <span class="string">&quot;year&quot;</span>]), </span><br><span class="line">            transform=ax.transData, </span><br><span class="line">            fontdict=font_textyear, </span><br><span class="line">            color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출생자 수 legend    </span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.79</span>, <span class="string">&quot;출생자 수&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021학년도 수능 지원자 추가</span></span><br><span class="line">annot_sn_y = <span class="number">17e4</span></span><br><span class="line">annot_sn_offset = -<span class="number">5e4</span></span><br><span class="line">annot_sn_year_offset = -<span class="number">1e5</span></span><br><span class="line">ax_sn.annotate(<span class="built_in">format</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>], <span class="string">&quot;,&quot;</span>) + <span class="string">&quot; 명&quot;</span>, </span><br><span class="line">               xy=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>]+annot_sn_offset), </span><br><span class="line">               xytext=(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;year&quot;</span>], annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2021</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2021&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2002년에서 2020년까지 출생자 감소율</span></span><br><span class="line">delta_birth_ratio = df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>]/df_birth.loc[<span class="number">29</span>, <span class="string">&quot;num_birth&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 수</span></span><br><span class="line">apply_2039 = <span class="built_in">int</span>(df_sn.loc[<span class="number">28</span>, <span class="string">&quot;apply&quot;</span>] * delta_birth_ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2039학년도 예상 수능 지원자 추가</span></span><br><span class="line">ax_sn.annotate(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">format</span>(apply_2039, <span class="string">&#x27;,&#x27;</span>)&#125;</span> 명 (?)&quot;</span>, </span><br><span class="line">               xy=(<span class="number">2039</span>, df_birth.loc[<span class="number">47</span>, <span class="string">&quot;num_birth&quot;</span>] + annot_sn_offset), </span><br><span class="line">               xytext=(<span class="number">2039</span>, annot_sn_y),</span><br><span class="line">               arrowprops=&#123;<span class="string">&quot;facecolor&quot;</span>:color_sn&#125;,</span><br><span class="line">               bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.4</span>, <span class="string">&quot;facecolor&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;edgecolor&quot;</span>:color_sn, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>&#125;,</span><br><span class="line">               ha=<span class="string">&quot;center&quot;</span>, fontsize=<span class="number">16</span>, </span><br><span class="line">               color=color_sn, alpha=<span class="number">0.8</span></span><br><span class="line">              )</span><br><span class="line">ax_sn.text(<span class="number">2039</span>, </span><br><span class="line">           annot_sn_y + annot_sn_year_offset, </span><br><span class="line">           <span class="string">&quot;2039&quot;</span>, </span><br><span class="line">           transform=ax_sn.transData, </span><br><span class="line">           fontdict=font_textyear, </span><br><span class="line">           color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 수능 지원자 legend</span></span><br><span class="line">ax.text(<span class="number">1.06</span>, <span class="number">0.17</span>, <span class="string">&quot;수능 지원자&quot;</span>, transform=ax.transAxes, fontdict=font_xlabel, color=color_sn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 박스권 등락 추가</span></span><br><span class="line">ax.axvspan(<span class="number">2002</span>, <span class="number">2015</span>, fc=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.text(<span class="number">2008.5</span>, <span class="number">6e5</span>, <span class="string">&quot;현상 유지\n(2021 - 2034 학년도)&quot;</span>, fontdict=font_textyear, color=<span class="string">&quot;k&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2034년 후 급락</span></span><br><span class="line">ax.axvspan(<span class="number">2015</span>, <span class="number">2021</span>, fc=<span class="string">&quot;r&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.text(<span class="number">2017.5</span>, <span class="number">6e5</span>, <span class="string">&quot;급감\n(-45 %)&quot;</span>, fontdict=font_textyear, color=<span class="string">&quot;brown&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021년도 지원자 중 비율 표기</span></span><br><span class="line">num_enroll = <span class="built_in">format</span>(df_sn[<span class="string">&#x27;enroll&#x27;</span>].iloc[-<span class="number">1</span>], <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">num_grad = <span class="built_in">format</span>(df_sn[<span class="string">&#x27;grad&#x27;</span>].iloc[-<span class="number">1</span>], <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">num_ged = <span class="built_in">format</span>(df_sn[<span class="string">&#x27;ged&#x27;</span>].iloc[-<span class="number">1</span>], <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">font_category = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="number">18</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;left&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;</span><br><span class="line">ax_sn.text(<span class="number">1997</span>, <span class="number">4e5</span>, <span class="string">&quot;※ 2021학년도 수능 지원자&quot;</span>, fontdict=font_category, fontweight=<span class="string">&quot;bold&quot;</span>) </span><br><span class="line">ax_sn.text(<span class="number">1997</span>, <span class="number">3e5</span>, </span><br><span class="line">           <span class="string">f&quot;  재학생 : <span class="subst">&#123;num_enroll&#125;</span> 명 (<span class="subst">&#123;df_sn[<span class="string">&#x27;enroll&#x27;</span>].iloc[-<span class="number">1</span>]/df_sn[<span class="string">&#x27;apply&#x27;</span>].iloc[-<span class="number">1</span>]*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span> %)&quot;</span>, </span><br><span class="line">           fontdict=font_category)</span><br><span class="line">ax_sn.text(<span class="number">1997</span>, <span class="number">2e5</span>, </span><br><span class="line">           <span class="string">f&quot;  졸업생 : <span class="subst">&#123;num_grad&#125;</span> 명 (<span class="subst">&#123;df_sn[<span class="string">&#x27;grad&#x27;</span>].iloc[-<span class="number">1</span>]/df_sn[<span class="string">&#x27;apply&#x27;</span>].iloc[-<span class="number">1</span>]*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span> %)&quot;</span>, </span><br><span class="line">           fontdict=font_category)</span><br><span class="line">ax_sn.text(<span class="number">1997</span>, <span class="number">1e5</span>, </span><br><span class="line">           <span class="string">f&quot;  고시 등: <span class="subst">&#123;num_ged&#125;</span> 명 (<span class="subst">&#123;df_sn[<span class="string">&#x27;ged&#x27;</span>].iloc[-<span class="number">1</span>]/df_sn[<span class="string">&#x27;apply&#x27;</span>].iloc[-<span class="number">1</span>]*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span> %)&quot;</span>, </span><br><span class="line">           fontdict=font_category)</span><br><span class="line"></span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure></li></ul><p><img src="64_kr_pop_sn_17.png"><br></p><h1 id="4-소스-코드"><a href="#4-소스-코드" class="headerlink" title="4. 소스 코드"></a>4. 소스 코드</h1><ul><li>위 코드와 그림이 담긴 노트북은 여기에서 다운로드 받으실 수 있습니다.<ul><li><a href="64_kr_pop_sn.ipynb">다운로드</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/color/">color</category>
      
      
    </item>
    
  </channel>
</rss>
