<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pega Devlog</title>
    <link>https://jehyunlee.github.io/</link>
    
    <atom:link href="https://jehyunlee.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Pega&#39;s Development log for myself and others</description>
    <pubDate>Tue, 09 Nov 2021 12:55:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>solar radiation - time and space</title>
      <link>https://jehyunlee.github.io/2021/11/09/Python-DS-88_gpd_mpl/</link>
      <guid>https://jehyunlee.github.io/2021/11/09/Python-DS-88_gpd_mpl/</guid>
      <pubDate>Tue, 09 Nov 2021 10:38:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;한국에너지기술연구원은 천리안 위성 기반 전국 전일사량 데이터를 제공합니다.&lt;/li&gt;
&lt;li&gt;천리안 1호 위성 데이터는 2012년 1월부터 2019년 12월까지,&lt;/li&gt;
&lt;li&gt;천리안 2호 위성 데이터는 2019년 9월부터 2020년 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>한국에너지기술연구원은 천리안 위성 기반 전국 전일사량 데이터를 제공합니다.</li><li>천리안 1호 위성 데이터는 2012년 1월부터 2019년 12월까지,</li><li>천리안 2호 위성 데이터는 2019년 9월부터 2020년 8월까지 데이터를 제공합니다.</li><li>이 데이터 중 천리안 1호 데이터를 받아 분석합니다.</li></ul><h1 id="1-데이터-다운로드"><a href="#1-데이터-다운로드" class="headerlink" title="1. 데이터 다운로드"></a>1. 데이터 다운로드</h1><blockquote><p><a href="https://www.data.go.kr/data/15066413/fileData.do">공공데이터포털 신재생자원지도 데이터: 태양자원 천리안 1호 수평면 전일사량</a></p></blockquote><p><img src="88_gpd_mpl_18.png"><br></p><ul><li>다운로드를 클릭하면 189 MB짜리 .csv 파일이 다운로드 됩니다.</li><li>파일 이름은 <code>한국에너지기술연구원_신재생자원지도데이터_태양자원_천리안1호_수평면전일사량_20191231.csv</code>입니다.</li></ul><h1 id="2-데이터-분석"><a href="#2-데이터-분석" class="headerlink" title="2. 데이터 분석"></a>2. 데이터 분석</h1><h2 id="2-1-기본-설정"><a href="#2-1-기본-설정" class="headerlink" title="2.1. 기본 설정"></a>2.1. 기본 설정</h2><ul><li>주피터 노트북을 열고 기본 설정을 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화 설정</span></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;NanumGothic&#x27;</span>, <span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-데이터-불러오기"><a href="#2-2-데이터-불러오기" class="headerlink" title="2.2. 데이터 불러오기"></a>2.2. 데이터 불러오기</h2><ul><li><p>작업폴더 아래 <code>data</code>폴더를 만들고 다운받은 파일을 넣습니다.</p></li><li><p>pandas를 이용해 데이터를 불러옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;./data/한국에너지기술연구원_신재생자원지도데이터_태양자원_천리안1호_수평면전일사량_20191231.csv&quot;</span>, </span><br><span class="line">                 encoding=<span class="string">&quot;euc-kr&quot;</span>)  <span class="comment"># 한글 인코딩</span></span><br><span class="line">df.to_pickle(<span class="string">&quot;./data/KIER.pkl&quot;</span>)      <span class="comment"># 백업</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_19.png"><br></p></li><li><p>위도와 경도, 그리고 시간별 숫자가 있습니다.</p></li><li><p>위도와 경도는 지구상의 지점을 지칭하고 시간별 숫자는 월별 평균 일사량을 구합니다.</p></li><li><p>직진에 의해 태양으로부터 전달되는 일사량과 구름에 의해 산란된 값을 합친 값입니다.</p></li><li><p>산란된 일사량을 산란일사라고 하는데, 에너지기술연구원에서는 도메인 지식 기반으로 계산하여 추론합니다.</p></li></ul><ul><li><p>데이터 형상을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure></li><li><p>실행 결과</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(291924, 98)</span><br></pre></td></tr></table></figure></li><li><p>약 100개 가량의 열과 30만개 행으로 구성되어 있습니다.</p></li><li><p>98개 행은 12개월 x 8년 + 위도, 경도입니다.</p></li></ul><h1 id="3-시간에-대한-변화"><a href="#3-시간에-대한-변화" class="headerlink" title="3. 시간에 대한 변화"></a>3. 시간에 대한 변화</h1><h2 id="3-1-광주광역시-데이터-추출"><a href="#3-1-광주광역시-데이터-추출" class="headerlink" title="3.1. 광주광역시 데이터 추출"></a>3.1. 광주광역시 데이터 추출</h2><ul><li>광주광역시의 좌표는 북위 35.1595º, 동경 126.8526º 입니다.</li><li>광주광역시와 가장 가까이 위치한 지점의 좌표를 탐색합니다.</li><li>위도와 경도 모두 가까워야 하므로 제곱의 합이 최소인 지점을 구합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 광주광역시 위경도 : 35.1595° N, 126.8526° E</span></span><br><span class="line">idx = np.argmin(np.power(df[<span class="string">&quot;lon&quot;</span>]-<span class="number">35.1595</span>, <span class="number">2</span>) + np.power(df[<span class="string">&quot;lat&quot;</span>]-<span class="number">126.8526</span>, <span class="number">2</span>))</span><br><span class="line">df.iloc[idx]</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_20.png"><br></li></ul><ul><li><p>시간에 대한 일사량을 확인하려면 시간과 일사량 데이터가 필요합니다.</p></li><li><p>월과 일사량 데이터를 가져옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">months = <span class="built_in">list</span>(df.columns)[<span class="number">2</span>:]</span><br><span class="line">irrs = df.iloc[idx][<span class="number">2</span>:]</span><br></pre></td></tr></table></figure></li><li><p>추출한 데이터를 그림으로 그립니다.</p></li><li><p><code>ax.set_title()</code>명령으로 데이터 이름을 제목으로 붙입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 변화율 시각화</span></span><br><span class="line">ax.plot(months, irrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 제목 추가</span></span><br><span class="line">ax.set_title(<span class="string">&quot;수평면 전일사량 [kWh/(m$^2 \cdot$day)]&quot;</span>, pad=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_15.png"><br></p></li></ul><h2 id="3-2-범위-및-눈금-간격-지정"><a href="#3-2-범위-및-눈금-간격-지정" class="headerlink" title="3.2. 범위 및 눈금 간격 지정"></a>3.2. 범위 및 눈금 간격 지정</h2><ul><li>x축 눈금이 빼곡하게 적혀서 보이지 않습니다.</li><li><code>MultipleLocator</code>를 사용해서 1월 데이터에만 눈금을 답니다.</li><li><code>ax.set_xlim()</code>을 사용해서 x축 범위를 지정합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MultipleLocator</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">ax.plot(months, irrs)</span><br><span class="line">ax.set_title(<span class="string">&quot;수평면 전일사량 [kWh/(m$^2 \cdot$day)]&quot;</span>, pad=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x축 범위 지정</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="built_in">len</span>(months)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x축 눈금 간격 지정</span></span><br><span class="line">ax.xaxis.set_major_locator(MultipleLocator(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_16.png"><br></li></ul><h2 id="3-3-눈금-글자-크기-축소"><a href="#3-3-눈금-글자-크기-축소" class="headerlink" title="3.3. 눈금 글자 크기 축소"></a>3.3. 눈금 글자 크기 축소</h2><ul><li>글자를 조금 줄이면 좋을 것 같습니다.</li><li>일사량 데이터이므로 따뜻한 느낌을 주는 오렌지색으로 바꿉니다.</li><li>1월마다 눈금을 만들어 올립니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MultipleLocator</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">ax.plot(months, irrs, c=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;수평면 전일사량 [kWh/(m$^2 \cdot$day)]&quot;</span>, pad=<span class="number">10</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="built_in">len</span>(months)-<span class="number">1</span>)</span><br><span class="line">ax.xaxis.set_major_locator(MultipleLocator(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x축과 y축 눈금 글자 크기 축소</span></span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;both&quot;</span>, labelsize=<span class="string">&quot;small&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x축 눈금에서 grid 생성</span></span><br><span class="line">ax.grid(axis=<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_17.png"><br></li></ul><h2 id="3-4-선-아래-채색"><a href="#3-4-선-아래-채색" class="headerlink" title="3.4. 선 아래 채색"></a>3.4. 선 아래 채색</h2><ul><li>조금 심심하다 싶습니다.</li><li><code>ax.stackplot()</code>명령을 사용해 선 아래를 색으로 칠합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MultipleLocator</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stackplot</span></span><br><span class="line">ax.stackplot(months, irrs, colors=<span class="string">&quot;orange&quot;</span>, ec=<span class="string">&quot;brown&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">&quot;수평면 전일사량 [kWh/(m$^2 \cdot$day)]&quot;</span>, pad=<span class="number">10</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="built_in">len</span>(months)-<span class="number">1</span>)</span><br><span class="line">ax.xaxis.set_major_locator(MultipleLocator(<span class="number">12</span>))</span><br><span class="line">ax.tick_params(axis=<span class="string">&quot;both&quot;</span>, labelsize=<span class="string">&quot;small&quot;</span>)</span><br><span class="line">ax.grid(axis=<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_21.png"><br></li></ul><h1 id="4-공간-분포"><a href="#4-공간-분포" class="headerlink" title="4. 공간 분포"></a>4. 공간 분포</h1><h2 id="4-1-데이터-정돈"><a href="#4-1-데이터-정돈" class="headerlink" title="4.1. 데이터 정돈"></a>4.1. 데이터 정돈</h2><ul><li>한반도를 포함한 주변 영역의 데이터를 2차원 공간에 그립시다.</li><li>데이터프레임 컬럼 이름이 너무 깁니다.</li><li>단위는 따로 적어두면 됩니다. 불필요한 부분을 제거합시다.</li><li>위도와 경도도 영어로 바꿉니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cols = <span class="built_in">list</span>(df.columns)</span><br><span class="line">cols_short = [<span class="string">&quot;lon&quot;</span>, <span class="string">&quot;lat&quot;</span>] + [c.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>] <span class="keyword">for</span> c <span class="keyword">in</span> cols[<span class="number">2</span>:]]</span><br><span class="line">df.columns = cols_short</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_22.png"><br></li></ul><h2 id="4-2-scatter-plot"><a href="#4-2-scatter-plot" class="headerlink" title="4.2. scatter plot"></a>4.2. scatter plot</h2><ul><li><p>2차원 공간에 데이터를 점으로 찍어서 그림을 그립니다.</p></li><li><p>2012년 1월 데이터만 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(df[<span class="string">&quot;lat&quot;</span>], df[<span class="string">&quot;lon&quot;</span>], c=df[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_01.png"><br></p></li><li><p>Matplotlib에서 제공하는 그림 크기가 가로가 길고 세로가 작아 짓눌린 모양입니다.</p></li><li><p>세로로 긴 도화지를 깔고 종횡비(aspect ratio)를 1:1로 맞춥니다.</p></li><li><p>실제 형상을 반영하기 위해서입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">ax.scatter(df[<span class="string">&quot;lat&quot;</span>], df[<span class="string">&quot;lon&quot;</span>], c=df[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_02.png"><br></p></li></ul><h2 id="4-3-좌표계-변환"><a href="#4-3-좌표계-변환" class="headerlink" title="4.3. 좌표계 변환"></a>4.3. 좌표계 변환</h2><ul><li><p>위쪽이 넓고 아래가 좁은 모양입니다.</p></li><li><p>그림 아래와 왼쪽에 놓인 숫자는 경도와 위도입니다.</p></li><li><p>경도와 위도는 곡면상에 놓인 그림이기 때문에 이렇게 그리면 왜곡이 발생합니다.</p></li><li><p><code>pyproj</code> 라이브러리를 사용해 UTM-K 좌표계로 변경합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyproj <span class="keyword">import</span> Transformer</span><br><span class="line"></span><br><span class="line">transformer = Transformer.from_crs(<span class="string">&quot;epsg:4326&quot;</span>, <span class="string">&quot;epsg:5178&quot;</span>)</span><br><span class="line">coord_UTMK = transformer.transform(df[<span class="string">&quot;lon&quot;</span>], df[<span class="string">&quot;lat&quot;</span>])</span><br><span class="line">coord_UTMK</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_23.png"><br></p></li><li><p>변환된 좌표계를 기존 데이터에 붙여 데이터프레임을 만듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_u = pd.DataFrame(data=np.array(coord_UTMK).T, columns=[<span class="string">&quot;y&quot;</span>, <span class="string">&quot;x&quot;</span>])</span><br><span class="line">df_u = pd.concat([df_u, df.iloc[:, <span class="number">2</span>:]], axis=<span class="number">1</span>)</span><br><span class="line">df_u.head()</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_24.png"><br></p></li></ul><h2 id="4-4-UTM-K-좌표계-scatter-plot"><a href="#4-4-UTM-K-좌표계-scatter-plot" class="headerlink" title="4.4. UTM-K 좌표계 scatter plot"></a>4.4. UTM-K 좌표계 scatter plot</h2><ul><li><p>변환된 좌표계를 사용해 scatter plot을 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">ax.scatter(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], c=df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_03.png"><br></p></li><li><p>이제 그림이 정상적으로 보입니다.</p></li><li><p>경기 동북부~강원도 서부 지역을 확대해 봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">ax.scatter(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], c=df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">ax.set_xlim(<span class="number">1e6</span>, <span class="number">1e6</span>+<span class="number">10000</span>)</span><br><span class="line">ax.set_ylim(<span class="number">2e6</span>, <span class="number">2e6</span>+<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_04.png"><br></p></li><li><p>확대해보니 점만 가득합니다.</p></li><li><p>scatter plot이라 점만 찍어 그린 것입니다.</p></li><li><p>위쪽 그림을 보니 아래쪽에 굵은 펜이 지나간 듯한 흔적이 보이기도 합니다.</p></li></ul><h2 id="4-5-2D-image-변환"><a href="#4-5-2D-image-변환" class="headerlink" title="4.5. 2D image 변환"></a>4.5. 2D image 변환</h2><ul><li>이처럼 x와 y가 쌍으로 얽힌 데이터를 2D로 표현하는 가장 정석적인 방법은 meshgrid를 만드는 것입니다.</li><li>그러나 이는 x, y 데이터가 격자모양으로 예쁘게 정리되었을 때나 가능합니다.</li><li>위성 영상은 x, y 위치가 조금씩 틀어져있기 때문에 grid를 만들기 적절치 않습니다.</li><li>이럴 때 <code>triplot</code>, <code>tricontourf</code>, <code>tricontour</code>를 사용하기 좋습니다.</li></ul><ul><li><p>명령어의 기능을 확인하기 위해 30만개 데이터 중 100개만 추출합니다.</p></li><li><p>그리고 같은 데이터를 세 가지 명령을 사용해 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df_us = df_u.sample(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualize</span></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">9</span>, <span class="number">6.67</span>), sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line">axs[<span class="number">0</span>].triplot(df_us[<span class="string">&quot;x&quot;</span>], df_us[<span class="string">&quot;y&quot;</span>], lw=<span class="number">0.5</span>)</span><br><span class="line">axs[<span class="number">1</span>].triplot(df_us[<span class="string">&quot;x&quot;</span>], df_us[<span class="string">&quot;y&quot;</span>], lw=<span class="number">0.5</span>, c=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">axs[<span class="number">2</span>].triplot(df_us[<span class="string">&quot;x&quot;</span>], df_us[<span class="string">&quot;y&quot;</span>], lw=<span class="number">0.5</span>, c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].tricontourf(df_us[<span class="string">&quot;x&quot;</span>], df_us[<span class="string">&quot;y&quot;</span>], df_us[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">5</span>)</span><br><span class="line">axs[<span class="number">2</span>].tricontour(df_us[<span class="string">&quot;x&quot;</span>], df_us[<span class="string">&quot;y&quot;</span>], df_us[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;triplot&quot;</span>, <span class="string">&quot;tricontourf&quot;</span>, <span class="string">&quot;tricontour&quot;</span>]):</span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.set_title(title, pad=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_05.png"><br></p></li><li><p><code>ax.triplot()</code>은 주어진 (x, y) 데이터끼리 연결해 삼각형 mesh를 만듭니다.</p></li><li><p><code>ax.tricontourf()</code>는 (x, y) 위치데이터에 node의 값 데이터를 적용해 삼각형 내 interpolation을 합니다.</p></li><li><p><code>levels=5</code>로 지정했기 때문에 공간이 다섯 개의 색상 구간으로 나뉘었고 색상 사이 경계선이 보입니다.</p></li><li><p><code>ax.tricontour()</code>는 이 경계선에 contour line을 그립니다.</p></li></ul><ul><li>이 방식을 사용해 2D에 분포된 데이터를 그림으로 표현할 수 있습니다.</li><li>일사량 데이터를 보이는데 <code>ax.triplot()</code>은 의미가 없으니 나머지 둘만 그립니다.</li><li>level도 10개로 설정해 더 많은 구간을 표현합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">6</span>, <span class="number">6.67</span>), sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">axs[<span class="number">1</span>].tricontour(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;tricontourf&quot;</span>, <span class="string">&quot;tricontour&quot;</span>]):</span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.set_title(title, pad=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_06.png"><br></li></ul><h2 id="4-6-지도-윤곽선-표시-1-geopandas-dataset"><a href="#4-6-지도-윤곽선-표시-1-geopandas-dataset" class="headerlink" title="4.6. 지도 윤곽선 표시 (1) geopandas dataset"></a>4.6. 지도 윤곽선 표시 (1) geopandas dataset</h2><ul><li>geopandas 라이브러리에는 세계 지도와 주요 도시가 들어있습니다.</li><li>이를 활용해 한반도와 주변국의 윤곽선을 그립니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line"></span><br><span class="line">world = gpd.read_file(gpd.datasets.get_path(<span class="string">&#x27;naturalearth_lowres&#x27;</span>))</span><br><span class="line">cities = gpd.read_file(gpd.datasets.get_path(<span class="string">&#x27;naturalearth_cities&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 국경 데이터</span></span><br><span class="line">world.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_25.png"><br></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 도시 데이터</span></span><br><span class="line">cities.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_26.png"><br></p><ul><li><p>공간을 마련하고 한반도와 서울을 표시합니다.</p></li><li><p>geopandas 자체 기능을 사용해 국경을 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">world[world[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;South Korea&quot;</span>].plot(ax=ax)</span><br><span class="line">cities[cities[<span class="string">&quot;name&quot;</span>]==<span class="string">&quot;Seoul&quot;</span>].plot(ax=ax, c=<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_07.png"><br></p></li><li><p>자, 그런데 x와 y축 눈금을 보면 위도와 경도입니다.</p></li><li><p>앞에서 우리는 UTM-K 좌표계로 데이터 전체를 변환했습니다.</p></li><li><p>역시 geopandas 자체 기능을 사용해 데이터를 변환하고 다시 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좌표계 변환</span></span><br><span class="line">world = world.to_crs(<span class="string">&quot;EPSG:5178&quot;</span>)</span><br><span class="line">cities = cities.to_crs(<span class="string">&quot;EPSG:5178&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">world[world[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;South Korea&quot;</span>].plot(ax=ax)</span><br><span class="line">cities[cities[<span class="string">&quot;name&quot;</span>]==<span class="string">&quot;Seoul&quot;</span>].plot(ax=ax, c=<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_08.png"><br></p></li><li><p>간편한 명령으로 손쉽게 좌표계가 변환되었습니다.</p></li><li><p>일사량 데이터와 겹쳐봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">world[world[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;South Korea&quot;</span>].plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">world[world[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;North Korea&quot;</span>].plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">world[world[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;Japan&quot;</span>].plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlim(df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">ax.set_ylim(df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_09.png"><br></p></li><li><p>디테일이 영 아쉽습니다.</p></li><li><p>심지어 제주도도 없는데 혹시나 싶어 북한과 일본까지 다 끌어와도 그려지지 않습니다.</p></li></ul><h2 id="4-7-지도-윤곽선-표시-2-shape-file"><a href="#4-7-지도-윤곽선-표시-2-shape-file" class="headerlink" title="4.7. 지도 윤곽선 표시 (2) shape file"></a>4.7. 지도 윤곽선 표시 (2) shape file</h2><ul><li><p>외부 저장소에서 시도 경계선 데이터를 가져옵니다.</p></li><li><p><a href="http://www.gisdeveloper.co.kr/?p=2332">여기에서 다운로드받을 수 있습니다.</a></p></li><li><p><code>geopandas.read_file()</code>명령으로 열어 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_shp = gpd.read_file(<span class="string">&quot;./CTPRVN_202101/TL_SCCO_CTPRVN.shp&quot;</span>, encoding=<span class="string">&quot;euc-kr&quot;</span>)</span><br><span class="line">df_shp.head()</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_27.png"><br></p></li><li><p>이번엔 그림으로 확인합니다.</p></li><li><p>특별시, 광역시, 도의 경계선이 선명하게 드러납니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = df_shp.plot()</span><br><span class="line">fig = ax.figure</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_10.png"><br></p></li></ul><h2 id="4-8-일사량-데이터와-overlap"><a href="#4-8-일사량-데이터와-overlap" class="headerlink" title="4.8. 일사량 데이터와 overlap"></a>4.8. 일사량 데이터와 overlap</h2><ul><li><p>아까 살펴본 2012년 1월 데이터에 겹쳐봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_shp.plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">1</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlim(df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">ax.set_ylim(df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_11.png"><br></p></li><li><p>그럴싸합니다!</p></li><li><p>추운 겨울을 그려봤으니 6개월 지난 7월 그림을 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-07&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_shp.plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">1</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlim(df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">ax.set_ylim(df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_12.png"><br></p></li><li><p>데이터가 바뀌어 색상 분포가 달라졌습니다.</p></li><li><p>그런데 뭔가 수상합니다.</p></li><li><p>1월 데이터는 아주 밝았는데 7월 데이터는 어두침침합니다.</p></li><li><p>여름 일사량이 겨울보다 적다는 게 정상일까요?</p></li></ul><ul><li><p>확인을 위해 각각 colorbar를 붙여봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">6.67</span>), constrained_layout=<span class="literal">True</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">im0 = axs[<span class="number">0</span>].tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-01&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">im1 = axs[<span class="number">1</span>].tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[<span class="string">&quot;2012-07&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, im, month <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [im0, im1], [<span class="string">&quot;2012-01&quot;</span>, <span class="string">&quot;2012-07&quot;</span>]):</span><br><span class="line">    df_shp.plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">1</span>, alpha=<span class="number">0.5</span>, zorder=<span class="number">2</span>)</span><br><span class="line">    im = ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[month], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>)</span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.set_title(month, pad=<span class="number">20</span>)</span><br><span class="line">    ax.set_xlim(df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">    ax.set_ylim(df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line">    plt.colorbar(im, ax=ax)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_13.png"><br></p></li><li><p>2월은 최대값이 3을 넘지 않는데 비해 7월은 5.4에 달합니다.</p></li><li><p>최소값도 0.6과 1.8로 큰 차이가 납니다.</p></li><li><p>두 그림이 다른 기준으로 그려져서 문제가 생긴 것입니다. </p></li><li><p>위 코드의 6번째 줄에 colormap의 최소값<code>vmin</code>과 최대값<code>vmax</code>를 똑같이 지정해서 같은 기준으로 색을 입힙니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im = ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[month], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>, vmin=<span class="number">0</span>, vmax=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><img src="88_gpd_mpl_14.png"><br></p></li><li><p>확실히 1월에 비해 7월의 햇살이 더 쨍쨍합니다.</p></li></ul><h1 id="5-시간과-공간-데이터-시각화"><a href="#5-시간과-공간-데이터-시각화" class="headerlink" title="5. 시간과 공간 데이터 시각화"></a>5. 시간과 공간 데이터 시각화</h1><ul><li>공간 데이터는 1개월마다 평균치가 저장되므로 이를 늘어놓으면 시간에 따른 변화를 볼 수 있습니다.</li><li>2012년 1월부터 12월까지 공간데이터를 for 문을 사용해 반복합니다.</li><li>공통으로 적용된 colorbar는 12개 Axes의 우측에 <code>ScalarMappable()</code>을 사용해 놓습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(ncols=<span class="number">6</span>, nrows=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>), constrained_layout=<span class="literal">True</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs = axes.ravel()</span><br><span class="line"><span class="keyword">for</span> i, ax <span class="keyword">in</span> <span class="built_in">enumerate</span>(axs, <span class="number">1</span>):</span><br><span class="line">    month = <span class="string">f&quot;2012-<span class="subst">&#123;i:02d&#125;</span>&quot;</span></span><br><span class="line">    df_shp.plot(ax=ax, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">1</span>, alpha=<span class="number">0.5</span>, zorder=<span class="number">2</span>)</span><br><span class="line">    im = ax.tricontourf(df_u[<span class="string">&quot;x&quot;</span>], df_u[<span class="string">&quot;y&quot;</span>], df_u[month], cmap=<span class="string">&quot;inferno&quot;</span>, levels=<span class="number">10</span>, vmin=<span class="number">0</span>, vmax=<span class="number">6</span>)</span><br><span class="line">    ax.set_aspect(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    ax.set_title(month, pad=<span class="number">10</span>)</span><br><span class="line">    ax.set_xlim(df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;x&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">    ax.set_ylim(df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">min</span>(), df_u[<span class="string">&quot;y&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line">    ax.axis(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># colorbar</span></span><br><span class="line">cbar = cm.ScalarMappable(cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">cbar.set_clim(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">plt.colorbar(cbar, ax=axes[:,-<span class="number">1</span>], fraction=<span class="number">0.2</span>, pad=<span class="number">0.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure title</span></span><br><span class="line">fig.suptitle(<span class="string">&quot;수평면 전일사량 [kWh/(m$^2 \cdot$day)]&quot;</span>, color=<span class="string">&quot;gray&quot;</span>, fontsize=<span class="string">&quot;medium&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br></pre></td></tr></table></figure><img src="88_gpd_mpl_18.png"><br></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/geopandas/">geopandas</category>
      
      <category domain="https://jehyunlee.github.io/tags/proj/">proj</category>
      
      
    </item>
    
    <item>
      <title>modifying seaborn violin plot</title>
      <link>https://jehyunlee.github.io/2021/10/21/Python-DS-87_violinplotedit/</link>
      <guid>https://jehyunlee.github.io/2021/10/21/Python-DS-87_violinplotedit/</guid>
      <pubDate>Thu, 21 Oct 2021 00:11:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Seaborn violin plot은 아름답습니다.&lt;/li&gt;
&lt;li&gt;매끈한 곡선은 데이터의 분포를 직관적으로 알게 해 줍니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;와 &lt;code&gt;palette&lt;/code&gt; 매개변수로 viol</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Seaborn violin plot은 아름답습니다.</li><li>매끈한 곡선은 데이터의 분포를 직관적으로 알게 해 줍니다.</li><li><code>color</code>와 <code>palette</code> 매개변수로 violin plot의 색을 지정할 수 있습니다.</li><li>그러나 특정 violin plot만 색을 바꾸어 강조하는 방법은 잘 알려져있지 않습니다.</li></ul><h1 id="1-예제-데이터"><a href="#1-예제-데이터" class="headerlink" title="1. 예제 데이터"></a>1. 예제 데이터</h1><ul><li>seaborn의 tips 데이터셋을 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기본 시각화 설정</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터셋 불러오기</span></span><br><span class="line">df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><img src="violinplotedit01.png"><br></li></ul><h1 id="2-seaborn-violin-plot"><a href="#2-seaborn-violin-plot" class="headerlink" title="2. seaborn violin plot"></a>2. seaborn violin plot</h1><h2 id="2-1-기본-plot"><a href="#2-1-기본-plot" class="headerlink" title="2.1. 기본 plot"></a>2.1. 기본 plot</h2><ul><li><p>요일별 팁 분포를 그려봅니다.</p></li><li><p><code>seaborn.violinplot()</code>을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sns.violinplot(data=df, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, ax=ax)</span><br></pre></td></tr></table></figure><p><img src="violinplotedit02.png"><br></p></li><li><p>기본 설정인 <code>tab10</code> palette에 따라 violin plot이 채색되었습니다.</p></li></ul><h2 id="2-2-일괄-색-변경-color"><a href="#2-2-일괄-색-변경-color" class="headerlink" title="2.2. 일괄 색 변경: color"></a>2.2. 일괄 색 변경: <code>color</code></h2><ul><li>color 매개변수를 사용하면 violin plot들의 face color를 일괄적으로 바꿀 수 있습니다.</li><li><code>color=&quot;gold&quot;</code>를 적용한 결과입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sns.violinplot(data=df, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, </span><br><span class="line">               color=<span class="string">&quot;gold&quot;</span>, ax=ax)</span><br></pre></td></tr></table></figure><img src="violinplotedit07.png"><br></li></ul><h2 id="2-3-팔레트-변경-palette"><a href="#2-3-팔레트-변경-palette" class="headerlink" title="2.3. 팔레트 변경: palette"></a>2.3. 팔레트 변경: <code>palette</code></h2><ul><li><p>color 대신 palette 매개변수를 사용하면 violin plot마다 다른 색이 적용됩니다.</p></li><li><p>기본값으로 <code>tab10</code>이 적용되어 있지만, 만약 <code>sns.set_palette()</code>명령으로 기본값을 바꾸었다면 다른 색들이 입혀집니다.</p></li><li><p>전체 palette를 바꾸지 않아도 <code>sns.violinplot()</code>안에 <code>palette</code>매개변수를 지정하면 해당 plot에 한해 palette가 바뀝니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sns.violinplot(data=df, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, </span><br><span class="line">               palette=<span class="string">&quot;rainbow&quot;</span>, ax=ax)</span><br></pre></td></tr></table></figure><p><img src="violinplotedit08.png"><br></p></li><li><p><code>color</code>매개변수나 <code>palette</code> 매개변수나 전체를 일괄적으로 바꾸는 것입니다.</p></li><li><p>만약 이 중에서 <b>일요일만 색을 바꾸고 싶다</b>면 옵션이 없습니다.</p></li></ul><h1 id="3-Matplotlib-객체지향-적용"><a href="#3-Matplotlib-객체지향-적용" class="headerlink" title="3. Matplotlib 객체지향 적용"></a>3. Matplotlib 객체지향 적용</h1><h2 id="3-1-seaborn-violin-plot-해부"><a href="#3-1-seaborn-violin-plot-해부" class="headerlink" title="3.1. seaborn violin plot 해부"></a>3.1. seaborn violin plot 해부</h2><blockquote><p><a href="https://matplotlib.org/stable/api/artist_api.html">matplotlib.artist</a><br><a href="https://matplotlib.org/stable/tutorials/intermediate/artists.html">matplotlib: Artist tutorial</a></p></blockquote><ul><li>seaborn은 Matplotlib을 편하게 쓰기 위해 만든 라이브러리입니다.</li><li>따라서 seaborn으로 그린 그림은 모두 Matplotlib 객체로 이루어져 있습니다.</li><li>Figure와 Axes를 제외한 구성 요소는 Artist로 이루어져 있고, Artist엔 여러 분류가 있습니다.</li></ul><p><img src="violinplotedit10.png" alt="Artist class"><br></p><ul><li>이 수많은 것들 중 <b>Collection</b>에 주목합시다.</li><li>낯설게 보일 지 모르지만 파워포인트에서 여러 도형을 그룹으로 묶어놓은 것이라고 생각할 수 있습니다.</li><li>파워포인트에서 그룹에 속한 도형의 선이나 색을 일괄적으로 바꿀 수 있는 것처럼 Matplotlib의 Collection도 포함된 여러 객체의 속성을 한번에 바꿀 수 있습니다.</li></ul><ul><li><p>violin plot으로 어떤 Collection들이 생성되었는지 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ax.collections))</span><br><span class="line">ax.collections</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 8개의 collections가 있습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">[&lt;matplotlib.collections.PolyCollection at 0x7f61db670a50&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PathCollection at 0x7f61db719490&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PolyCollection at 0x7f61db680ad0&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PathCollection at 0x7f61db680550&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PolyCollection at 0x7f61db68c9d0&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PathCollection at 0x7f61db6e1cd0&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PolyCollection at 0x7f61db699ad0&gt;,</span><br><span class="line"> &lt;matplotlib.collections.PathCollection at 0x7f61db699510&gt;]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><b>PolyCollection</b>과 <b>PathCollection</b>이 번갈아 등장합니다.</p></li><li><p>PolyCollection은 간단히 <b>다각형 객체</b>입니다.</p></li><li><p>PathCollection은 간단히 <b>Matplotlib에서 사전 정의된 도형</b>입니다.</p></li><li><p>뭔지 잘 모르겠지만 일단 이렇게만 넘어갑시다. </p></li></ul><ul><li><p>이번에는 <b>Line2D</b>객체를 살펴봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ax.lines))</span><br><span class="line">ax.lines</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 8개의 lines객체가 있습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">[&lt;matplotlib.lines.Line2D at 0x7f61db670f10&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db680290&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db680e90&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db68c2d0&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db68cdd0&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db699250&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db699e90&gt;,</span><br><span class="line">&lt;matplotlib.lines.Line2D at 0x7f61db6a62d0&gt;]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>이들의 정체는 바로 이렇습니다.</p><ul><li><b>PolyCollection</b>은 <b>violin plot</b></li><li><b>PathCollection</b>은 <b>median marker</b></li><li>첫번째 <b>Line2D</b>는 <b>whisker</b></li><li>두번째 <b>Line2D</b>는 <b>box</b>입니다.<details><summary><b>시각화 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">df_sample = df.query(<span class="string">&quot;day == &#x27;Sun&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">subfigs = fig.subfigures(<span class="number">1</span>, <span class="number">2</span>, width_ratios=[<span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">axs_all = subfigs[<span class="number">0</span>].subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">sns.violinplot(data=df_sample, y=<span class="string">&quot;total_bill&quot;</span>, ax=axs_all)</span><br><span class="line">axs_all.set_yticks([])</span><br><span class="line">axs_all.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">subfigs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;beige&quot;</span>)</span><br><span class="line">axs_parts = subfigs[<span class="number">1</span>].subplots(<span class="number">1</span>, <span class="number">4</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">titles = [<span class="string">&quot;violin plot\n\n&quot;</span>, <span class="string">&quot;median\n\n&quot;</span>, <span class="string">&quot;whisker\n\n&quot;</span>, <span class="string">&quot;box\n\n&quot;</span>]</span><br><span class="line">artists = [<span class="string">&quot;collections[0]\n&quot;</span>, <span class="string">&quot;collections[1]\n&quot;</span>, <span class="string">&quot;lines[0]\n&quot;</span>, <span class="string">&quot;lines[1]\n&quot;</span>]</span><br><span class="line">objects = [<span class="string">&quot;PolyCollection&quot;</span>, <span class="string">&quot;PathCollection&quot;</span>, <span class="string">&quot;Line2D&quot;</span>, <span class="string">&quot;Line2D&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, (ax, title, artist, <span class="built_in">object</span>) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(axs_parts, titles, artists, objects)):</span><br><span class="line">    sns.violinplot(data=df_sample, y=<span class="string">&quot;total_bill&quot;</span>, ax=ax)</span><br><span class="line">    parts = ax.collections + ax.lines</span><br><span class="line">    [p.remove() <span class="keyword">for</span> pi, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(parts) <span class="keyword">if</span> i != pi]</span><br><span class="line">    ax.set_title(title, fontsize=<span class="string">&quot;small&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">    ax.text(<span class="number">0.5</span>, <span class="number">1.05</span>, artist, transform=ax.transAxes, ha=<span class="string">&quot;center&quot;</span>, color=<span class="string">&quot;brown&quot;</span>, fontsize=<span class="string">&quot;x-small&quot;</span>)</span><br><span class="line">    ax.text(<span class="number">0.5</span>, <span class="number">1.05</span>, <span class="built_in">object</span>, transform=ax.transAxes, ha=<span class="string">&quot;center&quot;</span>, color=<span class="string">&quot;gray&quot;</span>, fontsize=<span class="string">&quot;x-small&quot;</span>)</span><br><span class="line">    ax.set_xticks([])</span><br><span class="line">    ax.set_yticks([])</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">subfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;Anatomy of seaborn violin plot&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="violinplotedit11.png"><br></p><ul><li>whisker와 box는 box-whisker plot의 그것들이 맞습니다.</li></ul><h2 id="3-2-객체-제어"><a href="#3-2-객체-제어" class="headerlink" title="3.2. 객체 제어"></a>3.2. 객체 제어</h2><ul><li>일단 객체로 분리되면 그 다음은 수월합니다.</li><li><code>.get_속성()</code> 명령으로 속성을 가져오고 <code>.set_속성(속성값)</code> 명령으로 속성을 바꿀 수 있습니다.</li></ul><ul><li><p>우리 목적은 <b>일요일 데이터 강조</b>입니다.</p></li><li><p><b>일요일</b> 데이터를 강조하기 위해 나머지 톤을 죽입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sns.violinplot(data=df, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, ax=ax,</span><br><span class="line">               color=<span class="string">&quot;lavender&quot;</span>, linewidth=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></li><li><p>매우 밋밋한 그림이 됩니다.</p></li><li><p>여기에 몇 가지 코드를 추가합니다.</p></li><li><p>먼저, <b>일요일 violin plot</b>의 facecolor와 edgecolor, linewidth를 바꿉니다.</p></li><li><p>하나 건너 하나 있는 <code>PolyCollection</code>을 가져오기 위해 <code>if i%2 == 0</code>을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># violin plot: PolyCollection</span></span><br><span class="line">violins = [c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.collections) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>]  </span><br><span class="line">[v.set_edgecolor(<span class="string">&quot;k&quot;</span>) <span class="keyword">for</span> v <span class="keyword">in</span> violins]  <span class="comment"># 전체 violin edgecolor 변경</span></span><br><span class="line">violins[<span class="number">3</span>].set_facecolor(<span class="string">&quot;gold&quot;</span>)     <span class="comment"># Sunday violin facecolor 변경</span></span><br><span class="line">violins[<span class="number">3</span>].set_linewidth(<span class="number">1</span>)          <span class="comment"># Sunday violin linewidth 변경</span></span><br><span class="line">violins[<span class="number">3</span>].set_edgecolor(<span class="string">&quot;k&quot;</span>)        <span class="comment"># Sunday violin edgecolor 변경</span></span><br></pre></td></tr></table></figure></li><li><p>이번엔 <b>marker를 조금 크고 귀엽게</b> 만듭니다.</p></li><li><p>일요일 뿐 아니라 <b>전체 데이터</b>에 적용합니다.</p></li><li><p>PolyCollection 밑에 있는<code>PathCollection</code>을 가져오기 위해 <code>if i%2 == 1</code>을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># median marker: PathCollection</span></span><br><span class="line">markers = [c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.collections) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>]  </span><br><span class="line">markers[<span class="number">3</span>].set_facecolor(<span class="string">&quot;w&quot;</span>)         <span class="comment"># Sunday median facecolor 변경</span></span><br><span class="line">markers[<span class="number">3</span>].set_edgecolor(<span class="string">&quot;k&quot;</span>)         <span class="comment"># Sunday median edgecolor 변경</span></span><br><span class="line">[m.set_sizes([<span class="number">50</span>]) <span class="keyword">for</span> m <span class="keyword">in</span> markers]  <span class="comment"># 전체 median size 변경</span></span><br></pre></td></tr></table></figure></li><li><p>Line2D 객체들 차례입니다.</p></li><li><p><b>일요일 box plot 색을 검정</b>으로 만듭니다.</p></li><li><p><b>굵기 조정은 모두에게 적용</b>합니다.</p></li><li><p><code>i%2 == 0</code>과 <code>i%2 == 1</code>을 번갈아 사용해서 box와 whisker를 번갈아 선택합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># box-whisker: Line2D</span></span><br><span class="line">ls = [l <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.lines)]</span><br><span class="line">ls[-<span class="number">2</span>].set_color(<span class="string">&quot;k&quot;</span>)                 <span class="comment"># Sunday whisker 색상 변경</span></span><br><span class="line">ls[-<span class="number">1</span>].set_color(<span class="string">&quot;k&quot;</span>)                 <span class="comment"># Sunday box 색 변경</span></span><br><span class="line">[l.set_linewidth(<span class="number">1</span>) <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>] <span class="comment"># 전체 box, whisher 굵기 변경</span></span><br><span class="line">[l.set_linewidth(<span class="number">5</span>) <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>] <span class="comment"># 전체 box, whisher 굵기 변경</span></span><br></pre></td></tr></table></figure></li><li><p>이 코드들을 더하면 이런 그림이 나옵니다.<br><img src="violinplotedit05.png"><br></p></li><li><p>마지막으로 불필요한 요소를 제거합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ax.set_ylim(<span class="number">0</span>, )</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;total bill ($)&quot;</span>)</span><br><span class="line">ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>, lw=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="violinplotedit06.png"><br></p></li></ul><h2 id="3-3-응용-hue-amp-split"><a href="#3-3-응용-hue-amp-split" class="headerlink" title="3.3. 응용: hue &amp; split"></a>3.3. 응용: hue &amp; split</h2><ul><li>seaborn violin plot에 hue와 split을 적용하면 의미 전달도 좋고 그림도 제법 멋집니다.</li><li>여기에도 위에서 사용한 기술을 똑같이 적용할 수 있지만, 주의사항이 하나 있습니다.</li><li>반쪽짜리 violin plot 두 개와 center marker가 번갈아 나오기 때문에 list comprehension을 조금 바꿔야 합낟.</li><li><code>i%3 == 0</code>은 Male violin plot, <code>i%3 == 1</code>은 Female violin plot, <code>i%3 == 2</code>는 center marker입니다. <details>  <summary><b>시각화 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">3</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">sns.violinplot(data=df, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, ax=ax,</span><br><span class="line">               color=<span class="string">&quot;pink&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>, split=<span class="literal">True</span>, linewidth=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### violin plot: PolyCollection</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Male</span></span><br><span class="line">violins_M = [c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.collections) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span>]  </span><br><span class="line">[v.set_edgecolor(<span class="string">&quot;gray&quot;</span>) <span class="keyword">for</span> v <span class="keyword">in</span> violins_M]</span><br><span class="line">[v.set_linewidth(<span class="number">1</span>) <span class="keyword">for</span> v <span class="keyword">in</span> violins_M]</span><br><span class="line">violins_M[<span class="number">3</span>].set_facecolor(<span class="string">&quot;gold&quot;</span>)  <span class="comment"># Sunday violin facecolor 변경</span></span><br><span class="line">violins_M[<span class="number">3</span>].set_linewidth(<span class="number">1</span>)          <span class="comment"># Sunday violin facecolor 변경</span></span><br><span class="line">violins_M[<span class="number">3</span>].set_edgecolor(<span class="string">&quot;k&quot;</span>)        <span class="comment"># Sunday violin edgecolor 변경</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Female</span></span><br><span class="line">violins_F = [c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.collections) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">1</span>]  </span><br><span class="line">[v.set_edgecolor(<span class="string">&quot;gray&quot;</span>) <span class="keyword">for</span> v <span class="keyword">in</span> violins_F]</span><br><span class="line">[v.set_linewidth(<span class="number">1</span>) <span class="keyword">for</span> v <span class="keyword">in</span> violins_F]</span><br><span class="line">violins_F[<span class="number">3</span>].set_facecolor(<span class="string">&quot;orange&quot;</span>)  <span class="comment"># Sunday violin facecolor 변경</span></span><br><span class="line">violins_F[<span class="number">3</span>].set_linewidth(<span class="number">1</span>)          <span class="comment"># Sunday violin facecolor 변경</span></span><br><span class="line">violins_F[<span class="number">3</span>].set_edgecolor(<span class="string">&quot;k&quot;</span>)        <span class="comment"># Sunday violin edgecolor 변경</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># median marker: PathCollection</span></span><br><span class="line">markers = [c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.collections) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">2</span>]  </span><br><span class="line">markers[<span class="number">3</span>].set_facecolor(<span class="string">&quot;w&quot;</span>)         <span class="comment"># Sunday median facecolor 변경</span></span><br><span class="line">markers[<span class="number">3</span>].set_edgecolor(<span class="string">&quot;k&quot;</span>)         <span class="comment"># Sunday median edgecolor 변경</span></span><br><span class="line">[m.set_sizes([<span class="number">50</span>]) <span class="keyword">for</span> m <span class="keyword">in</span> markers]  <span class="comment"># 전체 median size 변경</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # box-whisker: Line2D</span></span><br><span class="line">ls = [l <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.lines)]</span><br><span class="line">ls[-<span class="number">2</span>].set_color(<span class="string">&quot;k&quot;</span>)                 <span class="comment"># Sunday whisker 색상 변경</span></span><br><span class="line">ls[-<span class="number">1</span>].set_color(<span class="string">&quot;k&quot;</span>)                 <span class="comment"># Sunday box 색 변경</span></span><br><span class="line">[l.set_linewidth(<span class="number">1</span>) <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>] <span class="comment"># 전체 box, whisher 굵기 변경</span></span><br><span class="line">[l.set_linewidth(<span class="number">5</span>) <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>] <span class="comment"># 전체 box, whisher 굵기 변경</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # spines 제거, grid 추가, xlabel 제거, ylabel 제거</span></span><br><span class="line">ax.set_ylim(<span class="number">0</span>, )</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;total bill ($)&quot;</span>)</span><br><span class="line">ax.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.grid(axis=<span class="string">&quot;y&quot;</span>, lw=<span class="number">1</span>)</span><br><span class="line">legend = ax.legend()</span><br><span class="line">legend.remove()</span><br><span class="line">fig.legend(loc=<span class="string">&quot;upper right&quot;</span>, ncol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="violinplotedit09.png"><br></p><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><ul><li>seaborn violin plot도 결국 Matplotlib 객체 모음입니다.</li><li>여러분의 아이디어를 객체 지향 방식에 마음껏 실어 나르기 바랍니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/seaborn/">seaborn</category>
      
      
    </item>
    
    <item>
      <title>데이터 분석, 의심에서 전달까지</title>
      <link>https://jehyunlee.github.io/2021/10/14/Python-DS-86-datadoubt/</link>
      <guid>https://jehyunlee.github.io/2021/10/14/Python-DS-86-datadoubt/</guid>
      <pubDate>Thu, 14 Oct 2021 00:40:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;한국지능정보사회진흥원(NIA)&lt;/b&gt;에서 기회를 주셔서 발표를 하게 되었습니다. (21.10.08.)&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bigdata-map.kr/&quot;&gt;통합 데이터 지도&lt;/a&gt; 활성화 노력의 일환입니</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><b>한국지능정보사회진흥원(NIA)</b>에서 기회를 주셔서 발표를 하게 되었습니다. (21.10.08.)<ul><li><a href="http://www.bigdata-map.kr/">통합 데이터 지도</a> 활성화 노력의 일환입니다.</li><li>아직 부족한 점이 있을 수도 있지만 적극적으로 피드백을 구하며 점진적으로 보완하고 있습니다.</li><li>많이 활용하시고 피드백을 주시면 서로 좋을 것 같습니다.</li></ul></li></ul><ul><li>그리고 어제 <b>AI Frenz</b>에서 또다시 기회를 주셨네요. (21.10.13.)<ul><li>데이터를 다루면서 느낀 경험, 보고를 하고 받으며 느낀 경험을 정리했습니다.</li><li><b><a href="http://www.bigdata-map.kr/board/review/64?fromBoard=review">발표자료는 여기에서 다운로드</a></b> 받으실 수 있습니다.</li></ul></li></ul><ul><li>발표 영상입니다 (<a href="https://youtu.be/T4jtifT8sJw">Youtube Link</a>)<br></li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/T4jtifT8sJw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br><p><img src="NIA.jpg" alt="NIA 공지"><br></p><p><img src="AIFrenz.png" alt="AI Frenz 공지"></p>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/AI-Frenz/">AI Frenz</category>
      
      <category domain="https://jehyunlee.github.io/tags/NIA/">NIA</category>
      
      
    </item>
    
    <item>
      <title>Population by gender and age</title>
      <link>https://jehyunlee.github.io/2021/10/05/Python-DS-85-popkr/</link>
      <guid>https://jehyunlee.github.io/2021/10/05/Python-DS-85-popkr/</guid>
      <pubDate>Tue, 05 Oct 2021 04:31:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib 객체지향 방식은 훌륭합니다.&lt;/li&gt;
&lt;li&gt;객체를 섬세하게 제어할 수 있고, 시각화 함수를 만들기도 좋습니다.&lt;/li&gt;
&lt;li&gt;데이터 정리부터 객체지향 방식으로 그림을 그리는 예제를 만들어 보았습니다.&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Matplotlib 객체지향 방식은 훌륭합니다.</li><li>객체를 섬세하게 제어할 수 있고, 시각화 함수를 만들기도 좋습니다.</li><li>데이터 정리부터 객체지향 방식으로 그림을 그리는 예제를 만들어 보았습니다.</li></ul><h1 id="1-목표"><a href="#1-목표" class="headerlink" title="1. 목표"></a>1. 목표</h1><ul><li><p>우리나라 인구 데이터로부터 이런 그림을 그릴 것입니다.<br><br><img src="85_popkr_18.png"><br></p></li><li><p>한번 그리고 말 것이 아닙니다.</p></li><li><p>시나 도 이름을 입력하면 데이터만 바뀐 같은 형식의 그림을 찍어낼 것입니다.<br><br><img src="85_popkr_26.png"><br></p></li></ul><h1 id="2-데이터-준비"><a href="#2-데이터-준비" class="headerlink" title="2. 데이터 준비"></a>2. 데이터 준비</h1><blockquote><p><a href="http://www.yes24.com/Product/Goods/72227684">모두의 데이터 분석 with 파이썬</a><br><a href="https://jumin.mois.go.kr/index.jsp#">주민등록 인구 및 세대현황</a></p></blockquote><ul><li><a href="http://www.yes24.com/Product/Goods/72227684">모두의 데이터 분석 with 파이썬</a>에는 인구 데이터를 내려받아 분포를 bar plot으로 표현하는 내용이 있습니다.</li><li>같은 데이터를 조금 더 깔끔하게, 조금 체계적으로 만들어 보겠습니다.</li></ul><h2 id="2-1-데이터-다운로드"><a href="#2-1-데이터-다운로드" class="headerlink" title="2.1. 데이터 다운로드"></a>2.1. 데이터 다운로드</h2><ul><li><p>아래와 같이 <b>주민등록 인구 및 세대현황</b>자료에서 csv 파일을 다운받습니다.<br></p></li><li><p><a href="202108_202108_%EC%97%B0%EB%A0%B9%EB%B3%84%EC%9D%B8%EA%B5%AC%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv">파일 다운로드</a><br><img src="85_popkr_27.png"><br></p></li><li><p>주피터 노트북을 켜고 데이터 분석을 준비합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화 설정</span></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;NanumGothic&#x27;</span>, <span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-데이터-전처리"><a href="#2-2-데이터-전처리" class="headerlink" title="2.2. 데이터 전처리"></a>2.2. 데이터 전처리</h2><ul><li><p>다운받은 파일을 파이썬으로 열어봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_popkr = pd.read_csv(<span class="string">&quot;202108_202108_연령별인구현황_월간.csv&quot;</span>, encoding=<span class="string">&quot;euc-kr&quot;</span>)</span><br><span class="line">df_popkr.head()</span><br></pre></td></tr></table></figure><p><img src="85_popkr_01.png"><br></p></li><li><p>연령대와 성별이 column으로 정리되어 있고 행정구역들이 첫번째 column에 나열되어 있습니다.</p></li><li><p>분석하기에 좋은 모양은 아닙니다. 전처리를 들어갑니다.</p></li></ul><h3 id="2-2-1-데이터-내용-정리"><a href="#2-2-1-데이터-내용-정리" class="headerlink" title="2.2.1. 데이터 내용 정리"></a>2.2.1. 데이터 내용 정리</h3><ul><li><p>행정구역에서 불필요한 번호를 떼어냅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_popkr[<span class="string">&quot;행정구역&quot;</span>] = df_popkr[<span class="string">&quot;행정구역&quot;</span>].<span class="built_in">str</span>.split(<span class="string">&quot;(&quot;</span>).<span class="built_in">str</span>[<span class="number">0</span>]</span><br><span class="line">df_popkr.head()</span><br></pre></td></tr></table></figure><p><img src="85_popkr_02.png"><br></p></li><li><p>행정구역에서 번호가 떨어진 뒤에 빈 칸이 붙어 있습니다.</p></li><li><p>숫자들 사이에는 자리수를 표현하는 쉼표(,)가 붙어 있습니다.</p></li><li><p><code>df.replace()</code>로 처리합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_popkr.replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>, regex=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_popkr.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>, regex=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_popkr.head()</span><br></pre></td></tr></table></figure><p><img src="85_popkr_03.png"><br></p></li></ul><h3 id="2-2-2-성별-분리"><a href="#2-2-2-성별-분리" class="headerlink" title="2.2.2. 성별 분리"></a>2.2.2. 성별 분리</h3><ul><li>남성과 여성 데이터를 따로 그릴 것입니다. 데이터부터 분리합니다.</li><li>먼저 남성 데이터를 정리합니다.</li><li>컬럼명에 <b>“남”</b>이 있는 것들을 골라냅니다.</li><li>그 중에서도 불필요한 내용을 제거하기 위해 <b>“세”</b>가 있는 것만 또 따로 분리합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_popkrM = df_popkr.<span class="built_in">filter</span>(like=<span class="string">&quot;남&quot;</span>).<span class="built_in">filter</span>(like=<span class="string">&quot;세&quot;</span>)</span><br><span class="line">df_popkrM.head()</span><br></pre></td></tr></table></figure><img src="85_popkr_04.png"><br></li></ul><h3 id="2-2-3-행-열-전환"><a href="#2-2-3-행-열-전환" class="headerlink" title="2.2.3. 행-열 전환"></a>2.2.3. 행-열 전환</h3><ul><li>데이터를 편하게 다루려면 열에 지역명, 행에 나이대를 놓는 것이 좋습니다.</li><li><code>df.T</code>로 행과 열을 바꾼 뒤 <code>df.astype(int</code>)로 정수형으로 변환합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_popkrMT = df_popkrM.T</span><br><span class="line">df_popkrMT.columns = df_popkr[<span class="string">&quot;행정구역&quot;</span>].values</span><br><span class="line">df_popkrMT = df_popkrMT.astype(<span class="built_in">int</span>)</span><br><span class="line">df_popkrMT.head()</span><br></pre></td></tr></table></figure><img src="85_popkr_05.png"><br></li></ul><h3 id="2-2-4-“나이”만-남기기"><a href="#2-2-4-“나이”만-남기기" class="headerlink" title="2.2.4. “나이”만 남기기"></a>2.2.4. “나이”만 남기기</h3><ul><li>나이 정보가 index로 오긴 했지만 불필요한 정보들이 많습니다.</li><li><code>pd.Series.str.split()</code>을 사용해 나이만 남깁니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_popkrMT[<span class="string">&quot;나이&quot;</span>] = df_popkrMT.index.<span class="built_in">str</span>.split(<span class="string">&quot;_&quot;</span>).<span class="built_in">str</span>[<span class="number">2</span>]</span><br><span class="line">df_popkrMT.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_popkrMT</span><br></pre></td></tr></table></figure><img src="85_popkr_06.png"><br></li></ul><h3 id="2-2-5-여성-데이터-정리"><a href="#2-2-5-여성-데이터-정리" class="headerlink" title="2.2.5. 여성 데이터 정리"></a>2.2.5. 여성 데이터 정리</h3><ul><li>같은 요령으로 여성 데이터도 정리합니다.</li><li>위에서 뭔가 복잡하게 한 것 같지만 코드 6줄로 정리됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df_popkrF = df_popkr.<span class="built_in">filter</span>(like=<span class="string">&quot;여&quot;</span>).<span class="built_in">filter</span>(like=<span class="string">&quot;세&quot;</span>)</span><br><span class="line">df_popkrFT = df_popkrF.T</span><br><span class="line">df_popkrFT.columns = df_popkr[<span class="string">&quot;행정구역&quot;</span>].values</span><br><span class="line">df_popkrFT = df_popkrFT.astype(<span class="built_in">int</span>)</span><br><span class="line">df_popkrFT[<span class="string">&quot;나이&quot;</span>] = df_popkrFT.index.<span class="built_in">str</span>.split(<span class="string">&quot;_&quot;</span>).<span class="built_in">str</span>[<span class="number">2</span>]</span><br><span class="line">df_popkrFT.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_popkrFT.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="85_popkr_07.png"><br></li></ul><h1 id="3-데이터-시각화"><a href="#3-데이터-시각화" class="headerlink" title="3. 데이터 시각화"></a>3. 데이터 시각화</h1><ul><li>이제 정리한 데이터를 그림으로 표현할 차례입니다.</li><li>글의 맨 처음에서 어떻게 그리겠다는 것을 먼저 보여드리긴 했지만 여기서 고민이 필요합니다.</li><li><b>남 vs 여</b>구도를 어떻게 살릴지,</li><li><b>연령대간 변화율</b>이 아닌 <b>연령대별 데이터</b>를 어떻게 표현할지에 대한 고민입니다.</li></ul><ul><li>성별, 연령별 인구 분포는 많이 사용하는 형식이 있습니다.</li><li><b>등을 맞대고 있는 구도</b>로 <b>남 vs 여</b>를 표현합니다.</li><li><b>bar plot</b>으로 <b>해당 구간의 데이터</b>에 집중합니다.<br><br><img src="85_popkr_08.jpg" alt="대강 이런 그림입니다."><br></li></ul><h2 id="3-1-Axes-제작"><a href="#3-1-Axes-제작" class="headerlink" title="3.1. Axes 제작"></a>3.1. Axes 제작</h2><ul><li><code>plt.subplots()</code>명령으로 <code>fig</code>(Figure)와 <code>axs</code>(Axes)를 동시에 생성합니다.</li><li><code>ncols=2</code>로 bar plot이 들어갈 Axes를 두 개 만듭니다.</li><li><code>gridspec_kw=&#123;&quot;wspace&quot;:0&#125;</code>으로 Axes 사이 간격을 없앱니다.</li><li><code>sharey=True</code>로 두 Axes의 y 범위를 통일합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, </span><br><span class="line">                        figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><img src="85_popkr_09.png"><br></li></ul><h2 id="3-2-bar-plot"><a href="#3-2-bar-plot" class="headerlink" title="3.2. bar plot"></a>3.2. bar plot</h2><ul><li>공간이 준비됐으니 데이터를 넣습니다.</li><li><code>ax.barh()</code>명령으로 가로 bar plot을 그립니다.</li><li>x에 나이, y에 전국 인구 수를 넣습니다.</li><li>남성은 green, 여성은 darkorange로 표현합니다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br></pre></td></tr></table></figure><img src="85_popkr_10.png"><br></li></ul><h2 id="3-3-남성-좌우-반전"><a href="#3-3-남성-좌우-반전" class="headerlink" title="3.3. 남성 좌우 반전"></a>3.3. 남성 좌우 반전</h2><ul><li>남녀가 등을 맞대고 있도록 표현하려면 남성 데이터의 좌우를 뒤집어야 합니다.</li><li>데이터 범위의 최대값<code>xmax</code>을 충분히 큰 수로 지정하고,</li><li><b>남성은 xmax에서 0으로, 여성은 0에서 xmax로 가도록</b> 지정합니다.</li><li><code>ax.set_xlim()</code>을 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">4.5e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br></pre></td></tr></table></figure><img src="85_popkr_11.png"><br></li></ul><h2 id="3-4-xticklabels-수정"><a href="#3-4-xticklabels-수정" class="headerlink" title="3.4. xticklabels 수정"></a>3.4. xticklabels 수정</h2><ul><li>x축 눈금 레이블(xticklabels)이 0부터 4까지 적혀있고 1e6이라는 숫자가 함께 있습니다.</li><li>$0 \times 10^6$ ~ $4\times 10^6$ 이라는 의미이지만 잘 읽히지 않습니다.</li><li>$4\times 10^6$은 우리 뇌 속에서 <b>4,000,000</b>이 되고, 다시 <b>4백만</b>이 됩니다.</li><li>이럴 바에는 그냥 <b>4백만</b>이라고 써 주는게 낫습니다. </li><li><code>f-string</code>과 list comprehension을 이용해 xticklabels를 수정합니다.</li><li>Axes 두 개에 똑같은 일을 해야 합니다. <code>for loop</code>으로 반복시킵니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">4.5e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br><span class="line"></span><br><span class="line">xticks = np.arange(<span class="number">0</span>, xmax, <span class="number">1e6</span>)</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*<span class="number">1e-6</span>)&#125;</span>백만&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br></pre></td></tr></table></figure><img src="85_popkr_12.png"><br></li></ul><h2 id="3-5-title-grid-추가"><a href="#3-5-title-grid-추가" class="headerlink" title="3.5. title, grid 추가"></a>3.5. title, grid 추가</h2><ul><li><p>남성과 여성을 나란히 그렸으니 어디가 어디인지 적어줘야 합니다.</p></li><li><p>중앙에서 좌우로 뻗은 막대들이 언뜻 보면 비슷합니다.</p></li><li><p><b>정량적인 비교</b>를 돕기 위해 grid를 추가합니다.</p></li><li><p>제목은 <code>ax.set_title()</code>, 눈금은 <code>ax.grid()</code>명령입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">4.5e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br><span class="line"></span><br><span class="line">xticks = np.arange(<span class="number">0</span>, xmax, <span class="number">1e6</span>)</span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;남성&quot;</span>, <span class="string">&quot;여성&quot;</span>]):</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*<span class="number">1e-6</span>)&#125;</span>백만&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.grid(c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    ax.set_title(title, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_13.png"><br></p></li><li><p>이제 <b>남성과 여성의 차이</b>가 조금 눈에 들어옵니다.</p></li><li><p>70대 여성은 2백만명이 넘지만 70대 남성은 2백만명이 못 됩니다.</p></li><li><p>10세 미만은 여성보다 남성이 더 많습니다.</p></li></ul><h2 id="3-6-text-추가"><a href="#3-6-text-추가" class="headerlink" title="3.6. text 추가"></a>3.6. text 추가</h2><ul><li>grid 덕택에 조금은 읽기가 수월해졌지만 정확한 값은 보이지 않습니다.</li><li><b>숫자는 신빙성을 부여합니다. 활용성도 높아집니다.</b></li><li><code>ax.text()</code>명령으로 글자를 넣을 수 있습니다.</li></ul><ul><li><p>그런데 어디에 넣을까요?</p></li><li><p>막대 끝에 넣으면 어떨까요? 데이터의 편차가 돋보일 것입니다.</p></li><li><p>bar plot은 Matplotlib이 patch라는 객체로 관리합니다.</p></li><li><p><code>ax.patches[0]</code>이라면 맨 처음에 붙인 객체를 의미합니다.</p></li><li><p><code>ax.patches</code>와 for loop을 결합하면 하나씩 순회하면서 숫자를 달아봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">4.5e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br><span class="line"></span><br><span class="line">xticks = np.arange(<span class="number">0</span>, xmax, <span class="number">1e6</span>)</span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;남성&quot;</span>, <span class="string">&quot;여성&quot;</span>]):</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*<span class="number">1e-6</span>)&#125;</span>백만&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.grid(c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    ax.set_title(title, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches):</span><br><span class="line">        w = p.get_width()</span><br><span class="line">        ax.text(w, i, <span class="string">f&quot; <span class="subst">&#123;<span class="built_in">format</span>(w, <span class="string">&#x27;,&#x27;</span>)&#125;</span> &quot;</span>, </span><br><span class="line">                fontsize=<span class="string">&quot;x-small&quot;</span>, va=<span class="string">&quot;center&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_14.png"><br></p></li><li><p>2중 for loop으로 Axes마다, patch마다 숫자를 달았습니다.</p></li><li><p><code>ax.patch</code>에 <code>.get_width()</code>를 적용해서 위치를 구했습니다.</p></li><li><p><code>format()</code>으로 천 단위마다 쉼표를 추가했고, ha=”right”로 우측 정렬을 했습니다.</p></li><li><p>그런데 여성 데이터마저 우측 정렬이 되어버렸습니다. <code>if</code>를 사용해 여성은 좌측 정렬을 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=<span class="string">&quot;darkorange&quot;</span>)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">6e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br><span class="line"></span><br><span class="line">xticks = np.arange(<span class="number">0</span>, xmax, <span class="number">1e6</span>)</span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;남성&quot;</span>, <span class="string">&quot;여성&quot;</span>]):</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*<span class="number">1e-6</span>)&#125;</span>백만&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.grid(c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    ax.set_title(title, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches):</span><br><span class="line">        w = p.get_width()</span><br><span class="line">        <span class="keyword">if</span> ax == axs[<span class="number">0</span>]:</span><br><span class="line">            ha = <span class="string">&quot;right&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line">        </span><br><span class="line">        ax.text(w, i, <span class="string">f&quot; <span class="subst">&#123;<span class="built_in">format</span>(w, <span class="string">&#x27;,&#x27;</span>)&#125;</span> &quot;</span>, </span><br><span class="line">                fontsize=<span class="string">&quot;x-small&quot;</span>, va=<span class="string">&quot;center&quot;</span>, ha=ha)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_15.png"><br></p></li></ul><h2 id="3-7-전체-제목-추가-세부-수정"><a href="#3-7-전체-제목-추가-세부-수정" class="headerlink" title="3.7. 전체 제목 추가, 세부 수정"></a>3.7. 전체 제목 추가, 세부 수정</h2><ul><li>이제 거의 다 그렸습니다. 한번씩 보면서 맘에 들지 않는 부분을 수정합니다.</li><li>먼저 <b>grid와 글자가 너무 난잡합니다.</b></li><li><code>ax.grid(axis=&quot;x&quot;)</code>로 세로선만 남깁니다. </li><li>숫자 색상에 남성과 여성에 사용한 색상을 적용합니다.</li><li>그리고 왼쪽은 남성, 오른쪽은 여성이지만 <b>이게 어디 데이터인지</b>가 없네요.</li><li><code>fig.suptitle()</code>로 추가합니다.</li><li>구성요소간 간격 정리를 위해 <code>fig.tight_layout()</code>을 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">c_M = <span class="string">&quot;green&quot;</span></span><br><span class="line">c_F = <span class="string">&quot;darkorange&quot;</span></span><br><span class="line">axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[<span class="string">&quot;전국&quot;</span>], color=c_M)</span><br><span class="line">axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[<span class="string">&quot;전국&quot;</span>], color=c_F)</span><br><span class="line"></span><br><span class="line">xmax = <span class="number">6e6</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(xmax, <span class="number">0</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, xmax)</span><br><span class="line"></span><br><span class="line">xticks = np.arange(<span class="number">0</span>, xmax, <span class="number">1e6</span>)</span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;남성&quot;</span>, <span class="string">&quot;여성&quot;</span>]):</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*<span class="number">1e-6</span>)&#125;</span>백만&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.grid(axis=<span class="string">&quot;x&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">    ax.set_title(title, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches):</span><br><span class="line">        w = p.get_width()</span><br><span class="line">        <span class="keyword">if</span> ax == axs[<span class="number">0</span>]:</span><br><span class="line">            ha = <span class="string">&quot;right&quot;</span></span><br><span class="line">            c = c_M</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line">            c = c_F</span><br><span class="line">        </span><br><span class="line">        ax.text(w, i, <span class="string">f&quot; <span class="subst">&#123;<span class="built_in">format</span>(w, <span class="string">&#x27;,&#x27;</span>)&#125;</span> &quot;</span>, </span><br><span class="line">                c=c, fontsize=<span class="string">&quot;x-small&quot;</span>, va=<span class="string">&quot;center&quot;</span>, ha=ha, </span><br><span class="line">                fontweight=<span class="string">&quot;bold&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig.suptitle(<span class="string">&quot;                 전국&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><img src="85_popkr_17.png"><br></li></ul><h2 id="3-8-함수로-만들기"><a href="#3-8-함수로-만들기" class="headerlink" title="3.8. 함수로 만들기"></a>3.8. 함수로 만들기</h2><ul><li><p>이제 조금 쓸만해진 것 같습니다.</p></li><li><p>전국 말고 시도별 데이터도 시각화하고 싶은데, 그 때마다 코드를 복붙하기 불편합니다.</p></li><li><p><b>함수로 만들어버립니다.</b></p></li><li><p>변수 이름도 조금은 더 직관적으로 만들고, 인구 수에 따라 적절히 스케일링할 수 있는 장치를 추가합니다.</p></li><li><p>지역의 인구에 따라 <b>백만</b>말고 <b>십만</b>, <b>만</b>, <b>천</b>명이 더 유용할 때도 있겠죠.</p></li><li><p><code>fig</code>를 return해서 여차하면 추가 수정을 할 수 있도록 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_pop</span>(<span class="params">loc, popmax=<span class="number">6e6</span>, poptick=<span class="number">1e6</span></span>):</span></span><br><span class="line">    fig, axs = plt.subplots(ncols=<span class="number">2</span>, sharey=<span class="literal">True</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), gridspec_kw=&#123;<span class="string">&quot;wspace&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    c_M = <span class="string">&quot;green&quot;</span></span><br><span class="line">    c_F = <span class="string">&quot;darkorange&quot;</span></span><br><span class="line">    axs[<span class="number">0</span>].barh(df_popkrMT[<span class="string">&quot;나이&quot;</span>], df_popkrMT[loc], color=c_M)</span><br><span class="line">    axs[<span class="number">1</span>].barh(df_popkrFT[<span class="string">&quot;나이&quot;</span>], df_popkrFT[loc], color=c_F)</span><br><span class="line"></span><br><span class="line">    axs[<span class="number">0</span>].set_xlim(popmax, <span class="number">0</span>)</span><br><span class="line">    axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, popmax)</span><br><span class="line"></span><br><span class="line">    xticks = np.arange(<span class="number">0</span>, popmax, poptick)</span><br><span class="line">    <span class="keyword">if</span> poptick &gt;= <span class="number">1e6</span>:</span><br><span class="line">        factor, unit = <span class="number">1e-6</span>, <span class="string">&quot;백만&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1e5</span> &lt;= poptick &lt; <span class="number">1e6</span>:</span><br><span class="line">        factor, unit = <span class="number">1e-5</span>, <span class="string">&quot;십만&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1e4</span> &lt;= poptick &lt; <span class="number">2e5</span>:</span><br><span class="line">        factor, unit = <span class="number">1e-4</span>, <span class="string">&quot;만&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1e3</span> &lt;= poptick &lt; <span class="number">2e4</span>:</span><br><span class="line">        factor, unit = <span class="number">1e-3</span>, <span class="string">&quot;천&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;남성&quot;</span>, <span class="string">&quot;여성&quot;</span>]):</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(x*factor)&#125;</span><span class="subst">&#123;unit&#125;</span>&quot;</span> <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;x&quot;</span>, c=<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">        ax.set_title(title, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches):</span><br><span class="line">            w = p.get_width()</span><br><span class="line">            <span class="keyword">if</span> ax == axs[<span class="number">0</span>]:</span><br><span class="line">                ha = <span class="string">&quot;right&quot;</span></span><br><span class="line">                c = c_M</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ha = <span class="string">&quot;left&quot;</span></span><br><span class="line">                c = c_F</span><br><span class="line"></span><br><span class="line">            ax.text(w, i, <span class="string">f&quot; <span class="subst">&#123;<span class="built_in">format</span>(w, <span class="string">&#x27;,&#x27;</span>)&#125;</span> &quot;</span>, </span><br><span class="line">                    c=c, fontsize=<span class="string">&quot;x-small&quot;</span>, va=<span class="string">&quot;center&quot;</span>, ha=ha, </span><br><span class="line">                    fontweight=<span class="string">&quot;bold&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    fig.suptitle(<span class="string">f&quot;                 <span class="subst">&#123;loc&#125;</span>&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fig</span><br></pre></td></tr></table></figure></li><li><p>이 함수로 전국 인구 분포를 그려봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plot_pop(<span class="string">&quot;전국&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_18.png"><br></p></li><li><p>똑같이 나왔습니다. :)</p></li><li><p>서울시를 해볼까요? 구간별 인구 단위가 <b>십만</b>으로 줄어듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plot_pop(<span class="string">&quot;서울특별시&quot;</span>, popmax=<span class="number">1e6</span>, poptick=<span class="number">2e5</span>)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_19.png"><br></p></li><li><p>이제는 세종시 차례입니다. 구간별 인구 단위가 <b>만</b>단위로 줄어듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plot_pop(<span class="string">&quot;세종특별자치시&quot;</span>, popmax=<span class="number">1e6</span>, poptick=<span class="number">2e5</span>)</span><br></pre></td></tr></table></figure><p><img src="85_popkr_20.png"><br></p></li><li><p>같은 요령으로 영호남과 다른 광역시도 그릴 수 있습니다.<br><br><img src="85_popkr_26.png"><br></p></li></ul><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><ul><li>수작업 대신 코딩을 왜 하냐는 질문에 가장 좋은 답변 중 하나는 <b>반복 작업 처리</b>일 것입니다.</li><li><b>수작업보다 체계적인 작업</b>도 답변이 될 수 있을 것입니다.</li><li>데이터 시각화 작업을 체계적으로, 그리고 반복에 대응하는 방법은 <b>객체지향 방식</b>입니다.</li><li>Matplotlib을 다루시는 많은 분들께 평안이 깃들기를 기원합니다. </li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/pandas/">pandas</category>
      
      
    </item>
    
    <item>
      <title>pytorch &amp; sklearn pipeline</title>
      <link>https://jehyunlee.github.io/2021/09/29/Python-DL-7-skorch_pipeline/</link>
      <guid>https://jehyunlee.github.io/2021/09/29/Python-DL-7-skorch_pipeline/</guid>
      <pubDate>Wed, 29 Sep 2021 02:57:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;저는 tabular data를 다룹니다.&lt;/li&gt;
&lt;li&gt;간혹 딥러닝을 하고 싶지만 표준화등 전처리도 해야 합니다.&lt;/li&gt;
&lt;li&gt;범주형 변수를 인코딩해서 feature importance도 보고 싶습니다.&lt;/li&gt;
&lt;li&gt;skorc</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>저는 tabular data를 다룹니다.</li><li>간혹 딥러닝을 하고 싶지만 표준화등 전처리도 해야 합니다.</li><li>범주형 변수를 인코딩해서 feature importance도 보고 싶습니다.</li><li>skorch(sklearn + pytorch)를 사용하면 가능합니다.</li></ul><h1 id="1-skorch-sklearn-pytorch"><a href="#1-skorch-sklearn-pytorch" class="headerlink" title="1. skorch = sklearn + pytorch"></a>1. skorch = sklearn + pytorch</h1><p><img src="7_skorch_pipeline.png"></p><blockquote><p><a href="https://skorch.readthedocs.io/en/stable/index.html">skorch documentation</a><br><a href="https://skorch.readthedocs.io/en/stable/user/tutorials.html">skorch tutorials</a></p></blockquote><ul><li>저같은 사람들을 위해 skorch라는 라이브러리가 있습니다.</li><li>scikit-learn의 장점인 <b>grid search 등을 딥러닝과 함께</b> 사용할 수 있고</li><li>tutorial에서 transfer learning, U-Net, Seq2Seq 등을 지원합니다.<br><br><img src="7_skorch_pipeline_9.png"><br></li></ul><h1 id="2-sklearn-pipeline"><a href="#2-sklearn-pipeline" class="headerlink" title="2. sklearn pipeline"></a>2. sklearn pipeline</h1><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html">scikit-learn.pipeline.Pipeline</a></p></blockquote><ul><li>scikit-learn의 파이프라인은 데이터 전처리에서 발생하는 불확실성을 줄여줍니다.</li><li>데이터가 거쳐갈 길을 단단하게 만들어줌으로써 실수를 사전에 예방할 수 있습니다.</li><li>특히 PCA나 One-hot encoding처럼 <b>trainset의 정보를 기억해서 testset에 적용해야 할 때 좋습니다</b>.</li></ul><h2 id="2-1-예제-데이터셋"><a href="#2-1-예제-데이터셋" class="headerlink" title="2.1. 예제 데이터셋"></a>2.1. 예제 데이터셋</h2><ul><li>펭귄 데이터셋을 사용해서 펭귄 체중 예측모델을 만들어 봅니다.</li><li>편의를 위해 결측치까지 싹 지운 채로 시작합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화 설정</span></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">font_title = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;NanumGothic&#x27;</span>, <span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 펭귄 데이터셋 불러오기</span></span><br><span class="line">df_peng = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">df_peng.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">df_peng.isna().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></li><li>실행 결과: 결측치가 모두 제거되었습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">species              0</span><br><span class="line">island               0</span><br><span class="line">bill_length_mm       0</span><br><span class="line">bill_depth_mm        0</span><br><span class="line">flipper_length_mm    0</span><br><span class="line">body_mass_g          0</span><br><span class="line">sex                  0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li></ul><ul><li>데이터셋을 준비합니다.</li><li>펭귄 체중만 y, 나머지는 모두 X입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = df_peng[<span class="string">&quot;body_mass_g&quot;</span>]</span><br><span class="line">X = df_peng.drop(<span class="string">&quot;body_mass_g&quot;</span>, axis=<span class="number">1</span>)</span><br><span class="line">X.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_10.png"><br></li></ul><ul><li>trainset과 testset으로 나눕니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data split</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-pipeline-구축"><a href="#2-2-pipeline-구축" class="headerlink" title="2.2. pipeline 구축"></a>2.2. pipeline 구축</h2><ul><li>scikit-learn으로 pipeline을 구축합니다.</li><li>numerical feature는 회귀모델 적용을 고려한 <code>PolynomialFeatures</code>와</li><li>데이터 정규화를 위한 <code>RobustScaler</code>를 거칩니다.</li><li>categorical feature는 <code>OneHotEncoder</code>를 거칩니다.</li></ul><ul><li><p>필요한 라이브러리를 불러옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoder</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> RobustScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># machine learning models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline</span></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"></span><br><span class="line"><span class="comment"># metrics</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br></pre></td></tr></table></figure></li><li><p>pipeline을 구축하는 함수를 만듭니다.</p></li><li><p><code>get_model_0()</code>을 실행하면 파이프라인이 만들어질 것입니다.</p></li><li><p>전처리 후 머신러닝 모델로는 선형회귀와 랜덤포레스트를 선택할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_0</span>(<span class="params">X_cols, degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    X_cols_ = deepcopy(X_cols)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1-1.categorical feature에 one-hot encoding 적용</span></span><br><span class="line">    cat_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) &amp; <span class="built_in">set</span>([<span class="string">&quot;species&quot;</span>, <span class="string">&quot;island&quot;</span>, <span class="string">&quot;sex&quot;</span>]))</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>, handle_unknown=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-2.numerical feature는 Power Transform과 Scaler를 거침</span></span><br><span class="line">    num_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) - <span class="built_in">set</span>(cat_features))</span><br><span class="line">    num_features.sort()</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree)), </span><br><span class="line">                                      (<span class="string">&quot;scaler&quot;</span>, RobustScaler())</span><br><span class="line">                                     ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 인자 종류별 전처리 적용</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features), </span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 전처리 후 머신러닝 모델 적용</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;lr&quot;</span>:</span><br><span class="line">        ml = LinearRegression(fit_intercept=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;rf&quot;</span>:</span><br><span class="line">        ml = RandomForestRegressor()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 3. Pipeline</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;ml&quot;</span>, ml)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li><li><p>6번째, 10번째 행을 보시면 조금 특이한 처리가 들어가 있습니다.</p></li><li><p><b>feature selection에 사용되는 장치</b>입니다.</p></li><li><p>feature 이름들을 하드코딩하면 feature selection이 불가능하기 때문에 이렇게 합니다.</p></li></ul><ul><li>만들어진 구조를 확인합니다.</li><li>일단 모든 인자를 모두 입력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> set_config</span><br><span class="line">set_config(display=<span class="string">&#x27;diagram&#x27;</span>)</span><br><span class="line">model_0 = get_model_0(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span>)</span><br><span class="line">model_0</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_11.png"><br></li></ul><h2 id="2-3-pipeline-전처리-확인"><a href="#2-3-pipeline-전처리-확인" class="headerlink" title="2.3. pipeline 전처리 확인"></a>2.3. pipeline 전처리 확인</h2><ul><li>pipeline에서 전처리 모듈만 떼어서 실행합니다.</li><li>pipeline의 모듈을 호출하는 방법은 <b>모델이름[“모듈이름”]</b>입니다.</li><li>따라서 우리의 전처리 모듈은 <b>model_0[“preprocessor”]</b>입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X_train_pp = model_0[<span class="string">&quot;preprocessor&quot;</span>].fit_transform(X_train)</span><br><span class="line"><span class="built_in">print</span>(X_train_pp.shape)</span><br><span class="line">X_train_pp[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li>실행 결과: 첫 행만 찍어봤습니다. <b>숫자가 많습니다</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">266</span>, <span class="number">12</span>)</span><br><span class="line">array([ <span class="number">0.</span>        , -<span class="number">0.80645161</span>,  <span class="number">0.08579088</span>,  <span class="number">1.</span>        ,  <span class="number">1.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">1.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        ,  <span class="number">1.</span>        ])</span><br></pre></td></tr></table></figure></li></ul><ul><li>6개의 인자를 넣었는데 12개가 나왔습니다.</li><li>처음의 0은 LinearRegression에서 만든 intercept 항입니다.</li><li>네번째 1부터는 species, island, sex의 one-hot encoding 결과물입니다.</li></ul><ul><li>전처리 이후 데이터 분포도 확인합니다.</li><li>시각화 코드는 다소 길고, 여기선 중요하지 않아서 접었습니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Figure 생성</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Subfigures 생성</span></span><br><span class="line">subfigs = fig.subfigures(nrows=<span class="number">2</span>, wspace=<span class="number">0.05</span>)</span><br><span class="line">subfigs[<span class="number">0</span>].set_facecolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">subfigs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;beige&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subfigs[0]: raw data</span></span><br><span class="line">axs0 = subfigs[<span class="number">0</span>].subplots(ncols=<span class="number">3</span>, nrows=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;bill_depth_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;bill_length_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">1</span>])</span><br><span class="line">sns.kdeplot(X_train[<span class="string">&quot;flipper_length_mm&quot;</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs0[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># subfigs[1]: preprocessed data</span></span><br><span class="line">axs1 = subfigs[<span class="number">1</span>].subplots(ncols=<span class="number">3</span>, nrows=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">1</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">0</span>])</span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">2</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">1</span>])</span><br><span class="line">sns.kdeplot(X_train_pp[:,<span class="number">3</span>], cut=<span class="number">0</span>, fill=<span class="literal">True</span>, ax=axs1[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs1:</span><br><span class="line">    ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;gray&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> axs <span class="keyword">in</span> [axs0, axs1]:</span><br><span class="line">    <span class="keyword">for</span> i, (ax, title) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(axs, [<span class="string">&#x27;bill_depth_mm&#x27;</span>, <span class="string">&#x27;bill_length_mm&#x27;</span>, <span class="string">&#x27;flipper_length_mm&#x27;</span>])):</span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        ax.set_title(<span class="string">f&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            ax.set_ylabel(<span class="string">&quot; \n&quot;</span>)</span><br><span class="line"></span><br><span class="line">subfigs[<span class="number">0</span>].suptitle(<span class="string">&quot;raw data\n&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">subfigs[<span class="number">1</span>].suptitle(<span class="string">&quot;preprocessed data\n&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">fig.suptitle(<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="7_skorch_pipeline_1.png"><br></p><ul><li>RobustScaler의 효과가 잘 보입니다.</li></ul><h2 id="2-3-pipeline-학습"><a href="#2-3-pipeline-학습" class="headerlink" title="2.3. pipeline 학습"></a>2.3. pipeline 학습</h2><ul><li><p><b>pipeline 전체를 사용해서 학습</b>시킵니다.</p></li><li><p>명령은 scikit-learn 스타일 그대로 <code>.fit()</code>입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_0.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></li><li><p>학습이 잘 되었는지 결과를 확인합니다.</p></li><li><p>parity plot 시각화 코드는 접어두었습니다.</p><details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parity plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">model, y_true, y_pred=<span class="literal">None</span>, X_to_pred=<span class="literal">None</span>, ax=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> y_pred <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        y_pred = model.predict(X_to_pred)</span><br><span class="line">    ax.scatter(y_true, y_pred, **kwargs)</span><br><span class="line">    xbound = ax.get_xbound()</span><br><span class="line">    xticks = [x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> xbound[<span class="number">0</span>] &lt;= x &lt;= xbound[<span class="number">1</span>]]</span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    ax.set_yticks(xticks)</span><br><span class="line">    ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])</span><br><span class="line">    dxbound = <span class="number">0.05</span>*(xbound[<span class="number">1</span>]-xbound[<span class="number">0</span>])</span><br><span class="line">    ax.set_xlim(xbound[<span class="number">0</span>]-dxbound, xbound[<span class="number">1</span>]+dxbound)</span><br><span class="line">    ax.set_ylim(xbound[<span class="number">0</span>]-dxbound, xbound[<span class="number">1</span>]+dxbound)</span><br><span class="line">    </span><br><span class="line">    rmse = mean_squared_error(y_true, y_pred, squared=<span class="literal">False</span>)</span><br><span class="line">    r2 = r2_score(y_true, y_pred)</span><br><span class="line">    ax.text(<span class="number">0.95</span>, <span class="number">0.1</span>, <span class="string">f&quot;RMSE = <span class="subst">&#123;rmse:<span class="number">.2</span>f&#125;</span>\nR2 = <span class="subst">&#123;r2:<span class="number">.2</span>f&#125;</span>&quot;</span>, transform=ax.transAxes, </span><br><span class="line">            fontsize=<span class="number">14</span>, ha=<span class="string">&quot;right&quot;</span>, va=<span class="string">&quot;bottom&quot;</span>, bbox=&#123;<span class="string">&quot;boxstyle&quot;</span>:<span class="string">&quot;round&quot;</span>, <span class="string">&quot;fc&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;pad&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    ax.grid(<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line">    </span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">plot_parity(model_0, y_train, X_to_pred=X_train, ax=axs[<span class="number">0</span>], c=<span class="string">&quot;g&quot;</span>, s=<span class="number">10</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plot_parity(model_0, y_test, X_to_pred=X_test, ax=axs[<span class="number">1</span>], c=<span class="string">&quot;m&quot;</span>, s=<span class="number">10</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]):</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="7_skorch_pipeline_2.png"><br></p><ul><li><p>단순 선형 회귀 모델인데 제법 쓸만합니다.</p></li><li><p>이제 pipeline에 랜덤포레스트 모델을 탑재해서 돌려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_1 = get_model_0(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;rf&quot;</span>)</span><br><span class="line">model_1.fit(X_train, y_train)</span><br><span class="line">model_1</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_3.png"><br></p></li><li><p>과적합이 의심되긴 하지만 랜덤포레스트도 잘 나오네요.</p></li></ul><ul><li><p>이번에는 <b>feature selection</b>도 되는지 확인합니다.</p></li><li><p>부리 길이<code>bill_length_mm</code>와 종<code>species</code>만 가지고 결과를 예측해봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_2 = get_model_0([<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;species&quot;</span>], degree=<span class="number">1</span>, method=<span class="string">&quot;rf&quot;</span>)</span><br><span class="line">model_2.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_4.png"><br></p></li><li><p>멀쩡한 인자들을 제외했으니 성능이 떨어지는 건 정상입니다.</p></li><li><p><b>pipeline을 작성하기에 따라 feature 중 일부만 넣어도 동작한다</b>는 것이 중요합니다.</p></li></ul><h1 id="3-pytorch-deep-learning"><a href="#3-pytorch-deep-learning" class="headerlink" title="3. pytorch deep learning"></a>3. pytorch deep learning</h1><ul><li>딥러닝은 다른 방법에 비해 복잡하고 연산자원이 많이 들지만 장점이 많습니다.</li><li>이미지나 시계열을 다룰 때 큰 힘을 발휘하는데, 간혹 tabular data에도 필요합니다.</li><li>pytorch만을 사용해서 모델을 만들어보고 pipeline에 탑재해서도 결과를 얻어봅니다.</li></ul><h2 id="3-1-pytorch-only"><a href="#3-1-pytorch-only" class="headerlink" title="3.1. pytorch only"></a>3.1. pytorch only</h2><ul><li><p>파이토치로 신경망 모델을 만들고 같은 데이터로 같은 문제를 풀어봅니다.</p></li><li><p>간단한 신경망 모델을 만듭니다. 나중에 pipeline 안에 넣을 겁니다. </p></li><li><p>feature selection을 대비해서 input dimension을 가변적으로 만듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> CyclicLR</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegressorModule</span>(<span class="params">nn.Module</span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ninput=<span class="number">11</span>, init_weights=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegressorModule, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.model = nn.Sequential(nn.Linear(ninput, <span class="number">16</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">16</span>, <span class="number">16</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">16</span>, <span class="number">12</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">12</span>, <span class="number">8</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Linear(<span class="number">8</span>, <span class="number">1</span>),</span><br><span class="line">                                   )</span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.model(X)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                nn.init.normal_(m.weight, <span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>pytorch에 데이터를 넣으려면 tensor로 만들어야 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train_tensor = torch.Tensor(pd.get_dummies(X_train).astype(np.float32).values)</span><br><span class="line">y_train_tensor = torch.Tensor(y_train.astype(np.float32).values)</span><br></pre></td></tr></table></figure></li><li><p>지금 만든 모델에 학습을 시킬 수 있는 코드를 구현합니다.</p></li><li><p>1만 epoch동안 충분히 데이터를 넣어봅니다.</p></li><li><p>loss function으로는 RMSELoss를 구현해서 사용했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">net = RegressorModule()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RMSELoss</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, eps=<span class="number">1e-6</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.mse = nn.MSELoss()</span><br><span class="line">        self.eps = eps</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,yhat,y</span>):</span></span><br><span class="line">        loss = torch.sqrt(self.mse(yhat,y) + self.eps)</span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line">    </span><br><span class="line">loss_func = RMSELoss()</span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">losses = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    output = net.forward(X_train_tensor)</span><br><span class="line">    loss = loss_func(output, y_train_tensor.view(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    </span><br><span class="line">    losses.append(loss)</span><br><span class="line">    </span><br><span class="line">plt.plot(losses)</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_5.png"><br></p></li></ul><ul><li><p>제법 학습이 잘 된 것 같습니다.</p></li><li><p>예측 성능을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy array를 pytorch tensor로 변환</span></span><br><span class="line">X_test_tensor = torch.Tensor(pd.get_dummies(X_test).astype(np.float32).values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예측값</span></span><br><span class="line">y_pred_train_tensor = net.forward(X_train_tensor)</span><br><span class="line">y_pred_test_tensor = net.forward(X_test_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pytorch tensor를 다시 numpy array로 변환</span></span><br><span class="line">y_pred_train = y_pred_train_tensor.detach().numpy()</span><br><span class="line">y_pred_test = y_pred_test_tensor.detach().numpy()</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_6.png"><br></p></li><li><p><b>딥러닝으로도 제법 괜찮은 성능이 나오는 것</b>을 확인했습니다.</p></li></ul><h2 id="3-2-pytorch-pipeline"><a href="#3-2-pytorch-pipeline" class="headerlink" title="3.2. pytorch @pipeline"></a>3.2. pytorch @pipeline</h2><ul><li><b>skorch를 이용해서 pytorch를 pipeline 안에 탑재합니다.</b></li><li><b>skorch은 pytorch를 scikit-learn 객체처럼 만들어주는 일</b>을 합니다.</li><li>그래서 skorch로 감싼 pytorch 객체의 학습은 <b><code>fit()</code></b>이고,</li><li>예측은 <b><code>.forward()&lt;/b&gt;가 아니라 &lt;b&gt;</code>.predict()</b>입니다.</li></ul><ul><li>skorch의 <code>NeuralNetRegressor()</code>로 딥러닝 모듈 전체를 감싸고,</li><li>학습에 필요한 인자를 매개변수로 전달합니다.</li></ul><ul><li>그리고 중요한 사항이 하나 있습니다.</li><li><b>scikit-learn이 뱉는 <code>np.float64</code>를 <code>np.float32</code>로 변환</b>해야 합니다.</li><li>이를 위해 custom transformer를 만들어 적용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skorch <span class="keyword">import</span> NeuralNetRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator, TransformerMixin</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_T</span>(<span class="params">X_cols, degree=<span class="number">1</span>, method=<span class="string">&quot;lr&quot;</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    X_cols_ = deepcopy(X_cols)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1-1.categorical feature에 one-hot encoding 적용</span></span><br><span class="line">    cat_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) &amp; <span class="built_in">set</span>([<span class="string">&quot;species&quot;</span>, <span class="string">&quot;island&quot;</span>, <span class="string">&quot;sex&quot;</span>]))</span><br><span class="line">    cat_transformer = OneHotEncoder(sparse=<span class="literal">False</span>, handle_unknown=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-2.numerical feature는 Power Transform과 Scaler를 거침</span></span><br><span class="line">    num_features = <span class="built_in">list</span>(<span class="built_in">set</span>(X_cols) - <span class="built_in">set</span>(cat_features))</span><br><span class="line">    num_features.sort()</span><br><span class="line">    num_transformer = Pipeline(steps=[(<span class="string">&quot;polynomial&quot;</span>, PolynomialFeatures(degree=degree)), </span><br><span class="line">                                      (<span class="string">&quot;scaler&quot;</span>, RobustScaler())</span><br><span class="line">                                     ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 인자 종류별 전처리 적용</span></span><br><span class="line">    preprocessor = ColumnTransformer(transformers=[(<span class="string">&quot;num&quot;</span>, num_transformer, num_features), </span><br><span class="line">                                                   (<span class="string">&quot;cat&quot;</span>, cat_transformer, cat_features)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. float64를 float32로 변환</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FloatTransformer</span>(<span class="params">BaseEstimator, TransformerMixin</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y=<span class="literal">None</span></span>):</span></span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, x</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.array(x, dtype=np.float32)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 전처리 후 머신러닝 모델 적용</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;lr&quot;</span>:</span><br><span class="line">        ml = LinearRegression(fit_intercept=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;rf&quot;</span>:</span><br><span class="line">        ml = RandomForestRegressor()</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;torch&quot;</span>:</span><br><span class="line">        ninput = <span class="built_in">len</span>(num_features) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;species&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;island&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;sex&quot;</span> <span class="keyword">in</span> cat_features:</span><br><span class="line">            ninput += <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">        net = NeuralNetRegressor(RegressorModule(ninput=ninput, init_weights=<span class="literal">False</span>),</span><br><span class="line">                         max_epochs=<span class="number">1000</span>, verbose=<span class="number">0</span>,</span><br><span class="line">                         warm_start=<span class="literal">True</span>,</span><br><span class="line"><span class="comment">#                          device=&#x27;cuda&#x27;,</span></span><br><span class="line">                         criterion=RMSELoss,</span><br><span class="line">                         optimizer = optim.Adam,</span><br><span class="line">                         optimizer__lr = <span class="number">0.01</span></span><br><span class="line">                        )</span><br><span class="line">        ml = net</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 3. Pipeline</span></span><br><span class="line">    model = Pipeline(steps=[(<span class="string">&quot;preprocessor&quot;</span>, preprocessor), </span><br><span class="line">                            (<span class="string">&quot;float64to32&quot;</span>, FloatTransformer()),</span><br><span class="line">                            (<span class="string">&quot;ml&quot;</span>, ml)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>모델을 만들고 확인합니다.</p></li><li><p>앞서 pytorch로 구현한 뉴럴넷 구조가 그대로 들어가 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_T = get_model_T(<span class="built_in">list</span>(X_train.columns), degree=<span class="number">1</span>, method=<span class="string">&quot;torch&quot;</span>)</span><br><span class="line">model_T.fit(X_train, y_train.astype(np.float32).values.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">model_T</span><br></pre></td></tr></table></figure><p><img src="7_skorch_pipeline_13.png"><br></p></li><li><p><b>성능을 확인합니다.</b> 준수하네요.<br><img src="7_skorch_pipeline_7.png"><br></p></li></ul><h1 id="4-permutation-feature-importance"><a href="#4-permutation-feature-importance" class="headerlink" title="4. permutation feature importance"></a>4. permutation feature importance</h1><ul><li>같은 파이프라인에서 선형, 트리, 딥러닝이 모두 구현되었습니다.</li><li>각각의 인자 중요도를 한번 확인해보겠습니다.</li><li>permutation importance를 사용합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.inspection <span class="keyword">import</span> permutation_importance</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linear Regression</span></span><br><span class="line">pi_0 = permutation_importance(model_0, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random Forest</span></span><br><span class="line">pi_1 = permutation_importance(model_1, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neural Network</span></span><br><span class="line">pi_T = permutation_importance(model_T, X_test, y_test, n_repeats=<span class="number">30</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화</span></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">5</span>), constrained_layout=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, pi, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [pi_0, pi_1, pi_T], [<span class="string">&quot;Linear Reg.&quot;</span>, <span class="string">&quot;Random Forest&quot;</span>, <span class="string">&quot;Neural Net&quot;</span>]):</span><br><span class="line">    ax.barh(X_test.columns, pi.importances_mean, xerr=pi.importances_std, color=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">    ax.invert_yaxis()</span><br><span class="line">    ax.set_xlim(<span class="number">0</span>, )</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><img src="7_skorch_pipeline_8.png"><br></li></ul><ul><li><b>입력 feature별 인자 중요도가 깔끔하게 정리되었습니다.</b></li><li>양상도 전반적으로 비슷하게 나오네요.</li><li>사소한 기능같지만 <b>tabular data를 딥러닝으로 돌렸을 때 이 그림을 그리기가 어려웠습니다.</b></li><li>이 글과 코드가 비슷한 어려움을 겪는 여러분께 도움이 되면 좋겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Deep-Learning/">Deep Learning</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/pytorch/">pytorch</category>
      
      <category domain="https://jehyunlee.github.io/tags/sklearn/">sklearn</category>
      
      <category domain="https://jehyunlee.github.io/tags/pipeline/">pipeline</category>
      
      <category domain="https://jehyunlee.github.io/tags/neural-network/">neural network</category>
      
      
    </item>
    
    <item>
      <title>Full moon</title>
      <link>https://jehyunlee.github.io/2021/09/26/Python-General-9-fullmoon/</link>
      <guid>https://jehyunlee.github.io/2021/09/26/Python-General-9-fullmoon/</guid>
      <pubDate>Sat, 25 Sep 2021 23:52:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;지난 추석, 간만에 긴장을 풀었습니다.&lt;/li&gt;
&lt;li&gt;가끔 취미로 그림을 그리고는 하는데 python으로는 안그렸네요.&lt;/li&gt;
&lt;li&gt;자다가 문득 코드가 떠올라 보름달을 그렸습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-보름달은&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>지난 추석, 간만에 긴장을 풀었습니다.</li><li>가끔 취미로 그림을 그리고는 하는데 python으로는 안그렸네요.</li><li>자다가 문득 코드가 떠올라 보름달을 그렸습니다.</li></ul><h1 id="1-보름달은"><a href="#1-보름달은" class="headerlink" title="1. 보름달은?"></a>1. 보름달은?</h1><ul><li><p><b>보름달</b>이 어떻게 생겼는지 모르는 사람은 없을 겁니다.<br><br><img src="9_fullmoon_01.jpg"><br></p></li><li><p><b>검은 밤 하늘에 떠 있는 하얀 동그라미</b>로 단순화할 수 있습니다.</p></li><li><p>토끼가 방아를 찧고 있는 듯한 모양이 있지만 잠시 잊기로 합니다.</p></li><li><p>하지만 그냥 동그라미를 그리기엔 심심합니다. 작은 동그라미를 여럿 겹칩니다.</p></li></ul><h1 id="2-코드로-그리는-보름달"><a href="#2-코드로-그리는-보름달" class="headerlink" title="2. 코드로 그리는 보름달"></a>2. 코드로 그리는 보름달</h1><h2 id="2-1-코드로-그리는-그림"><a href="#2-1-코드로-그리는-그림" class="headerlink" title="2.1. 코드로 그리는 그림"></a>2.1. 코드로 그리는 그림</h2><blockquote><p><a href="http://www.genmedia.co.kr/news/articleView.html?idxno=12738">젠미디어: 이주행 ETRI 연구원 인터뷰</a><br><a href="https://techcrunch.com/2016/05/08/the-digital-age-of-data-art/">Techcrunch: The digital age of data art</a></p></blockquote><ul><li>무미건조한 코드나 데이터로 아름다움을 만들어내는 분들이 있으십니다.</li><li>데이터 시각화의 심미적 요소를 한껏 활용하는 것으로 볼 수도 있고</li><li>그림을 그리는 도구가 바뀌었을 뿐 데이터와 무관한 아름다움을 추구하기도 합니다.</li><li>이런 분들을 따라해 보기로 합니다<br><br><img src="9_fullmoon_08.png" alt="(좌) 이주행, &quot;Pixel Stack&quot;, (우) Mark Napier &quot;Black and White&quot;"><br></li></ul><h2 id="2-2-약간의-기하학"><a href="#2-2-약간의-기하학" class="headerlink" title="2.2. 약간의 기하학"></a>2.2. 약간의 기하학</h2><ul><li><p>중심을 (0,0)으로 하는 극좌표계 공간을 만듭니다.</p></li><li><p>반지름이 1인 공간 안에 랜덤하게 한 점을 골라 원의 중심을 잡습니다.</p></li><li><p>극좌표계를 사용하여 원점으로부터의 거리과 방위각으로 좌표를 잡으면 편리합니다.</p></li><li><p>matplotlib의 Circle을 이용해서 원을 생성합니다.</p></li><li><p>원의 반지름을 <code>1-원점으로부터의 거리</code>로 설정하면 원의 윤곽선에 항상 맞닿습니다.</p></li><li><p>10개만 그려봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.patches <span class="keyword">import</span> Circle</span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span>    <span class="comment"># 원의 수</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 극좌표계에서 원 생성</span></span><br><span class="line">R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)                   <span class="comment"># 반지름의 범위: 0~1</span></span><br><span class="line">pos_r = np.random.choice(R, size=num)        <span class="comment"># 랜덤 위치 (반지름)</span></span><br><span class="line">pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=num)  <span class="comment"># 랜덤 위치 (방위각)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 직교좌표계 변환</span></span><br><span class="line">pos_x = pos_r * np.cos(pos_a)         <span class="comment"># 직교좌표계 x</span></span><br><span class="line">pos_y = pos_r * np.sin(pos_a)         <span class="comment"># 직교좌표계 y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">    r_circle = <span class="number">1</span>-r  <span class="comment"># 원의 반지름</span></span><br><span class="line">    o = Circle((x, y), r_circle, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">    ax.add_patch(o)</span><br><span class="line">    </span><br><span class="line">ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_02.png"><br></p></li></ul><h2 id="2-3-확률-제어"><a href="#2-3-확률-제어" class="headerlink" title="2.3. 확률 제어"></a>2.3. 확률 제어</h2><ul><li><p>100개를 그리면 이렇습니다.<br><img src="9_fullmoon_03.png"><br></p></li><li><p>뭔가 특이한 점을 느끼셨을까요?</p></li></ul><ul><li><p>원의 중심점 분포를 그리면 이렇습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 점들 사이 최단거리 계산</span></span><br><span class="line">pos_xy = np.array(<span class="built_in">list</span>(<span class="built_in">zip</span>(pos_x, pos_y)))</span><br><span class="line">d_shortests = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> pos_xy:</span><br><span class="line">    dp = pos_xy-p</span><br><span class="line">    d_shortest = np.inf</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dp:</span><br><span class="line">        sd = np.sqrt(d[<span class="number">0</span>]**<span class="number">2</span> + d[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; sd &lt; d_shortest:</span><br><span class="line">            d_shortest = sd</span><br><span class="line">    d_shortests.append(d_shortest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시각화</span></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].scatter(pos_x, pos_y)</span><br><span class="line">axs[<span class="number">0</span>].axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">sns.kdeplot(d_shortests, cut=<span class="number">0</span>, ax=axs[<span class="number">1</span>], fill=<span class="literal">True</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="built_in">max</span>(d_shortests))</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_04.png"><br></p></li><li><p>원점 부근을 중심으로 하는 점들이 월등히 많습니다.</p></li><li><p>앞서 그림을 그릴 때 원의 반지름을 <code>1-원점으로부터의 거리</code>로 설정했지요.</p></li><li><p><b>큰 원과 작은 원의 수는 비슷하더라도 작은 원은 여기저기 퍼져있고 큰 원은 뭉쳐있다</b>는 의미입니다.</p></li></ul><ul><li>나쁘다는 것은 아닙니다.</li><li>전체 원의 가운데보다 바깥 부분에 많은 선이 그려진다는 뜻이고,</li><li>원의 갯수를 키우는 것 만으로도 뭔가 3D 느낌이 납니다.</li><li>500개를 그리면 이렇게 됩니다.<br><img src="9_fullmoon_05.png"><br></li></ul><ul><li><p>다만, <b>약간의 확률 조작을 통해 연출이 가능하다</b>는 의미입니다.</p></li><li><p>예를 들어 이런 확률분포를 사용하면,<br><img src="9_fullmoon_06.png"><br></p></li><li><p>그림은 이렇게 바뀝니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 극좌표계에서 원 생성</span></span><br><span class="line">R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)                   <span class="comment"># 반지름의 범위: 0~1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.random.choice에 매개변수 p 적용, 확률 제어</span></span><br><span class="line">f = np.float_power(np.sin(R), <span class="number">10</span>)</span><br><span class="line">p = (f/<span class="built_in">max</span>(f))/<span class="built_in">sum</span>(f/<span class="built_in">max</span>(f))</span><br><span class="line">pos_r = np.random.choice(R, size=num, p=p)   <span class="comment"># 랜덤 위치 (반지름)</span></span><br><span class="line">pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=num)  <span class="comment"># 랜덤 위치 (방위각)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 직교좌표계 변환</span></span><br><span class="line">pos_x = pos_r * np.cos(pos_a)         <span class="comment"># 직교좌표계 x</span></span><br><span class="line">pos_y = pos_r * np.sin(pos_a)         <span class="comment"># 직교좌표계 y</span></span><br><span class="line"></span><br><span class="line">r_circles = []</span><br><span class="line"><span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">    r_circle = <span class="number">1</span>-r  <span class="comment"># 원의 반지름</span></span><br><span class="line">    r_circles.append(r_circle)</span><br><span class="line">    o = Circle((x, y), r_circle, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>, lw=<span class="number">0.1</span>)</span><br><span class="line">    ax.add_patch(o)</span><br><span class="line">    </span><br><span class="line">ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax.axvline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.axhline(<span class="number">0</span>, c=<span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="9_fullmoon_07.png"><br></p></li></ul><h2 id="2-4-달-띄우기"><a href="#2-4-달-띄우기" class="headerlink" title="2.4. 달 띄우기"></a>2.4. 달 띄우기</h2><ul><li><p>달을 그리는 함수를 만들어봅니다.</p></li><li><p>앞에서 만든 함수에 딱 하나, <code>faceccolor</code>와 ‘edgecolor`를 제어하는 매개변수를 추가했습니다.</p></li><li><p>facecolor에 numpy array를 넣으면 랜덤하게 색을 입히는 기능을 추가했고요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_fullmoon</span>(<span class="params">size, scale=<span class="number">5</span>, fc=<span class="string">&quot;w&quot;</span>, ec=<span class="string">&quot;none&quot;</span>, filename=<span class="string">&quot;fullmoon&quot;</span>, **kwargs</span>):</span></span><br><span class="line">    scale = np.<span class="built_in">float</span>(scale)</span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">20</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">    ax.set_facecolor(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    ax.spines[[<span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.set_xticks([])</span><br><span class="line">    ax.set_yticks([])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># random circle</span></span><br><span class="line">    R = np.linspace(<span class="number">0</span>, <span class="number">1</span>, size)</span><br><span class="line">    F = np.float_power(np.sin(R), <span class="number">10</span>)</span><br><span class="line">    P = (<span class="number">1</span>-F/<span class="built_in">max</span>(F))/<span class="built_in">sum</span>(<span class="number">1</span>-F/<span class="built_in">max</span>(F))</span><br><span class="line"></span><br><span class="line">    pos_r = np.random.choice(R, size=size, p=P)</span><br><span class="line">    pos_a = <span class="number">2</span>*np.pi*np.random.uniform(size=size)</span><br><span class="line">    pos_x = pos_r * np.cos(pos_a)</span><br><span class="line">    pos_y = pos_r * np.sin(pos_a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, y, r <span class="keyword">in</span> <span class="built_in">zip</span>(pos_x, pos_y, pos_r):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(fc, np.ndarray):</span><br><span class="line">            fc = np.array([<span class="number">0.8</span>, <span class="number">0.8</span>, <span class="number">0.8</span>]) + np.array([np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>), np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>), np.random.normal(loc=<span class="number">0.1</span>, scale=<span class="number">0.05</span>)])</span><br><span class="line">            fc[<span class="number">0</span>] = <span class="built_in">min</span>(fc[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">            fc[<span class="number">1</span>] = <span class="built_in">min</span>(fc[<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">            fc[<span class="number">2</span>] = <span class="built_in">min</span>(fc[<span class="number">2</span>], <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        o = Circle((x, y), <span class="number">1</span>-r, fc=fc, ec=ec, alpha=scale/size, **kwargs)</span><br><span class="line">            </span><br><span class="line">        ax.add_patch(o)</span><br><span class="line"></span><br><span class="line">    ax.set_xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    ax.set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    fig.set_facecolor(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    fig.savefig(<span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.png&quot;</span>, dpi=<span class="number">300</span>)</span><br><span class="line">    </span><br><span class="line">plot_fullmoon(<span class="number">10</span>, fc=np.array([<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>]), filename=<span class="string">&quot;fmc_10&quot;</span>, ec=<span class="string">&quot;w&quot;</span>, lw=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="fmc_10.png"><br></p></li><li><p>원 10개로 그리면 이런 달이 떠오릅니다.</p></li></ul><ul><li>원 20개, 50개, 100개로도 그려볼 수 있겠죠.<br><br><img src="fmc_10-100.png"><br></li></ul><ul><li>꼭 추석이 아니더라도 모두들 둥근 달처럼 행복하시기 바랍니다.<br><br><img src="fmc_200.png"><br></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/General/">General</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/art/">art</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      
    </item>
    
    <item>
      <title>3D curved surfaces</title>
      <link>https://jehyunlee.github.io/2021/09/03/Python-DS-84-sphere/</link>
      <guid>https://jehyunlee.github.io/2021/09/03/Python-DS-84-sphere/</guid>
      <pubDate>Fri, 03 Sep 2021 08:42:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;자주 있는 일은 아니지만 3차원 곡면을 그릴 때가 있습니다.&lt;/li&gt;
&lt;li&gt;어떤 분은 원자를 표현하느라, 또는 쇠구슬을 표현하느라 구가 필요할지도 모릅니다.&lt;/li&gt;
&lt;li&gt;저는 업무상 태양이 하늘에 떠 있는 지점을 고민할 때가 많아</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>자주 있는 일은 아니지만 3차원 곡면을 그릴 때가 있습니다.</li><li>어떤 분은 원자를 표현하느라, 또는 쇠구슬을 표현하느라 구가 필요할지도 모릅니다.</li><li>저는 업무상 태양이 하늘에 떠 있는 지점을 고민할 때가 많아서 반구가 필요합니다.</li><li>과거에는 원자의 3차원 에너지를 표현하느라 이런 그림이 필요했습니다.</li></ul><h1 id="1-데이터-준비"><a href="#1-데이터-준비" class="headerlink" title="1. 데이터 준비"></a>1. 데이터 준비</h1><blockquote><p><a href="https://en.wikipedia.org/wiki/Spherical_coordinate_system">wikipedia: Spherical coordinate system</a></p></blockquote><p><img src="84_sphere_00.png" alt="wikipedia: 구면 좌표계"><br></p><ul><li>구나 반구를 그리려면 구면 좌표계로 정의된 데이터가 필요합니다.</li><li>간단한 삼각함수를 사용해서 구면 데이터를 만듭니다.</li><li><b>방위각</b>(azimuthal angle, $\theta$)과 <b>극고도각</b>(polar angle, $\varphi$)을 나열한 뒤 여기에 아래 수식을 적용합니다.</li></ul><p>$$<br>\begin{aligned}<br>x &amp;= r \cos{\varphi} \sin{\theta}\\<br>y &amp;= r \sin{\varphi} \sin{\theta}\\<br>z &amp;= r \cos{\theta}<br>\end{aligned}$$</p><ul><li>코드로는 이렇게 정리됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># angles</span></span><br><span class="line">polars = np.linspace(<span class="number">0</span>, <span class="number">180</span>, <span class="number">19</span>)</span><br><span class="line">azimuths = np.linspace(<span class="number">0</span>, <span class="number">360</span>, <span class="number">37</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># points</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(product(polars, azimuths), columns=[<span class="string">&quot;azi&quot;</span>, <span class="string">&quot;polar&quot;</span>])</span><br><span class="line">df[<span class="string">&quot;x&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.cos(np.deg2rad(x[<span class="number">1</span>]))*np.sin(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;y&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.sin(np.deg2rad(x[<span class="number">1</span>]))*np.sin(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;z&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.cos(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df</span><br></pre></td></tr></table></figure><ul><li>실행 결과<br><img src="84_sphere_05.png"><br></li></ul></li></ul><h1 id="2-3D-곡면-도형-그리기"><a href="#2-3D-곡면-도형-그리기" class="headerlink" title="2. 3D 곡면 도형 그리기"></a>2. 3D 곡면 도형 그리기</h1><blockquote><p><a href="https://matplotlib.org/stable/gallery/mplot3d/surface3d.html">matplotlib: 3D surface (colormap)</a><br><a href="https://matplotlib.org/stable/api/_as_gen/mpl_toolkits.mplot3d.axes3d.Axes3D.html?highlight=plot_surface#mpl_toolkits.mplot3d.axes3d.Axes3D.plot_surface">matplotlib: mpl_toolkits.mplot3d.axes3d.Axes3D</a></p></blockquote><ul><li>주어진 데이터로 만들어지는 3D 표면 형상을 만드는데는 <code>.plot_surface()</code>가 적격입니다.</li><li>앞서 만든 데이터로 구(sphere)와 반구(hemisphere)를 만들어봅시다.</li></ul><h2 id="2-1-sphere"><a href="#2-1-sphere" class="headerlink" title="2.1. sphere"></a>2.1. sphere</h2><ul><li><p>우리가 만든 좌표가 이미 구의 좌표입니다.</p></li><li><p>방위각 $\varphi$를 0도에서 360도, 극고도각 $\theta$를 0도에서 180도까지 변화시켰고, 이는 3차원 공간의 모든 방향에 해당되기 때문입니다.</p></li><li><p>그렇다면 남은 일은, DataFrame에 1차원으로 들어있는 각각의 좌표를 차원에 맞게 2차원으로 바꿔주는 것 뿐입니다.</p></li><li><p>극고도각과 방위각의 경우의 수가 각각 19가지, 37가지이므로 <code>.reshape((19, 37)</code>을 적용합니다.</p></li><li><p>matplotlib은 구면좌표계가 아니라 직교좌표계를 사용합니다. x, y, z로 변환합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_06.png"><br></p></li><li><p>구가 그려졌습니다.</p></li><li><p>그런데 z축 방향으로 조금 찌그러져서 납작한 느낌이 나네요.</p></li><li><p><b>aspect ratio를 1:1:1로 맞춰줍시다.</b></p></li><li><p>matplotlib 3차원 Axes(<code>Axes3D</code>)에서 aspect ratio를 지정하는 명령은 <code>.set_box_aspect()</code>입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="84_sphere_07.png"><br></p></li></ul><h2 id="2-2-partial-sphere"><a href="#2-2-partial-sphere" class="headerlink" title="2.2. partial sphere"></a>2.2. partial sphere</h2><ul><li>극좌표계를 사용해서 구의 일부를 쪼개볼 수도 있습니다.</li><li><code>plot_surface()</code>안에 넣는 x, y, z에다 slicing을 추가하면 됩니다.</li><li><b>극고도각은 전체 범위를 사용하고 방위각은 마지막 9개를 사용하지 않겠다</b>고 하면 이런 그림이 그려집니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><img src="84_sphere_08.png"><br></li></ul><h2 id="2-3-선-색깔-조정"><a href="#2-3-선-색깔-조정" class="headerlink" title="2.3. 선 색깔 조정"></a>2.3. 선 색깔 조정</h2><ul><li><p>우리는 지금 <b>면</b>을 그리고 있습니다.</p></li><li><p>따라서 <b><code>edgecolor</code> (<code>ec</code>)</b>, <b><code>linestyle</code> (<code>ls</code>)</b>, <b><code>linewidth</code> (<code>lw</code>)</b>가 적용됩니다.</p></li><li><p>불필요한 axis도 지워버립시다. 명령은 똑같이 <code>ax.axis(False)</code>입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.2</span>, ls=<span class="string">&quot;:&quot;</span>,</span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">ax.axis(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_09.png"><br></p></li><li><p>아까보다 한결 깔끔해 보입니다.</p></li></ul><h2 id="2-4-면-색깔-조정"><a href="#2-4-면-색깔-조정" class="headerlink" title="2.4. 면 색깔 조정"></a>2.4. 면 색깔 조정</h2><ul><li><p>면 색깔을 지정하는 매개변수는 <code>color</code>입니다.</p></li><li><p><code>colors=&quot;g&quot;</code>처럼 색상을 의미하는 약어나 숫자를 넣으면 적용됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.2</span>, ls=<span class="string">&quot;:&quot;</span>,</span><br><span class="line">                color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">ax.axis(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_10.png"><br></p></li><li><p>조명 방향도 바꿀 수 있습니다.</p></li><li><p><code>matplotlib.colors</code>의 <code>LightSource</code> 클래스를 사용해 조명 방향을 지정합니다.</p></li><li><p>두 개의 인자로 방위각과 극고도각을 도(degree) 단위로 입력합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LightSource</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>,</span><br><span class="line">                        figsize=(<span class="number">15</span>, <span class="number">5</span>), </span><br><span class="line">                        constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">lightsources = [LightSource(<span class="number">30</span>, <span class="number">30</span>), LightSource(-<span class="number">30</span>, <span class="number">60</span>), LightSource(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">titles = [<span class="string">&quot;azi: 30, polar: 30&quot;</span>, <span class="string">&quot;azi: -30, polar: 60&quot;</span>, <span class="string">&quot;azi: 0, polar: 0&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> ax, ls, title <span class="keyword">in</span> <span class="built_in">zip</span>(axs, lightsources, titles):</span><br><span class="line">    ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                    df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                    df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                    ec=<span class="string">&quot;none&quot;</span>, lw=<span class="number">0</span>, ls=<span class="string">&quot;-&quot;</span>,</span><br><span class="line">                    color=<span class="string">&quot;w&quot;</span>, lightsource=ls,</span><br><span class="line">                    alpha=<span class="number">1</span>)</span><br><span class="line">    ax.set_title(title, fontsize=<span class="string">&quot;large&quot;</span>)</span><br><span class="line">    ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    ax.axis(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_12.png"><br></p></li><li><p>멋진 그라데이션을 입히고 싶다면 <code>cmap</code> 매개변수를 사용할 수 있습니다.</p></li><li><p>z축 방향 값에 따른 그라데이션이 매겨집니다.</p></li><li><p>Matplotlib이 제공하는 gradation 이름을 집어넣습니다.</p></li><li><p>다만 <b><code>cmap</code></b>과 <b><code>lightsource</code></b>는 <b>함께 쓰일 수 없으니</b> 유의해야 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                       subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line">ax.plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>))[:,:-<span class="number">9</span>], </span><br><span class="line">                ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.2</span>, ls=<span class="string">&quot;:&quot;</span>,</span><br><span class="line">                cmap=<span class="string">&quot;inferno&quot;</span>,</span><br><span class="line">                alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">ax.axis(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_11.png"><br></p></li></ul><h1 id="3-응용"><a href="#3-응용" class="headerlink" title="3. 응용"></a>3. 응용</h1><h2 id="3-1-구와-반구"><a href="#3-1-구와-반구" class="headerlink" title="3.1. 구와 반구"></a>3.1. 구와 반구</h2><blockquote><p><a href="https://stackoverflow.com/questions/16488182/removing-axes-margins-in-3d-plot">stackoverflow: Axes3D 여백 없애기</a></p></blockquote><ul><li><p>구와 반구를 동시에 그려봅니다.</p></li><li><p>구는 위에서 만든 코드를 그대로 사용하면 되고, </p></li><li><p>반구는 극고도각을 절반만 사용하면 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, </span><br><span class="line">                        figsize=(<span class="number">10</span>, <span class="number">5</span>), </span><br><span class="line">                        constrained_layout=<span class="literal">True</span>, </span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sphere</span></span><br><span class="line">axs[<span class="number">0</span>].plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    cmap=<span class="string">&quot;viridis&quot;</span>, </span><br><span class="line">                    alpha=<span class="number">0.3</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&quot;sphere&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hemisphere</span></span><br><span class="line">axs[<span class="number">1</span>].plot_surface(df[<span class="string">&quot;x&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;y&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;z&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    cmap=<span class="string">&quot;viridis&quot;</span>, </span><br><span class="line">                    alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&quot;hemisphere&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">    ax.set_zlabel(<span class="string">&quot;Z&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_01.png"><br></p></li><li><p>X, Y, Z축 범위가 -1~1을 약간 벗어나 있습니다.</p></li><li><p>matplotlib 기본 설정 문제입니다.</p></li><li><p>이를 해결하려면 위 코드에서 fig, axs를 생성한 뒤에 짧은 코드를 추가합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.axis3d <span class="keyword">import</span> Axis</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Axis, <span class="string">&quot;_get_coord_info_old&quot;</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_coord_info_new</span>(<span class="params">self, renderer</span>):</span></span><br><span class="line">        mins, maxs, centers, deltas, tc, highs = self._get_coord_info_old(renderer)</span><br><span class="line">        mins += deltas / <span class="number">4</span></span><br><span class="line">        maxs -= deltas / <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> mins, maxs, centers, deltas, tc, highs</span><br><span class="line">    Axis._get_coord_info_old = Axis._get_coord_info  </span><br><span class="line">    Axis._get_coord_info = _get_coord_info_new</span><br></pre></td></tr></table></figure><p><img src="84_sphere_02.png"><br></p></li><li><p>동서남북, 그리고 상하를 잇는 수직선을 그립니다.</p></li><li><p>좌표 원점이라고 봐도 됩니다.</p></li><li><p>여기서 한 가지 주의할 점이 있습니다.</p></li><li><p><b>matplotlib이 3D 도형과 2D 도형의 위치관계를 깔끔하기 처리하지 못합니다.</b></p></li><li><p>3D 도형에 가려질 부분과 가려지지 않을 부분을 따로 그리고 표현해줘야 합니다.</p></li><li><p>동서남북을 나타내는 N, E, W, S도 적당한 위치에 넣어줍니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, </span><br><span class="line">                        figsize=(<span class="number">10</span>, <span class="number">5</span>), </span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Axes3D 딱 붙이기</span></span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/16488182/removing-axes-margins-in-3d-plot</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.axis3d <span class="keyword">import</span> Axis</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Axis, <span class="string">&quot;_get_coord_info_old&quot;</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_coord_info_new</span>(<span class="params">self, renderer</span>):</span></span><br><span class="line">        mins, maxs, centers, deltas, tc, highs = self._get_coord_info_old(renderer)</span><br><span class="line">        mins += deltas / <span class="number">4</span></span><br><span class="line">        maxs -= deltas / <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> mins, maxs, centers, deltas, tc, highs</span><br><span class="line">    Axis._get_coord_info_old = Axis._get_coord_info  </span><br><span class="line">    Axis._get_coord_info = _get_coord_info_new</span><br><span class="line"></span><br><span class="line"><span class="comment"># sphere</span></span><br><span class="line">axs[<span class="number">0</span>].plot_surface(df[<span class="string">&quot;x&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;y&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;z&quot;</span>].values.reshape((<span class="number">19</span>, <span class="number">37</span>)), </span><br><span class="line">                    cmap=<span class="string">&quot;viridis&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.1</span>, </span><br><span class="line">                    alpha=<span class="number">0.3</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&quot;sphere&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hemisphere</span></span><br><span class="line">axs[<span class="number">1</span>].plot_surface(df[<span class="string">&quot;x&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;y&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    df[<span class="string">&quot;z&quot;</span>].iloc[:<span class="number">370</span>].values.reshape((<span class="number">10</span>, <span class="number">37</span>)), </span><br><span class="line">                    cmap=<span class="string">&quot;viridis&quot;</span>, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.1</span>, </span><br><span class="line">                    alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&quot;hemisphere&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">    ax.set_zlabel(<span class="string">&quot;Z&quot;</span>)</span><br><span class="line">    ax.view_init(azim=<span class="number">235</span>)</span><br><span class="line">    <span class="comment"># make margins</span></span><br><span class="line">    ax.margins(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># center axis</span></span><br><span class="line">    zmin = -<span class="number">1</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    ax.plot([-<span class="number">1.1</span>, <span class="number">1.1</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], c=<span class="string">&quot;k&quot;</span>, zorder=-<span class="number">10</span>)</span><br><span class="line">    ax.plot([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">0</span>], c=<span class="string">&quot;k&quot;</span>, zorder=-<span class="number">10</span>)</span><br><span class="line">    ax.plot([<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [zmin, <span class="number">1</span>], c=<span class="string">&quot;k&quot;</span>, zorder=-<span class="number">10</span>)</span><br><span class="line">    ax.plot([<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1.1</span>], c=<span class="string">&quot;k&quot;</span>, zorder=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ax == axs[<span class="number">0</span>]:</span><br><span class="line">        ax.plot([-<span class="number">1</span>, -<span class="number">1.1</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], c=<span class="string">&quot;k&quot;</span>, zorder=<span class="number">3</span>)</span><br><span class="line">        ax.plot([<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1.1</span>], [<span class="number">0</span>, <span class="number">0</span>], c=<span class="string">&quot;k&quot;</span>, zorder=<span class="number">3</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 동서남북 표시</span></span><br><span class="line">    font_text = &#123;<span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="number">15</span>, <span class="string">&quot;ha&quot;</span>:<span class="string">&quot;center&quot;</span>, <span class="string">&quot;va&quot;</span>:<span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">    ax.text(-<span class="number">1.4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;W&quot;</span>, transform=ax.transData, fontdict=font_text)</span><br><span class="line">    ax.text(<span class="number">1.4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;E&quot;</span>, transform=ax.transData, fontdict=font_text)</span><br><span class="line">    ax.text(<span class="number">0</span>, <span class="number">1.4</span>, <span class="number">0</span>, <span class="string">&quot;N&quot;</span>, transform=ax.transData, fontdict=font_text, zorder=-<span class="number">10</span>)</span><br><span class="line">    ax.text(<span class="number">0</span>, -<span class="number">1.4</span>, <span class="number">0</span>, <span class="string">&quot;S&quot;</span>, transform=ax.transData, fontdict=font_text)</span><br><span class="line">    ax.axis(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_04.png"><br></p></li></ul><h2 id="3-2-magnetocrystalline-anisotropy"><a href="#3-2-magnetocrystalline-anisotropy" class="headerlink" title="3.2. magnetocrystalline anisotropy"></a>3.2. magnetocrystalline anisotropy</h2><blockquote><p><a href="https://en.wikipedia.org/wiki/Magnetocrystalline_anisotropy">wikipedia: magnetocrystalline anisotropy</a></p></blockquote><ul><li>결정자기이방성(magnetocrystalline anisotropy)이라는 말을 들어보신 분은 거의 없으실 겁니다.</li><li>자성(magnetism)을 공부할 때 나오는 용어인데, <b>방위에 따라 다른 에너지</b>라고 대충 넘어가셔도 좋습니다.</li><li>중요한 것은 이번엔 <b>구나 반구가 아니라 울퉁불퉁한 모양</b>을 만들 것이라는 점입니다.</li></ul><ul><li>원리는 간단합니다.</li><li>이 글의 처음에서 구면좌표계는 다음과 같은 식으로 표현된다고 했습니다.</li></ul><p>$$<br>\begin{aligned}<br>x &amp;= r \cos{\varphi} \sin{\theta}\\<br>y &amp;= r \sin{\varphi} \sin{\theta}\\<br>z &amp;= r \cos{\theta}<br>\end{aligned}$$</p><ul><li>앞에서는 $r = 1$로 두었지만, 여기서는 $r = f(\varphi, \theta)$입니다.</li><li>방위각과 극고도각을 이용해서 물질마다 다르게 r을 정의합니다.</li><li>모양이 울퉁불퉁한만큼 아까 10도 단위로 쪼갠 공간을 이번엔 5도 단위로 쪼갭니다.</li><li>자세한 설명은 생략하고 결과 그림과 코드만 간략히 보여드리겠습니다.</li></ul><ul><li><p>5도 단위로 공간 분할</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># angles</span></span><br><span class="line">polars = np.linspace(<span class="number">0</span>, <span class="number">179</span>, <span class="number">37</span>)</span><br><span class="line">azimuths = np.linspace(<span class="number">0</span>, <span class="number">360</span>, <span class="number">73</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># points</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(product(polars, azimuths), columns=[<span class="string">&quot;azi&quot;</span>, <span class="string">&quot;polar&quot;</span>])</span><br><span class="line">df[<span class="string">&quot;x&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.cos(np.deg2rad(x[<span class="number">1</span>]))*np.sin(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;y&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.sin(np.deg2rad(x[<span class="number">1</span>]))*np.sin(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;z&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: np.cos(np.deg2rad(x[<span class="number">0</span>])), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>방향에 따른 $r$ 계산: 자기이방성 에너지</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자기이방성 계수 K1, K2</span></span><br><span class="line">K1_Co = <span class="number">45</span></span><br><span class="line">K2_Co = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">K1_Fe = <span class="number">4.8</span></span><br><span class="line">K2_Fe = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">K1_Ni = -<span class="number">0.5</span> </span><br><span class="line">K2_Ni = -<span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 방향에 따른 자기이방성 에너지 계산.</span></span><br><span class="line"><span class="comment"># 그림을 그리는 것이 목적이므로 보기 좋도록 적절히 스케일링</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_uni</span>(<span class="params">K1, K2, df</span>):</span></span><br><span class="line">    <span class="keyword">return</span> K1*(df[<span class="string">&quot;x&quot;</span>]**<span class="number">2</span> + df[<span class="string">&quot;y&quot;</span>]**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_cubic</span>(<span class="params">K1, K2, df</span>):</span></span><br><span class="line">    <span class="keyword">return</span> K1*(df[<span class="string">&quot;x&quot;</span>]**<span class="number">2</span> * df[<span class="string">&quot;y&quot;</span>]**<span class="number">2</span> + \</span><br><span class="line">               df[<span class="string">&quot;y&quot;</span>]**<span class="number">2</span> * df[<span class="string">&quot;z&quot;</span>]**<span class="number">2</span> + \</span><br><span class="line">               df[<span class="string">&quot;z&quot;</span>]**<span class="number">2</span> * df[<span class="string">&quot;x&quot;</span>]**<span class="number">2</span>) + \</span><br><span class="line">           K2*(df[<span class="string">&quot;x&quot;</span>]**<span class="number">2</span> * df[<span class="string">&quot;y&quot;</span>]**<span class="number">2</span> * df[<span class="string">&quot;z&quot;</span>]**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;E_Co&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: calc_uni(K1_Co, K2_Co, x), axis=<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">df[<span class="string">&quot;E_Fe&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: calc_cubic(K1_Fe, K2_Fe, x), axis=<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">df[<span class="string">&quot;E_Ni&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: calc_cubic(K1_Ni, K2_Ni, x), axis=<span class="number">1</span>)*<span class="number">3</span> +<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 극좌표계를 직교좌표계로 변환</span></span><br><span class="line">df[<span class="string">&quot;x_Co&quot;</span>] = df[<span class="string">&quot;E_Co&quot;</span>] * df[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;y_Co&quot;</span>] = df[<span class="string">&quot;E_Co&quot;</span>] * df[<span class="string">&quot;y&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;z_Co&quot;</span>] = df[<span class="string">&quot;E_Co&quot;</span>] * df[<span class="string">&quot;z&quot;</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;x_Fe&quot;</span>] = df[<span class="string">&quot;E_Fe&quot;</span>] * df[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;y_Fe&quot;</span>] = df[<span class="string">&quot;E_Fe&quot;</span>] * df[<span class="string">&quot;y&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;z_Fe&quot;</span>] = df[<span class="string">&quot;E_Fe&quot;</span>] * df[<span class="string">&quot;z&quot;</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;x_Ni&quot;</span>] = df[<span class="string">&quot;E_Ni&quot;</span>] * df[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;y_Ni&quot;</span>] = df[<span class="string">&quot;E_Ni&quot;</span>] * df[<span class="string">&quot;y&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;z_Ni&quot;</span>] = df[<span class="string">&quot;E_Ni&quot;</span>] * df[<span class="string">&quot;z&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>세 가지 물질(Co, Fe, Ni)의 자기이방성 에너지 시각화</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, </span><br><span class="line">                        figsize=(<span class="number">15</span>, <span class="number">6</span>), </span><br><span class="line">                       constrained_layout=<span class="literal">True</span>,</span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> ax, mat <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;Co&quot;</span>, <span class="string">&quot;Fe&quot;</span>, <span class="string">&quot;Ni&quot;</span>]):</span><br><span class="line">    ax.plot_surface(df[<span class="string">f&quot;x_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,:-<span class="number">19</span>], </span><br><span class="line">                    df[<span class="string">f&quot;y_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,:-<span class="number">19</span>], </span><br><span class="line">                    df[<span class="string">f&quot;z_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,:-<span class="number">19</span>], </span><br><span class="line">                    ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.2</span>,</span><br><span class="line">                    color=<span class="string">&quot;w&quot;</span>, lightsource=LightSource(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">                    alpha=<span class="number">1</span>)</span><br><span class="line">    ax.plot(df[<span class="string">f&quot;x_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,-<span class="number">20</span>], </span><br><span class="line">            df[<span class="string">f&quot;y_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,-<span class="number">20</span>], </span><br><span class="line">            df[<span class="string">f&quot;z_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,-<span class="number">20</span>], </span><br><span class="line">            c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">    ax.plot(df[<span class="string">f&quot;x_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,<span class="number">0</span>], </span><br><span class="line">            df[<span class="string">f&quot;y_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,<span class="number">0</span>], </span><br><span class="line">            df[<span class="string">f&quot;z_<span class="subst">&#123;mat&#125;</span>&quot;</span>].values.reshape((<span class="number">37</span>, <span class="number">73</span>))[:,<span class="number">0</span>], </span><br><span class="line">            c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">    ax.set_box_aspect((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    ax.axis(<span class="literal">False</span>)</span><br><span class="line">    ax.set_title(mat, fontsize=<span class="string">&quot;xx-large&quot;</span>)</span><br><span class="line">    </span><br><span class="line">fig.suptitle(<span class="string">&quot;crystalline anisotropy energy surface\n&quot;</span>, </span><br><span class="line">             color=<span class="string">&quot;blue&quot;</span>, fontsize=<span class="string">&quot;xx-large&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="84_sphere_13.png"><br></p></li><li><p>제 박사학위 주제와 밀접한 그림입니다. </p></li><li><p>교과서 그림을 모방해 학위논문(2011)에도 같은 그림을 그려서 넣었습니다.</p></li><li><p>mathematica를 사용해서 그린 그림입니다.<br><br><img src="84_sphere_14.png"><br></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/3D/">3D</category>
      
      
    </item>
    
    <item>
      <title>머신러닝 모델링의 흔한 실수들 (2)</title>
      <link>https://jehyunlee.github.io/2021/09/02/Python-DS-83-aifestival2021/</link>
      <guid>https://jehyunlee.github.io/2021/09/02/Python-DS-83-aifestival2021/</guid>
      <pubDate>Thu, 02 Sep 2021 04:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;많은 분들께서 모아주신 &lt;b&gt;&lt;a href=&quot;https://bit.ly/3j3vnYL&quot;&gt;머신러닝, 딥러닝 실수 사례&lt;/a&gt;&lt;/b&gt; 두번째 이야기를 2021 AI Festival에서 발표했습니다.&lt;ul&gt;
&lt;li&gt;사례를 모아주신 분들께 깊</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>많은 분들께서 모아주신 <b><a href="https://bit.ly/3j3vnYL">머신러닝, 딥러닝 실수 사례</a></b> 두번째 이야기를 2021 AI Festival에서 발표했습니다.<ul><li>사례를 모아주신 분들께 깊은 감사 말씀을 드립니다.</li><li>60여건의 사례 중 데이터 관련 사례를 일부 모아 발표했습니다.</li><li><b><a href="210902_%EC%9D%B4%EC%A0%9C%ED%98%84_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EB%AA%A8%EB%8D%B8%EB%A7%81%ED%9D%94%ED%95%9C%EC%8B%A4%EC%88%982.pdf">발표자료는 여기에서 다운로드</a></b> 받으실 수 있습니다.</li></ul></li></ul><blockquote><p><a href="https://aifesta.co.kr/">2021 AI Festival</a></p></blockquote><ul><li>제 발표는 44분 30초부터 시작합니다 (<a href="https://youtu.be/keXrv3D2m8k?t=2671">Link</a>)<br></li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/keXrv3D2m8k" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="83_aifestival_02.jpg" alt="AI 프렌즈 공지"></p><p><img src="83_aifestival_01.png" alt="행사 프로그램"></p>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/AI-festival/">AI festival</category>
      
      <category domain="https://jehyunlee.github.io/tags/AI-Frenz/">AI Frenz</category>
      
      
    </item>
    
    <item>
      <title>Paper Search using ScopusAPI</title>
      <link>https://jehyunlee.github.io/2021/08/13/Python-DS-82-scopusapi/</link>
      <guid>https://jehyunlee.github.io/2021/08/13/Python-DS-82-scopusapi/</guid>
      <pubDate>Fri, 13 Aug 2021 07:05:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;연구자라면 논문 검색이 일상입니다.&lt;/li&gt;
&lt;li&gt;매년 출간되는 논문의 편 수는 기하급수적으로 늘고 있습니다.&lt;/li&gt;
&lt;li&gt;새로운 논문을 찾거나 전체적인 트렌드를 파악하기가 점점 어려워집니다.&lt;/li&gt;
&lt;li&gt;elsevier사가 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>연구자라면 논문 검색이 일상입니다.</li><li>매년 출간되는 논문의 편 수는 기하급수적으로 늘고 있습니다.</li><li>새로운 논문을 찾거나 전체적인 트렌드를 파악하기가 점점 어려워집니다.</li><li>elsevier사가 제공하는 API를 사용해서 파이썬으로 데이터를 받고 정리합시다.</li></ul><h1 id="1-Elsevier"><a href="#1-Elsevier" class="headerlink" title="1. Elsevier"></a>1. Elsevier</h1><p><a href="https://www.elsevier.com/">Elsevier</a><br><a href="https://dev.elsevier.com/">Elsevier Developers</a></p><h2 id="1-1-계정"><a href="#1-1-계정" class="headerlink" title="1.1. 계정"></a>1.1. 계정</h2><ul><li><a href="https://www.elsevier.com/">Elsevier</a>에 가입하고 로그인합니다.<br><br><img src="82_scopusapi_1.png"><br></li></ul><h2 id="1-2-API-획득"><a href="#1-2-API-획득" class="headerlink" title="1.2. API 획득"></a>1.2. API 획득</h2><ul><li><p>데이터를 받아오려면 API key가 필요합니다.</p></li><li><p><a href="https://dev.elsevier.com/">https://dev.elsevier.com/</a>에서 API key를 신청합니다.</p></li><li><p><b>I want an API Key</b>를 눌러 들어갑니다.<br><br><img src="82_scopusapi_3.png"><br></p></li><li><p><b>Create API Key</b>를 눌러 API Key 생성 모드로 들어갑니다.</p></li><li><p>Label과 Website URL에는 적당히 넣어줍니다.</p></li><li><p>그리고 스크롤을 내려 하단의 <b>API Service Checkbox</b>와 <b>Elsevier Provisions for Text and Data Mining (TDM)</b>에 동의 후 <b>submit</b>을 누릅니다.<br><br><img src="82_scopusapi_6.png" alt="API Key를 다섯 개 받았습니다."><br></p></li><li><p>API Key마다 1주일간 한도가 있습니다. 많은게 좋습니다.</p></li><li><p>속도 제한도 있으니 참고합니다.<br><img src="82_scopusapi_9.png"><br></p></li></ul><h1 id="2-Pybliometrics-amp-Pandas-DataFrame"><a href="#2-Pybliometrics-amp-Pandas-DataFrame" class="headerlink" title="2. Pybliometrics &amp; Pandas DataFrame"></a>2. Pybliometrics &amp; Pandas DataFrame</h1><h2 id="2-1-Pybliometrics로-검색결과-받아오기"><a href="#2-1-Pybliometrics로-검색결과-받아오기" class="headerlink" title="2.1. Pybliometrics로 검색결과 받아오기"></a>2.1. Pybliometrics로 검색결과 받아오기</h2><blockquote><p><a href="https://www.sciencedirect.com/science/article/pii/S2352711019300573">M. Rose et al. “pybliometrics:ScriptablebibliometricsusingaPythoninterfacetoScopus”, Software X 10 100263 (2019)</a><br><a href="https://pybliometrics.readthedocs.io/en/stable/">pybliometrics</a></p></blockquote><ul><li><p><b>파이썬을 사용해 Scopus 검색과 초록, 참고문헌 등을 받아올 수 있는 라이브러리</b>입니다.</p></li><li><p><a href="https://pybliometrics.readthedocs.io/en/stable/">공식 홈페이지</a>에 자세한 설명이 있습니다.</p></li><li><p>여기서는 간단하게 검색과 초록 다운로드 방법을 알아봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scopus에서 Search하는 라이브러리를 불러옵니다.</span></span><br><span class="line"><span class="keyword">from</span> pybliometrics.scopus <span class="keyword">import</span> ScopusSearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 검색어: Scopus에서 키워드를 넣고 검색하면 발생하는 바로 그 검색식입니다.</span></span><br><span class="line"><span class="comment">#      여기서는 도시 연구에 머신러닝과 딥러닝을 활용한 것들을 찾기로 했습니다.</span></span><br><span class="line">query = <span class="string">&#x27; TITLE-ABS-KEY ( machine  AND learning  OR  deep  AND learning )  AND  \</span></span><br><span class="line"><span class="string">          TITLE-ABS-KEY ( city )&#x27;</span></span><br><span class="line">                 </span><br><span class="line"><span class="comment"># 검색 시작</span></span><br><span class="line">s = ScopusSearch(query, </span><br><span class="line">                 download=<span class="literal">True</span>, <span class="comment"># 검색 결과를 저장합니다. </span></span><br><span class="line">                 verbose=<span class="literal">True</span>)  <span class="comment"># 진행 상황을 표시합니다.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Downloading results <span class="keyword">for</span> query <span class="string">&quot; TITLE-ABS-KEY ( machine  AND learning  OR  deep  AND learning )  AND                   TITLE-ABS-KEY ( city )&quot;</span>:</span><br><span class="line">Progress: |██████████████████████████████████████████████████| 100.00% Complete</span><br></pre></td></tr></table></figure></li></ul></li><li><p>처음 실행한다면 <b>API Key를 넣으라는 작은 입력창</b>이 뜰 것입니다.</p></li><li><p>아까 받은 API Key를 여기에 복사해서 넣으면 됩니다.</p></li><li><p>여러 개의 API Key를 이어서 사용하고 싶다면 더 좋은 방법이 있습니다.</p></li><li><p><b><code>~/.scopus/</code>에 있는 <code>config.ini</code>파일</b>에 <b>API Key를 쉼표(,)로 띄워서 넣어두면</b> 자동으로 불러옵니다.</p></li></ul><ul><li><p>몇 편이나 검색됐는지 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.get_results_size()</span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5275</span><br></pre></td></tr></table></figure></li></ul></li><li><p><b>5275편</b>의 논문 정보를 받았습니다. </p></li><li><p>scopus.com에서 검색을 해도 같은 숫자가 보일겁니다.</p></li><li><p>그러나 <b>웹 검색으로는 이만큼 못가져옵니다.</b></p></li><li><p>API의 진가는 매우 다양한 정보를 한데 가져와서 처리할 수 있다는 데 있습니다.</p></li></ul><h2 id="2-2-Pandas로-검색결과-정리하기"><a href="#2-2-Pandas로-검색결과-정리하기" class="headerlink" title="2.2. Pandas로 검색결과 정리하기"></a>2.2. Pandas로 검색결과 정리하기</h2><ul><li><p>받아온 정보를 데이터프레임에 넣습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_s = pd.DataFrame(s.results)</span><br><span class="line">df_s.head()</span><br></pre></td></tr></table></figure><p><img src="82_scopusapi_10.png"><br></p></li><li><p>column이 34개나 있다고 합니다.</p></li><li><p>맨 위 논문을 가지고 column의 이름과 내용을 살펴봅니다.</p></li><li><p>논문을 많이 본 분이라면 어떤 내용인지 한번에 알 수 있을 겁니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s0 = df_s.loc[<span class="number">0</span>]</span><br><span class="line">s0</span><br></pre></td></tr></table></figure><ul><li>실행 결과: <b>문헌</b>, <b>저자</b>, <b>소속</b>, <b>출판</b> 관련 정보가 빼곡합니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">eid                                                   2-s2.0-85108515894</span><br><span class="line">doi                                            10.1016/j.aej.2021.04.099</span><br><span class="line">pii                                                    S1110016821003410</span><br><span class="line">pubmed_id                                                           None</span><br><span class="line">title                  Area and energy efficient <span class="built_in">shift</span> and accumulato...</span><br><span class="line">subtype                                                               ar</span><br><span class="line">subtypeDescription                                               Article</span><br><span class="line">creator                                                      Hazarika A.</span><br><span class="line">afid                                          60115117;60015723;60000912</span><br><span class="line">affilname              Indian Institute of Information Technology Guw...</span><br><span class="line">affiliation_city                                  Guwahati;Riyadh;Howrah</span><br><span class="line">affiliation_country                             India;Saudi Arabia;India</span><br><span class="line">author_count                                                           4</span><br><span class="line">author_names           Hazarika, Anakhi;Poddar, Soumyajit;Nasralla, M...</span><br><span class="line">author_ids               57209273202;55321684000;55638677600;57207594144</span><br><span class="line">author_afids                         60115117;60115117;60015723;60000912</span><br><span class="line">coverDate                                                     2022-01-01</span><br><span class="line">coverDisplayDate                                            January 2022</span><br><span class="line">publicationName                           Alexandria Engineering Journal</span><br><span class="line">issn                                                            11100168</span><br><span class="line">source_id                                                          13907</span><br><span class="line">eIssn                                                               None</span><br><span class="line">aggregationType                                                  Journal</span><br><span class="line">volume                                                                61</span><br><span class="line">issueIdentifier                                                        1</span><br><span class="line">article_number                                                      None</span><br><span class="line">pageRange                                                        795-809</span><br><span class="line">description            Convolutional Neural Networks (CNNs) exhibit s...</span><br><span class="line">authkeywords           Approximate computing | Convolution operation ...</span><br><span class="line">citedby_count                                                          0</span><br><span class="line">openaccess                                                             1</span><br><span class="line">fund_acr                                                             PSU</span><br><span class="line">fund_no                                                   MEITY-PHD-3043</span><br><span class="line">fund_sponsor                                    Prince Sultan University</span><br></pre></td></tr></table></figure></li></ul></li><li><p><b>종류</b>별로 구분을 합시다.</p></li><li><p>예를 들어, 나는 Journal에 실린 논문을 원하지 책이나 컨퍼런스 프로시딩은 원하지 않는다면, 간단히 추릴 수 있습니다.</p></li><li><p>어떤 종류의 출판물들이 있는지 살펴봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_s[<span class="string">&quot;aggregationType&quot;</span>].unique()</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 익숙한 분류들이 보입니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([<span class="string">&#x27;Journal&#x27;</span>, <span class="string">&#x27;Conference Proceeding&#x27;</span>, <span class="string">&#x27;Book&#x27;</span>, <span class="string">&#x27;Book Series&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Trade Journal&#x27;</span>], dtype=object)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><b>년도별로 Journal에 출간된 논문들의 수</b>를 세어봅니다.</p></li><li><p>pandas DataFrame의 <code>query</code>와 <code>groupby</code>를 사용하면 간단합니다.</p></li><li><p>년도별 출간 편수를 세기 위해 논문마다 1을 할당하고 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df_s[<span class="string">&quot;year&quot;</span>] = df_s[<span class="string">&quot;coverDate&quot;</span>].apply(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">df_s[<span class="string">&quot;year&quot;</span>] = df_s[<span class="string">&quot;year&quot;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">df_s[<span class="string">&quot;num_pub&quot;</span>] = [<span class="number">1</span>] * df_s.shape[<span class="number">0</span>]</span><br><span class="line">df_pubyear = df_s.query(<span class="string">&quot;aggregationType == &#x27;Journal&#x27;&quot;</span>).groupby(<span class="string">&quot;year&quot;</span>).<span class="built_in">sum</span>()</span><br><span class="line">df_pubyear.values.T</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 년도별 출간 건수입니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array([[  1,   1,   1,   2,   1,   1,   2,   1,   1,   1,   1,   5,   4,</span><br><span class="line">          9,   7,  12,  21,  13,  18,  36,  49,  71, 113, 256, 457, 724,</span><br><span class="line">        696,   1]])</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-3-Matplotlib으로-출판-추세-그리기"><a href="#2-3-Matplotlib으로-출판-추세-그리기" class="headerlink" title="2.3. Matplotlib으로 출판 추세 그리기"></a>2.3. Matplotlib으로 출판 추세 그리기</h2><ul><li>Matplotlib을 이용해서 간단히 <b>년도별 출판 건 수</b>를 그려봅니다.</li><li><b>리뷰 논문에 하나씩 있는 그 그림</b>입니다.</li><li>2010년 이전엔 논문 수가 많이 적어서 안보이기에 확대를 했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line">ax.bar(df_pubyear.index, df_pubyear[<span class="string">&quot;num_pub&quot;</span>], fc=<span class="string">&quot;orange&quot;</span>, ec=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Number of Publication&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c_inset = <span class="string">&quot;brown&quot;</span></span><br><span class="line">ax_inset = fig.add_axes([<span class="number">0.15</span>, <span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">ax_inset.bar(df_pubyear.index, df_pubyear[<span class="string">&quot;num_pub&quot;</span>], fc=<span class="string">&quot;goldenrod&quot;</span>, ec=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">ax_inset.set_xlim(df_pubyear.index.<span class="built_in">min</span>()-<span class="number">1</span>, <span class="number">2010</span>)</span><br><span class="line">ax_inset.set_ylim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax_inset.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_edgecolor(c_inset)</span><br><span class="line">ax_inset.spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_linewidth(<span class="number">3</span>)</span><br><span class="line">ax_inset.tick_params(color=c_inset, labelcolor=c_inset)</span><br><span class="line"></span><br><span class="line">ax.axvspan(df_pubyear.index.<span class="built_in">min</span>(), <span class="number">2010</span>, fc=c_inset, alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Number of Publication&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line">ax.set_xlim(df_pubyear.index.<span class="built_in">min</span>(), )</span><br></pre></td></tr></table></figure><img src="82_scopusapi_11.png"><br></li></ul><ul><li>다음 글에서는 API를 이용한 추가 분석을 이어가겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/scopus/">scopus</category>
      
      <category domain="https://jehyunlee.github.io/tags/sciencedirect/">sciencedirect</category>
      
      
    </item>
    
    <item>
      <title>Streamgraph - Movie Genres</title>
      <link>https://jehyunlee.github.io/2021/08/09/Python-DS-81-streamgraph/</link>
      <guid>https://jehyunlee.github.io/2021/08/09/Python-DS-81-streamgraph/</guid>
      <pubDate>Sun, 08 Aug 2021 21:15:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;여러 범주의 Area chart를 누적하면 stacked chart plot이 됩니다.&lt;/li&gt;
&lt;li&gt;Matplotlib의 &lt;code&gt;stackplot()&lt;/code&gt; 함수를 사용하면 쉽게 그릴 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;cod</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>여러 범주의 Area chart를 누적하면 stacked chart plot이 됩니다.</li><li>Matplotlib의 <code>stackplot()</code> 함수를 사용하면 쉽게 그릴 수 있습니다.</li><li><code>baseline</code> 옵션으로 모양을 제어합니다.</li><li>kaggle에서 받아온 영화 데이터로 그려봅시다.</li></ul><h1 id="1-Stackplot-and-Streamgraph"><a href="#1-Stackplot-and-Streamgraph" class="headerlink" title="1. Stackplot and Streamgraph"></a>1. Stackplot and Streamgraph</h1><blockquote><p><a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/stackplot_demo.html">matplotlib: Stackplots and streamgraphs</a><br><a href="http://leebyron.com/streamgraph/">Lee Byron: Stacked Graphs</a><br><a href="http://kelsocartography.com/blog/?p=3610">Alberto Cairo: One of the worst graphics in the New York Times have published - ever!</a></p></blockquote><ul><li>x축에 따라 변하는 y를 표현하는 방법은 여러가지가 있습니다.</li><li>도형의 점, 선, 면 중 어떤 속성을 이용하느냐에 따라 전달되는 메시지가 다릅니다.</li><li><b>Area plot(영역 차트)</b>는 <b>면</b>을 이용하며 <b>전체 공간 중의 비율</b>을 전달하며, <b>범주들 간의 비율을 비교</b>하는 데도 유용합니다.</li></ul><ul><li><b>Streamgraph</b>는 Area chart의 전체 데이터에 기반해 baseline을 조정한 것입니다. </li><li>위 아래로 요동을 치며 물감이 섞이는 듯한 형상이 연출됩니다.</li><li>그러나 너무 현란한 나머지 <b>데이터를 알아보기 어렵다는 <a href="http://kelsocartography.com/blog/?p=3610">비판</a></b>을 받기도 합니다.</li></ul><ul><li>Matplotlib의 둘을 비교하는 예제를 약간 수정하여 보여드립니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_palette(<span class="string">&quot;Pastel1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data from United Nations World Population Prospects (Revision 2019)</span></span><br><span class="line"><span class="comment"># https://population.un.org/wpp/, license: CC BY 3.0 IGO</span></span><br><span class="line">year = [<span class="number">1950</span>, <span class="number">1960</span>, <span class="number">1970</span>, <span class="number">1980</span>, <span class="number">1990</span>, <span class="number">2000</span>, <span class="number">2010</span>, <span class="number">2018</span>]</span><br><span class="line">population_by_continent = &#123;</span><br><span class="line">    <span class="string">&#x27;africa&#x27;</span>: [<span class="number">228</span>, <span class="number">284</span>, <span class="number">365</span>, <span class="number">477</span>, <span class="number">631</span>, <span class="number">814</span>, <span class="number">1044</span>, <span class="number">1275</span>],</span><br><span class="line">    <span class="string">&#x27;americas&#x27;</span>: [<span class="number">340</span>, <span class="number">425</span>, <span class="number">519</span>, <span class="number">619</span>, <span class="number">727</span>, <span class="number">840</span>, <span class="number">943</span>, <span class="number">1006</span>],</span><br><span class="line">    <span class="string">&#x27;asia&#x27;</span>: [<span class="number">1394</span>, <span class="number">1686</span>, <span class="number">2120</span>, <span class="number">2625</span>, <span class="number">3202</span>, <span class="number">3714</span>, <span class="number">4169</span>, <span class="number">4560</span>],</span><br><span class="line">    <span class="string">&#x27;europe&#x27;</span>: [<span class="number">220</span>, <span class="number">253</span>, <span class="number">276</span>, <span class="number">295</span>, <span class="number">310</span>, <span class="number">303</span>, <span class="number">294</span>, <span class="number">293</span>],</span><br><span class="line">    <span class="string">&#x27;oceania&#x27;</span>: [<span class="number">12</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">39</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_mixture</span>(<span class="params">x, n=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a random mixture of *n* Gaussians, evaluated at positions *x*.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_random_gaussian</span>(<span class="params">a</span>):</span></span><br><span class="line">        amplitude = <span class="number">1</span> / (<span class="number">.1</span> + np.random.random())</span><br><span class="line">        dx = x[-<span class="number">1</span>] - x[<span class="number">0</span>]</span><br><span class="line">        x0 = (<span class="number">2</span> * np.random.random() - <span class="number">.5</span>) * dx</span><br><span class="line">        z = <span class="number">10</span> / (<span class="number">.1</span> + np.random.random()) / dx</span><br><span class="line">        a += amplitude * np.exp(-(z * (x - x0))**<span class="number">2</span>)</span><br><span class="line">    a = np.zeros_like(x)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        add_random_gaussian(a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, constrained_layout=<span class="literal">True</span>, </span><br><span class="line">                        figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stacked area plot</span></span><br><span class="line">axs[<span class="number">0</span>].stackplot(year, population_by_continent.values(),</span><br><span class="line">                 ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>,</span><br><span class="line">                 labels=population_by_continent.keys())</span><br><span class="line">axs[<span class="number">0</span>].legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlim(<span class="number">1950</span>, <span class="number">2018</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&#x27;Stacked Area Plot: World population&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlabel(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;Number of people (millions)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># streamgraph</span></span><br><span class="line">np.random.seed(<span class="number">20210809</span>)</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">101</span>)</span><br><span class="line">ys = [gaussian_mixture(x) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].stackplot(x, ys, </span><br><span class="line">                 labels = [<span class="string">f&quot;dummy<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)],</span><br><span class="line">                 ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>, baseline=<span class="string">&#x27;wiggle&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">axs[<span class="number">1</span>].legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&#x27;Streamgraph: Arbitrary Data&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="streagraph_01.png"><br></p><h1 id="2-Data"><a href="#2-Data" class="headerlink" title="2. Data"></a>2. Data</h1><h2 id="2-1-Kaggle에서-데이터-검색"><a href="#2-1-Kaggle에서-데이터-검색" class="headerlink" title="2.1. Kaggle에서 데이터 검색"></a>2.1. Kaggle에서 데이터 검색</h2><blockquote><p><a href="https://www.kaggle.com/docs/api">kaggle: How to Use Kaggle</a><br><a href="https://technowhisp.com/kaggle-api-python-documentation/">Techno Whisp: Kaggle API- The Missing Python Documentation</a></p></blockquote><ul><li>kaggle에는 좋은 데이터가 많이 있습니다.</li><li>홈페이지를 들어가서 클릭하며 다니지 않아도 API로 데이터 등을 다운로드 받을 수 있습니다.</li><li><a href="https://www.kaggle.com/docs/api">공식 홈페이지</a>에 <b>CLI 명령</b>이 나와있습니다.</li><li><b>python에서 kaggle을 활용하는 방식</b>은 <a href="https://technowhisp.com/kaggle-api-python-documentation/">이 블로그</a>를 참고합시다.</li></ul><ul><li><p>먼저 <b>API를 활성화</b>합니다.</p></li><li><p>사전에 kaggle에 가입하고 API를 받아 계정 아래의 <code>./kaggle/</code>디렉토리 <code>kaggle.json</code> 파일에 담아야 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kaggle.api.kaggle_api_extended <span class="keyword">import</span> KaggleApi</span><br><span class="line">api = KaggleApi()</span><br><span class="line">api.authenticate()</span><br></pre></td></tr></table></figure></li><li><p><b>영화 데이터셋을 검색</b>합니다.</p></li><li><p>CC 라이센스를 가진 csv 타입의 데이터셋을 검색합니다.</p></li><li><p>데이터셋 중 movies라는 이름을 포함한 데이터를 찾아봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search dataset: movie</span></span><br><span class="line">api.dataset_list(search=<span class="string">&quot;movies&quot;</span>, license_name=<span class="string">&quot;cc&quot;</span>, file_type=<span class="string">&quot;csv&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> [shivamb/netflix-shows,</span><br><span class="line">stefanoleone992/imdb-extensive-dataset,</span><br><span class="line">harshitshankhdhar/imdb-dataset-of-top-1000-movies-and-tv-shows,</span><br><span class="line">ruchi798/movies-on-netflix-prime-video-hulu-and-disney,</span><br><span class="line">sankha1998/tmdb-top-10000-popular-movies-dataset,</span><br><span class="line">jrobischon/wikipedia-movie-plots,</span><br><span class="line">danielgrijalvas/movies,</span><br><span class="line">adrianmcmahon/imdb-india-movies,</span><br><span class="line">rashikrahmanpritom/disney-movies-19372016-total-gross,</span><br><span class="line">stefanoleone992/filmtv-movies-dataset,</span><br><span class="line">unanimad/disney-plus-shows,</span><br><span class="line">pradyut23/movies,</span><br><span class="line">mathurinache/women-in-movies,</span><br><span class="line">stefanoleone992/rotten-tomatoes-movies-and-critic-reviews-dataset,</span><br><span class="line">dionisiusdh/imdb-indonesian-movies,</span><br><span class="line">therealsampat/disney-movies-dataset,</span><br><span class="line">rashikrahmanpritom/heart-attack-analysis-prediction-dataset,</span><br><span class="line">satpreetmakhija/netflix-movies-and-tv-shows-2021,</span><br><span class="line">paramarthasengupta/top-movies-database-19202000s,</span><br><span class="line">javagarm/movies-on-ott-platforms]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-2-Kaggle에서-데이터-다운받기"><a href="#2-2-Kaggle에서-데이터-다운받기" class="headerlink" title="2.2. Kaggle에서 데이터 다운받기"></a>2.2. Kaggle에서 데이터 다운받기</h2><ul><li><p>하나를 고릅니다.</p></li><li><p><code>stefanoleone992/imdb-extensive-dataset</code>이 느낌이 좋습니다.</p></li><li><p>Kaggle API를 사용해서 데이터셋에 어떤 파일이 있는지 살펴봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = <span class="string">&#x27;stefanoleone992/imdb-extensive-dataset&#x27;</span></span><br><span class="line">api.dataset_list_files(dataset).files</span><br></pre></td></tr></table></figure><ul><li>실행 결과: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[IMDb ratings.csv, IMDb names.csv, IMDb title_principals.csv, IMDb movies.csv]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><b>데이터셋 파일을 다운로드</b> 받습니다.</p></li><li><p>데이터셋 이름.zip 형식으로 되어 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 전체 데이터셋 다운로드</span></span><br><span class="line">api.dataset_download_files(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 개별 파일 다운로드: 특정 파일만 다운받고 싶으면 이렇게 하면 됩니다.</span></span><br><span class="line"><span class="comment"># api.dataset_download_files(dataset, &#x27;IMDb movies.csv&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p><b>압축을 해제합니다.</b></p></li><li><p>주피터 노트북에서 실행하는 리눅스 명령이라 앞에 !를 붙입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!unzip <span class="string">&quot;&#123;dataset.split(&#x27;/&#x27;)[1]&#125;.zip&quot;</span></span><br></pre></td></tr></table></figure><ul><li>실행 결과: 압축이 해제되었습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Archive:  imdb-extensive-dataset.<span class="built_in">zip</span></span><br><span class="line">inflating: IMDb movies.csv         </span><br><span class="line">inflating: IMDb names.csv          </span><br><span class="line">inflating: IMDb ratings.csv        </span><br><span class="line">inflating: IMDb title_principals.csv  </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-3-데이터-들여다보기"><a href="#2-3-데이터-들여다보기" class="headerlink" title="2.3. 데이터 들여다보기"></a>2.3. 데이터 들여다보기</h2><ul><li>받은 데이터에 <b>필요한 요소가 있는지, 구성은 어떤지 등을 확인</b>합니다.</li><li>데이터를 받고 보니 이게 아니다 싶으면 다시 검색하고 받아야 합니다.</li></ul><ul><li>사실 글을 쓰기 전까지 이 과정을 몇 차례 거쳤습니다. 지루한 내용은 생략하겠습니다.</li><li>예를 들어 영화 평점을 분석하고 싶다면, 다운받은 <code>IMDb movies.csv</code> 파일과 <code>IMDb ratings.csv</code>파일을 <code>imdb_title_id</code>기준으로 merge하는 과정이 필요합니다.</li><li><b>시대별 개봉 영화 장르 변화</b>를 시각화합니다. 다행히 ‘IMDb movies.csv`파일 하나만 보면 됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터 파일 읽기</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_movies = pd.read_csv(<span class="string">&quot;IMDb movies.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># year에 껴있는 &#x27;TV Movie 2019&#x27; 제거</span></span><br><span class="line"><span class="comment"># column 중에서 &#x27;year&#x27;, &#x27;title&#x27;, &#x27;genre&#x27;만 선택</span></span><br><span class="line">df_yg = df_movies.query(<span class="string">&quot;year != &#x27;TV Movie 2019&#x27;&quot;</span>)[[<span class="string">&quot;year&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;genre&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 연간 개봉 영화 편수 계산용 column 추가</span></span><br><span class="line">df_yg[<span class="string">&quot;num_movie&quot;</span>] = [<span class="number">1</span>] * df_yg.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 년도 데이터를 정수형으로 변환</span></span><br><span class="line">df_yg[<span class="string">&quot;year&quot;</span>] = df_yg[<span class="string">&quot;year&quot;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 3줄 확인</span></span><br><span class="line">df_yg.tail(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="streagraph_02.png"><br></li></ul><ul><li>총 85854편, 여러 나라의 다양한 영화가 있습니다. </li><li>영화 한편에 여러 장르가 있기도 합니다. </li><li>로맨틱 코미디는 Romance + Comedy 이니 당연합니다.</li><li>참고로 마블의 아이언맨 시리즈는 Sci-Fi + Adventure + Action입니다.</li></ul><h2 id="2-4-데이터-정리"><a href="#2-4-데이터-정리" class="headerlink" title="2.4. 데이터 정리"></a>2.4. 데이터 정리</h2><ul><li>영화 한 편에 <b>중복 분류된 장르들을 한데 모읍니다.</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genres = np.unique(<span class="string">&#x27;, &#x27;</span>.join(df_yg[<span class="string">&#x27;genre&#x27;</span>]).split(<span class="string">&#x27;, &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(genres)&#125;</span> Genres: <span class="subst">&#123;genres&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 25가지의 장르로 구분되어 있습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25 Genres: [<span class="string">&#x27;Action&#x27;</span> <span class="string">&#x27;Adult&#x27;</span> <span class="string">&#x27;Adventure&#x27;</span> <span class="string">&#x27;Animation&#x27;</span> <span class="string">&#x27;Biography&#x27;</span> <span class="string">&#x27;Comedy&#x27;</span> <span class="string">&#x27;Crime&#x27;</span> <span class="string">&#x27;Documentary&#x27;</span> <span class="string">&#x27;Drama&#x27;</span> <span class="string">&#x27;Family&#x27;</span> <span class="string">&#x27;Fantasy&#x27;</span> <span class="string">&#x27;Film-Noir&#x27;</span> <span class="string">&#x27;History&#x27;</span> <span class="string">&#x27;Horror&#x27;</span> <span class="string">&#x27;Music&#x27;</span> <span class="string">&#x27;Musical&#x27;</span> <span class="string">&#x27;Mystery&#x27;</span> <span class="string">&#x27;News&#x27;</span> <span class="string">&#x27;Reality-TV&#x27;</span> <span class="string">&#x27;Romance&#x27;</span> <span class="string">&#x27;Sci-Fi&#x27;</span> <span class="string">&#x27;Sport&#x27;</span> <span class="string">&#x27;Thriller&#x27;</span> <span class="string">&#x27;War&#x27;</span> <span class="string">&#x27;Western&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><b>genre라는 하나의 열에 쉼표(,)로 나뉜 장르들을 별도의 열로 만듭니다.</b></li><li>one-hot encoding 방식이 좋을 것 같습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> genre <span class="keyword">in</span> genres:</span><br><span class="line">    df_yg[genre] = df_yg[<span class="string">&quot;genre&quot;</span>].<span class="built_in">str</span>.contains(genre).astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line">df_yg.drop(<span class="string">&#x27;genre&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df_yg.tail()</span><br></pre></td></tr></table></figure><img src="streagraph_03.png"><br></li></ul><ul><li><b>장르별 연간 개봉 편수</b>가 궁금합니다.</li><li><code>groupby</code>로 데이터를 묶고 head와 tail을 모두 살펴봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_yg_g = df_yg.groupby(<span class="string">&quot;year&quot;</span>).<span class="built_in">sum</span>()</span><br><span class="line">display(df_yg_g.head(<span class="number">3</span>))</span><br><span class="line">display(df_yg_g.tail(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><img src="streagraph_04.png"><br></li></ul><ul><li>1894년과 1906년에 개봉된 영화가 1편씩 있습니다.</li><li>각기 <a href="https://www.imdb.com/title/tt0000009/">Miss Jerry</a>와 <a href="https://www.imdb.com/title/tt0000574/">The Story of the Kelly Gang</a>이라는 영화입니다.<br><br><img src="streagraph_05.png"><br></li></ul><ul><li>각 해에 한 편 뿐이라 <b>경향성 분석에 적절치 않다고 판단</b>됩니다. </li><li>데이터셋에서 제거하고 <b>장르별 편 수</b>를 확인합니다.</li><li>장르가 너무 많으니 상위 10개만 봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_yg_g = df_yg_g.loc[df_yg_g.index &gt; <span class="number">1910</span>]</span><br><span class="line">df_yg_g.<span class="built_in">sum</span>().sort_values(ascending=<span class="literal">False</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><img src="streagraph_06.png"><br></li></ul><ul><li><b>총 85852편</b>의 영화가 있고, <b>드라마가 거의 절반</b>입니다: 47109편</li><li>2위 <b>코미디</b>, 3위 <b>로맨스</b>까지 오면서 거의 절반씩으로 떨어집니다.</li></ul><h1 id="3-시각화"><a href="#3-시각화" class="headerlink" title="3. 시각화"></a>3. 시각화</h1><h2 id="3-1-장르별-분포-시각화"><a href="#3-1-장르별-분포-시각화" class="headerlink" title="3.1. 장르별 분포 시각화"></a>3.1. 장르별 분포 시각화</h2><ul><li><p>방금 숫자로 본 분포를 그림으로도 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_genre = df_yg_g.<span class="built_in">sum</span>().sort_values(ascending=<span class="literal">False</span>)[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">sns.barplot(num_genre.values, num_genre.index, ax=ax)</span><br><span class="line">ax.set_title(<span class="string">&quot;Number of Movies by Genre&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, pad=<span class="number">12</span>)</span><br><span class="line">ax.grid(axis=<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="streamgraph_07.png"><br></p></li><li><p>그림으로 보니 숫자와 느낌이 또 다릅니다.</p></li><li><p><b>드라마</b>와 <b>코미디</b>를 빼고 시각화를 해야 하나 싶기도 하고,</p></li><li><p>저 둘을 빼면 다른 장르들이 과대평가될 것도 같습니다.</p></li><li><p>일단 년도별로 변화가 있을 수 있으니 다 같이 그립니다.</p></li></ul><h2 id="3-2-stacked-area-plot"><a href="#3-2-stacked-area-plot" class="headerlink" title="3.2. stacked area plot"></a>3.2. stacked area plot</h2><ul><li><p>관심이 가는 장르 몇 개를 선정합니다.</p></li><li><p>stacked area chart으로 먼저 그려봅니다.</p></li><li><p>장르별 영화 편 수를 전체 영화 편 수로 나누어 비중을 그렸습니다.</p></li><li><p>영화 한 편에 여러 장르가 섞여있어 총 합은 1을 훨씬 넘습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 관심 장르 8개 선정</span></span><br><span class="line">genres_sel = [<span class="string">&#x27;Drama&#x27;</span>, <span class="string">&#x27;Comedy&#x27;</span>, <span class="string">&#x27;Romance&#x27;</span>, <span class="string">&#x27;Action&#x27;</span>, <span class="string">&#x27;Thriller&#x27;</span>, <span class="string">&#x27;Crime&#x27;</span>, <span class="string">&#x27;War&#x27;</span>, <span class="string">&#x27;Horror&#x27;</span>, <span class="string">&#x27;Western&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.stackplot(df_yg_g.index, </span><br><span class="line">             [df_yg_g[genre]/df_yg_g[<span class="string">&quot;num_movie&quot;</span>] <span class="keyword">for</span> genre <span class="keyword">in</span> genres_sel],</span><br><span class="line">             labels = genres_sel, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>)</span><br><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles=handles[::-<span class="number">1</span>], labels=labels[::-<span class="number">1</span>])</span><br><span class="line">ax.set_xlim(df_yg_g.index.<span class="built_in">min</span>(), df_yg_g.index.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="streamgraph_08.png"><br></p></li><li><p><b>범례에 한 가지 트릭을 심었습니다.</b></p></li><li><p><code>stackplot()</code>은 앞에 오는 데이터부터 아래에서 위로 차례로 쌓아갑니다.</p></li><li><p>반면 범례는 처음 놓인 데이터를 맨 위에 놓고 아래로 내려오며 만들어갑니다.</p></li><li><p>데이터와 범례의 순서가 반대이기 때문에 그림을 볼 때 다소 혼란스럽습니다.</p></li><li><p>그림을 먼저 그린 후 Line 10, 11에서 handles와 legend를 추출한 다음 [::-1]로 순서를 뒤집었습니다.</p></li></ul><ul><li>그나저나 <b>별로 예쁘지 않습니다.</b></li><li>stacked area chart의 특성상 <b>정량적 변동은 알기 어렵습니다.</b></li><li>기준점이 흔들리기 때문입니다.</li><li>각 영역의 두께가 넓어지고 좁아지는 추세를 봐야 하는데 뾰족한 노이즈들 때문에 잘 안읽힙니다.</li></ul><h2 id="3-3-steamgraph"><a href="#3-3-steamgraph" class="headerlink" title="3.3. steamgraph"></a>3.3. steamgraph</h2><ul><li><p>위 코드에 <code>baseline=&#39;weighted_wiggle&#39;</code> 하나만 추가합니다.</p></li><li><p>바닥을 영점에서 떼어서 위아래 방향으로 적절한 출렁임이 느껴지게 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.stackplot(df_yg_g.index, </span><br><span class="line">             [df_yg_g[genre]/df_yg_g[<span class="string">&quot;num_movie&quot;</span>] <span class="keyword">for</span> genre <span class="keyword">in</span> genres_sel],</span><br><span class="line">             labels = genres_sel, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>,</span><br><span class="line">             baseline=<span class="string">&#x27;weighted_wiggle&#x27;</span>)</span><br><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles=handles[::-<span class="number">1</span>], labels=labels[::-<span class="number">1</span>])</span><br><span class="line">ax.set_xlim(df_yg_g.index.<span class="built_in">min</span>(), df_yg_g.index.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="streamgraph_09.png"><br></p></li><li><p><b>시간에 따른 흐름</b>은 더 잘 느껴집니다.</p></li><li><p>그런데 크게 꺾이는 그래프가 영 불편합니다.</p></li><li><p><b>어차피 정량적으로 볼 그림이 아니기 때문에 선을 부드럽게 합니다.</b></p></li><li><p>pandas의 <b><code>rolling()</code></b>을 이용하고, <b>gaussian window를 적용</b>합니다.</p></li><li><p>단, 이러면 첫 두 데이터가 NaN이 되므로 첫 두 데이터는 원본 값을 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_yg_gs = df_yg_g.rolling(<span class="number">3</span>, win_type=<span class="string">&#x27;gaussian&#x27;</span>).mean(std=<span class="number">2</span>)</span><br><span class="line">df_yg_gs.loc[<span class="number">1911</span>] = df_yg_g.loc[<span class="number">1911</span>]</span><br><span class="line">df_yg_gs.loc[<span class="number">1912</span>] = df_yg_g.loc[<span class="number">1912</span>]</span><br><span class="line">df_yg_gs.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="streamgraph_10.png"><br></p></li></ul><ul><li><p><b>gaussian smoothing한 데이터로 다시 그립니다.</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">                       constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ax.stackplot(df_yg_g.index, </span><br><span class="line">             [df_yg_gs[genre]/df_yg_gs[<span class="string">&quot;num_movie&quot;</span>] <span class="keyword">for</span> genre <span class="keyword">in</span> genres_sel],</span><br><span class="line">             labels = genres_sel, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>,</span><br><span class="line">             baseline=<span class="string">&#x27;weighted_wiggle&#x27;</span>)</span><br><span class="line">handles, labels = ax.get_legend_handles_labels()</span><br><span class="line">ax.legend(handles=handles[::-<span class="number">1</span>], labels=labels[::-<span class="number">1</span>])</span><br><span class="line">ax.set_xlim(df_yg_g.index.<span class="built_in">min</span>(), df_yg_g.index.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><p><img src="streamgraph_11.png"><br></p></li><li><p>날카로운 면들이 사라지면서 보기가 한결 덜 불편해졌습니다.</p></li><li><p>그러면서도 <b>전반적인 변동은 모두 유지</b>되어 정성적으로 보기에 적당한 그림이 되었습니다.</p></li></ul><h2 id="3-4-장르별-순위"><a href="#3-4-장르별-순위" class="headerlink" title="3.4. 장르별 순위"></a>3.4. 장르별 순위</h2><ul><li>방금 그린 그림을 보면 <b>몇 가지 재미난 경향</b>이 눈에 띕니다.</li></ul><ol><li>111년을 이어온 <b>드라마와 코미디의 인기</b>는 참 꾸준합니다.</li><li><b>로맨스</b>는 1920, 1930년대 크게 인기를 끌었느나 그 후로는 위세가 전같지 않습니다.<br>100년 전에는 독보적이었다면 지금은 다른 장르와 경합을 해야 합니다.</li><li><b>스릴러</b>는 과거에 아주 마이너한 장르였으나 꾸준히 비중을 높여가고 있습니다.</li><li><b>전쟁</b>영화는 특정한 시기에 인기가 있습니다. 세계대전과 냉전 시기입니다.</li><li><b>서부</b>영화는 조금 슬픕니다. 한때 상당한 인기를 끌었으나 80년대 이후 종적을 감췄습니다.</li><li>대신 <b>공포</b>영화가 그 점유율을 이어받은 듯한 느낌입니다.</li></ol><ul><li>장르별 정성적 변화는 좀 알겠는데 간혹 순위가 헷갈리는 것들이 있습니다.</li><li>예를 들어 <b>1990년대 이후 로맨스와 액션의 순위 변동</b>이 언제 일어났는지 궁금하기도 하고</li><li><b>지금 스릴러 영화 수가 범죄영화를 넘어섰는지</b>도 궁금합니다.</li></ul><ul><li>streamgraph의 단점을 보완할 정량적 그래프를 그려봅시다.</li><li>먼저, <b>장르별 순위</b>를 계산합니다.</li><li>2중 for loop보다 더 좋은 방법이 있을 것 같지만 데이터 수가 그다지 많지 않아 진행했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> genre <span class="keyword">in</span> genres:</span><br><span class="line">    df_yg_g[<span class="string">f&quot;order_<span class="subst">&#123;genre&#125;</span>&quot;</span>] = np.zeros(df_yg_gs.shape[<span class="number">0</span>], dtype=<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> df_yg_gs.index:</span><br><span class="line">    <span class="keyword">for</span> order, genre <span class="keyword">in</span> <span class="built_in">enumerate</span>(df_yg_gs.loc[idx, genres].sort_values(ascending=<span class="literal">False</span>).index, <span class="number">1</span>):</span><br><span class="line">        df_yg_g.loc[idx, <span class="string">f&quot;order_<span class="subst">&#123;genre&#125;</span>&quot;</span>] = order</span><br><span class="line"></span><br><span class="line">df_yg_g</span><br></pre></td></tr></table></figure><img src="streamgraph_12.png"><br></li></ul><h2 id="3-4-Streamgraph-Line-plot"><a href="#3-4-Streamgraph-Line-plot" class="headerlink" title="3.4. Streamgraph + Line plot"></a>3.4. Streamgraph + Line plot</h2><ul><li>streamgraph와 순위 line plot을 함께 그립니다.</li><li>정성적 시각화와 정량적 시각화를 함께 해서 서로의 약점을 보완하는 것입니다.</li></ul><ul><li>심미적 표현을 위해 다음과 같은 사항을 추가했습니다.<ul><li><b>palette 변경:</b> Set3</li><li><b>전쟁시기 인기 장르:</b> War와 Western 강조, 세계대전, 한국전, 베트남전 시기 표기</li><li><b>영화 패러다임 변화:</b> 1927년 기점 무성영화/유성영화 전환 표기</li><li><b>관심 장르 순위 강조:</b> 스릴러, 공포, 로맨스, 범죄 순위 변화 강조</li></ul></li></ul><ul><li>상세한 설명은 코드와 주석을 참고해주시기 바랍니다.<details>  <summary><b>코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors <span class="keyword">as</span> mcolor</span><br><span class="line">sns.set_palette(<span class="string">&quot;Set3&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">genres_sel = [<span class="string">&#x27;Drama&#x27;</span>, <span class="string">&#x27;Comedy&#x27;</span>, <span class="string">&#x27;Romance&#x27;</span>, <span class="string">&#x27;Action&#x27;</span>, <span class="string">&#x27;Thriller&#x27;</span>, <span class="string">&#x27;Crime&#x27;</span>, <span class="string">&#x27;War&#x27;</span>, <span class="string">&#x27;Horror&#x27;</span>, <span class="string">&#x27;Western&#x27;</span>]</span><br><span class="line"></span><br><span class="line">top7_2020 = df_yg_gs.iloc[-<span class="number">1</span>][genres].sort_values(ascending=<span class="literal">False</span>)[:<span class="number">7</span>].index</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">2</span>, </span><br><span class="line">                        gridspec_kw=&#123;<span class="string">&quot;height_ratios&quot;</span>:[<span class="number">6</span>, <span class="number">4</span>], <span class="string">&quot;hspace&quot;</span>:<span class="number">0.1</span>&#125;,</span><br><span class="line">                        sharex=<span class="literal">True</span>,</span><br><span class="line">                        figsize=(<span class="number">10</span>, <span class="number">6</span>),</span><br><span class="line">                        constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># streamgraph: number of release</span></span><br><span class="line">axs[<span class="number">0</span>].stackplot(df_yg_g.index, </span><br><span class="line">             [df_yg_gs[genre]/df_yg_gs[<span class="string">&quot;num_movie&quot;</span>] <span class="keyword">for</span> genre <span class="keyword">in</span> genres_sel],</span><br><span class="line">             labels = genres_sel, ec=<span class="string">&quot;k&quot;</span>, lw=<span class="number">0.3</span>, alpha=<span class="number">0.6</span>, </span><br><span class="line">             baseline=<span class="string">&#x27;weighted_wiggle&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># War, Western 강조</span></span><br><span class="line">idx_War = genres_sel.index(<span class="string">&quot;War&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].get_children()[idx_War].set_facecolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].get_children()[idx_War].set_alpha(<span class="number">1</span>)</span><br><span class="line">idx_Western = genres_sel.index(<span class="string">&quot;Western&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].get_children()[idx_Western].set_facecolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].get_children()[idx_Western].set_alpha(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend on streamgraph</span></span><br><span class="line">handles, labels = axs[<span class="number">0</span>].get_legend_handles_labels()</span><br><span class="line">axs[<span class="number">0</span>].legend(handles=handles[::-<span class="number">1</span>], labels=labels[::-<span class="number">1</span>], </span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y limit</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(df_yg_g.index.<span class="built_in">min</span>(), df_yg_g.index.<span class="built_in">max</span>())</span><br><span class="line">axs[<span class="number">0</span>].set_ylim(-<span class="number">1.2</span>, <span class="number">1.2</span>)</span><br><span class="line">axs[<span class="number">0</span>].axis(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># line plot: rank of genre</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_darker</span>(<span class="params">CN, offset=<span class="number">0.5</span></span>):</span></span><br><span class="line">    c_rgb = mcolor.to_rgb(CN)</span><br><span class="line">    c_hsv = mcolor.rgb_to_hsv(c_rgb)</span><br><span class="line">    c_hsv[<span class="number">2</span>] = c_hsv[<span class="number">2</span>] - offset <span class="keyword">if</span> c_hsv[<span class="number">2</span>] &gt;= offset <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> mcolor.hsv_to_rgb(c_hsv)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i, genre <span class="keyword">in</span> <span class="built_in">enumerate</span>(genres_sel):</span><br><span class="line">    alpha, lw, fontweight, offset = <span class="number">0.5</span>, <span class="number">1</span>, <span class="string">&quot;normal&quot;</span>, <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">if</span> genre == <span class="string">&quot;War&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> genre <span class="keyword">in</span> [<span class="string">&quot;Romance&quot;</span>, <span class="string">&quot;Thriller&quot;</span>, <span class="string">&quot;Crime&quot;</span>, <span class="string">&quot;Horror&quot;</span>]:</span><br><span class="line">        alpha, lw, fontweight, offset = <span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;bold&quot;</span>, <span class="number">0</span></span><br><span class="line">        axs[<span class="number">1</span>].fill_between(df_yg_g.index, df_yg_g[<span class="string">f&quot;order_<span class="subst">&#123;genre&#125;</span>&quot;</span>], <span class="number">10</span>, </span><br><span class="line">                            fc=<span class="string">f&quot;C<span class="subst">&#123;i&#125;</span>&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">        </span><br><span class="line">    axs[<span class="number">1</span>].plot(df_yg_g[<span class="string">f&quot;order_<span class="subst">&#123;genre&#125;</span>&quot;</span>], </span><br><span class="line">                alpha=alpha, lw=lw, c=color_darker(<span class="string">f&quot;C<span class="subst">&#123;i&#125;</span>&quot;</span>, <span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> genre <span class="keyword">in</span> top7_2020:</span><br><span class="line">        rank = np.where(top7_2020 == genre)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        axs[<span class="number">1</span>].text(df_yg_g.index.values[-<span class="number">1</span>]+<span class="number">2</span>, df_yg_g[<span class="string">f&quot;order_<span class="subst">&#123;genre&#125;</span>&quot;</span>].values[-<span class="number">1</span>], </span><br><span class="line">                    <span class="string">f&quot;<span class="subst">&#123;rank+<span class="number">1</span>&#125;</span>: <span class="subst">&#123;genre&#125;</span>&quot;</span>,</span><br><span class="line">                    transform=axs[<span class="number">1</span>].transData,</span><br><span class="line">                    va=<span class="string">&quot;center&quot;</span>, color=color_darker(<span class="string">f&quot;C<span class="subst">&#123;i&#125;</span>&quot;</span>, <span class="number">0.5</span>), </span><br><span class="line">                    fontsize=<span class="string">&quot;large&quot;</span>, fontweight=fontweight, alpha=<span class="number">1</span></span><br><span class="line">                   )</span><br><span class="line"></span><br><span class="line"><span class="comment"># y axis and spines</span></span><br><span class="line">axs[<span class="number">1</span>].set_ylim(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">axs[<span class="number">1</span>].invert_yaxis()</span><br><span class="line">axs[<span class="number">1</span>].yaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">axs[<span class="number">1</span>].spines[[<span class="string">&quot;left&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dark background</span></span><br><span class="line">axs[<span class="number">1</span>].set_facecolor(<span class="string">&quot;0.3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># titles</span></span><br><span class="line">font_title=&#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&quot;Portion (No. of Released Movies per Year)&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&quot;Ranking by Portion&quot;</span>, fontdict=font_title, pad=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># grids</span></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    xticks = ax.get_xticks()</span><br><span class="line">    [ax.axvline(x, c=<span class="string">&quot;lightgray&quot;</span>, ls=<span class="string">&quot;:&quot;</span>, alpha=<span class="number">0.5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> xticks]</span><br><span class="line"></span><br><span class="line"><span class="comment"># world war</span></span><br><span class="line">[axs[<span class="number">0</span>].axvspan(*x, fc=<span class="string">&quot;red&quot;</span>, alpha=<span class="number">0.2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [(<span class="number">1914</span>, <span class="number">1918</span>), (<span class="number">1939</span>, <span class="number">1945</span>)]]</span><br><span class="line">[axs[<span class="number">1</span>].axvspan(*x, fc=<span class="string">&quot;mistyrose&quot;</span>, alpha=<span class="number">0.3</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [(<span class="number">1914</span>, <span class="number">1918</span>), (<span class="number">1939</span>, <span class="number">1945</span>)]]</span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1918</span>, <span class="number">1.0</span>, <span class="string">&quot;WW1 &quot;</span>, c=<span class="string">&quot;darkred&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)    </span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1945</span>, <span class="number">1.0</span>, <span class="string">&quot;WW2 &quot;</span>, c=<span class="string">&quot;darkred&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Korean war</span></span><br><span class="line">axs[<span class="number">0</span>].axvspan(<span class="number">1950</span>, <span class="number">1953</span>, fc=<span class="string">&quot;red&quot;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">axs[<span class="number">1</span>].axvspan(<span class="number">1950</span>, <span class="number">1953</span>, fc=<span class="string">&quot;mistyrose&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1953</span>, <span class="number">1.0</span>, <span class="string">&quot; KW&quot;</span>, c=<span class="string">&quot;darkred&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Korean war</span></span><br><span class="line">axs[<span class="number">0</span>].axvspan(<span class="number">1955</span>, <span class="number">1975</span>, fc=<span class="string">&quot;red&quot;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">axs[<span class="number">1</span>].axvspan(<span class="number">1955</span>, <span class="number">1975</span>, fc=<span class="string">&quot;mistyrose&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1975</span>, <span class="number">1.0</span>, <span class="string">&quot; Vietnam War &quot;</span>, c=<span class="string">&quot;darkred&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># sound film</span></span><br><span class="line">axs[<span class="number">0</span>].axvline(<span class="number">1927</span>, c=<span class="string">&quot;0.5&quot;</span>, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>)</span><br><span class="line">axs[<span class="number">1</span>].axvline(<span class="number">1927</span>, c=<span class="string">&quot;w&quot;</span>, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>)</span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1927</span>, -<span class="number">1.5</span>, <span class="string">&quot;silent film &quot;</span>, c=<span class="string">&quot;0.4&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;right&quot;</span>)</span><br><span class="line">axs[<span class="number">0</span>].text(<span class="number">1927</span>, -<span class="number">1.5</span>, <span class="string">&quot; sound film (gradually) &quot;</span>, c=<span class="string">&quot;0.4&quot;</span>, fontsize=<span class="string">&quot;large&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>, ha=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;w&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="streamgraph.png"><br></p><h2 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h2><ul><li><b>Kaggle API</b>를 이용해서 데이터를 쉽게 받아올 수 있습니다.</li><li><b>streamgraph는 시간에 따른 점유율 변화를 표현하기에 유리</b>합니다.</li><li>그러나 <b>정량적인 데이터 표현이 어렵습니다.</b></li><li><b>보조지표나 보조 plot을 이용해 보완</b>합시다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/streamgraph/">streamgraph</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib 3D Plots (2)</title>
      <link>https://jehyunlee.github.io/2021/07/10/Python-DS-80-mpl3d2/</link>
      <guid>https://jehyunlee.github.io/2021/07/10/Python-DS-80-mpl3d2/</guid>
      <pubDate>Sat, 10 Jul 2021 08:09:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib으로 3D Plot을 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.&lt;/li&gt;
&lt;li&gt;막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Matplotlib으로 3D Plot을 할 수 있습니다.</li><li>많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.</li><li>막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.</li></ul><p><strong>Reference</strong></p><blockquote><p><a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">matplotlib tutorial: The mplot3d Toolkit</a><br><a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">numpy.meshgrid</a></p></blockquote><h1 id="3-3D-Visualization"><a href="#3-3D-Visualization" class="headerlink" title="3. 3D Visualization"></a>3. 3D Visualization</h1><ul><li>일반적으로는 x, y축이 있는 2D plot을 만듭니다.</li><li>간혹 3D plot을 그리려면 x, y, z 세 개의 축이 필요합니다.</li><li>3D 공간을 만드는 것부터 그림을 그리는 것까지 알아봅시다.</li></ul><h2 id="3-1-3D-Axes-만들기"><a href="#3-1-3D-Axes-만들기" class="headerlink" title="3.1. 3D Axes 만들기"></a>3.1. 3D Axes 만들기</h2><ul><li><p>3D plot <a href="https://matplotlib.org/stable/gallery/mplot3d/wire3d.html">공식 홈페이지 예제</a>를 보면 대개 이렇게 시작합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> axes3d</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_01.png"><br></p></li><li><p>위 코드를 입력하면 그림과 같이 비어있는 3D 공간이 생성됩니다.</p></li><li><p>공식 홈페이지에 있는 코드이니만큼 표준 코드겠지만 이상한 점이 있습니다.</p></li><li><p><b><code>from mpl_toolkits.mplot3d import axes3d</code></b>를 했는데, <b><code>axes3d</code></b>는 어디 쓴걸까요?</p></li></ul><ul><li><p><b>결론적으로 말씀드리면 사용되지 않았습니다.</b></p></li><li><p>과거에는 2D는 Axes, 3D는 Axes3D 객체에 따로 담았어야 했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">ax = Axes3D(fig)</span><br></pre></td></tr></table></figure></li><li><p>Matplotlib 1.0.0 이후 Axes로 통합되었습니다.</p></li><li><p>따라서 <code>fig.add_subplot(projection=&#39;3d&#39;)</code>만으로 Axes3D를 사용할 수 있는데, <code>projection=&#39;3d&#39;</code>를 사용하려면 <code>import Axes3D</code>가 필요한 것입니다.</p></li><li><p><b>하지만 이마저도 더이상 필요하지 않습니다.</b></p></li><li><p>Matplotlib 3.2.0 이후 따로 import하지 않아도 <code>projection=&#39;3d&#39;</code>를 사용할 수 있습니다.</p></li><li><p>최신 버전은 3.4.2입니다. <b>가급적 최신 버전을 사용하는 것이 좋습니다.</b></p></li></ul><ul><li>1열 3행의 3D axes를 만든다고 하면, 많은 예제 코드에서 이런 식으로 만듭니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">ax0 = fig.add_subplot(<span class="number">131</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">132</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">133</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d2_02.png"><br></li></ul><ul><li><p>그러나 <b>일일이 fig.add_subplot(projection=’3d’)를 할 필요가 없습니다.</b></p></li><li><p><code>fig, axs = plt.subplot(ncols=3)</code>에 매개변수로 <code>subplot_kw=&#123;&quot;projection&quot;:&quot;3d&quot;&#125;</code>를 추가하면 모든 Axes가 3D로 바뀝니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2D Axes</span></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_03.png"><br></p></li><li><p><code>subplot_kw=&#123;&quot;projection&quot;:&quot;3d&quot;&#125;</code> 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>), </span><br><span class="line">                        subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="mpl3d2_04.png"><br></p></li></ul><h2 id="3-2-각도-지정"><a href="#3-2-각도-지정" class="headerlink" title="3.2. 각도 지정"></a>3.2. 각도 지정</h2><ul><li><p>3D plot은 관찰 각도가 중요합니다.</p></li><li><p>관찰 각도에 따라 보이는 모습이 달라지기 때문입니다.</p></li><li><p><b>Matplotlib 3D view 각도는 <code>ax.view_init()</code>명령으로 제어합니다.</b></p></li><li><p>두 개의 3D 공간을 만들고 앙각(elevation angle)과 방위각(azimuthal angle)을 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.view_init(elev=<span class="number">30.</span>, azim=<span class="number">120</span>)    <span class="comment"># 각도 지정</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_10.png"><br></p></li><li><p>xlabel, ylabel, title등은 일반적인 2D axes와 동일하게 제어할 수 있습니다.</p></li></ul><h2 id="3-3-ax-scatter"><a href="#3-3-ax-scatter" class="headerlink" title="3.3. ax.scatter()"></a>3.3. <code>ax.scatter()</code></h2><ul><li><p>3D 공간에서 scatter plot을 그립니다.</p></li><li><p>위 코드에 <code>ax.scatter()</code>를 추가하는 것이 전부입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>],  <span class="comment"># 3D scatter plot</span></span><br><span class="line">               c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">5</span>, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_11.png"><br></p></li><li><p>데이터 밀도가 높은 왼쪽 그림에서는 거의 곡면으로 보입니다.</p></li><li><p>그러나 오른쪽 그림은 z가 급격하게 변하기 때문에 사이사이에 빈틈이 많이 보입니다.</p></li><li><p>이런 이유로 <b>scatter plot은 조심해서 사용해야 합니다.</b></p></li></ul><ul><li>3D plot은 2D 화면으로 전달되는데 한계가 있습니다.</li><li>이를 극복하기 위한 방법 중 가장 좋은 방법 중 하나는 <b>그림을 회전</b>시키는 것입니다.</li><li>z축을 중심으로 이미지를 회전시키며 한 장 한 장을 담아 동영상으로 출력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation </span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    <span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">        ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">        ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">        ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">        ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], </span><br><span class="line">                   c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">5</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span>(<span class="params">i</span>):</span></span><br><span class="line">    axs[<span class="number">0</span>].view_init(elev=<span class="number">30.</span>, azim=i)</span><br><span class="line">    axs[<span class="number">1</span>].view_init(elev=<span class="number">30.</span>, azim=i)</span><br><span class="line">    <span class="keyword">return</span> fig,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Animate</span></span><br><span class="line">anim = animation.FuncAnimation(fig, animate, init_func=init,</span><br><span class="line">                               frames=<span class="number">360</span>, interval=<span class="number">20</span>, blit=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">anim.save(<span class="string">&#x27;mpl3d_scatter.gif&#x27;</span>, fps=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d_scatter.gif"><br></li></ul><ul><li>동영상으로 보니 전체적인 모습이 잘 들어옵니다.</li><li>앞으로도 비슷한 그림을 동영상으로 만들겠습니다. </li><li>다만, <b>코드 구조는 동일하므로 코드는 보이지 않겠습니다.</b></li></ul><h2 id="3-4-ax-contour"><a href="#3-4-ax-contour" class="headerlink" title="3.4. ax.contour()"></a>3.4. <code>ax.contour()</code></h2><ul><li>contour plot도 3D로 표현할 수 있습니다.</li><li>2D와 마찬가지로 데이터 형식을 wide format으로 바꾸어야 합니다.</li><li><b>wide format으로만 만들어 넣으면 되었던 2D와 달리 X, Y도 필요합니다.</b></li><li><code>df.pivot_table()</code>로 만든 wide form에서 index와 columns를 떼어 X와 Y를 만듭니다.</li><li>다만 Z와 shape이 같아야 하므로 필요한 수만큼 복사하여 X, Y를 만듭니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]    </span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.contour(X, Y, Z, levels=<span class="number">20</span>, cmap=<span class="string">&quot;inferno&quot;</span>)  <span class="comment">## ax.contour()</span></span><br></pre></td></tr></table></figure><img src="mpl3d_18.png"><br></li></ul><ul><li>동영상으로도 봅시다.<br><img src="mpl3d_contour0.gif"><br></li></ul><ul><li>등고선 모양으로 contour plot이 생성되었습니다.</li><li>scatter plot보다 한결 정돈되어보이기도 하지만 <b>윤곽선이 보이지 않아 아쉽습니다.</b></li></ul><ul><li><p>입체감을 배가시키는 방법으로 등고선을 깊이 방향으로 늘릴 수 있습니다.</p></li><li><p>매개변수에 <code>extend3d=True</code>를 추가합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contour(X, Y, Z, extend3d=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_16.png"><br></p></li><li><p>또는, 깊이에 수직 방향으로 넓게 펼 수 있습니다.</p></li><li><p>이때 명령어는 <code>ax.contour()</code>가 아닌 <code>ax.contourf()</code>가 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contourf(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_17.png"><br></p></li></ul><h2 id="3-5-ax-plot-wireframe"><a href="#3-5-ax-plot-wireframe" class="headerlink" title="3.5. ax.plot_wireframe()"></a>3.5. <code>ax.plot_wireframe()</code></h2><ul><li><p>Matplotlib 3D plot의 기본 plot이라고 할 수 있는 방식입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plot_wireframe</span></span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_wireframe(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)   <span class="comment"># ax.plot_wireframe()</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_19.png"><br><br><img src="mpl3d_plot_wireframe.gif"><br></p></li><li><p>데이터끼리 얽힌 wireframe으로 덕에 contour plot에 비해 <b>윤곽선이 잘 드러납니다.</b></p></li><li><p>그러나 오른쪽 그림처럼 z방향으로 급격하게 변하는 경우 외곽선이 울퉁불퉁합니다.</p></li><li><p>그리고 또 하나, <b><code>cmap=&quot;inferno&quot;</code></b>가 작동하지 않습니다.</p></li><li><p><code>ax.plot_wireframe()</code>에는 색을 입힐 수 없습니다.</p></li></ul><h2 id="3-6-ax-plot-surface"><a href="#3-6-ax-plot-surface" class="headerlink" title="3.6. ax.plot_surface()"></a>3.6. <code>ax.plot_surface()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/gallery/mplot3d/surface3d.html">matplotlib: 3D surface</a></p></blockquote><ul><li><p>Matplotlib에는 데이터를 면으로 보여주는 <code>plot_surface()</code> 명령이 있습니다.<br><img src="mpl3d_20.png"><br></p></li><li><p>3D 데이터를 이어서 면으로 보여주는 명령이기 때문에 매우 유용합니다.</p></li><li><p>제 데이터에도 적절할지 한번 확인해보겠습니다.</p></li><li><p>시각화 코드를 <code>ax.plot_surface()</code>로 교체합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_surface(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)  <span class="comment"># surface plot</span></span><br></pre></td></tr></table></figure><p><img src="mpl3d_12.png"><br></p></li><li><p>어찌된 일인지 아무 일도 발생하지 않습니다.</p></li><li><p>에러 메시지에서 <b>NaN이 문제</b>라고 합니다.</p></li><li><p>wide format으로 변형한 Z에 데이터가 포함되어 있지 않은 부분이 문제가 되는 것 같습니다.</p></li><li><p>이를 <code>numpy.nan_to_num()</code>을 이용해 다른 숫자로 대체합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = np.nan_to_num(data_pt.values, <span class="number">0.0</span>)</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_surface(X, Y, Z, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_13.png"><br><br><img src="mpl3d_plot_surface.gif"><br></p></li><li><p>존재하지 않는 데이터가 메워지자 <code>ax.contour()</code>가 동작합니다.</p></li><li><p>그러나 <b>메워진 값이 진짜 데이터로 오인</b>될 소지가 다분합니다.</p></li><li><p>심지어 메워진 값으로 인해 발생한 옆면의 색이 어지럽습니다. <b>웬만하면 이러지 맙시다</b></p></li></ul><h2 id="3-7-ax-plot-trisurf"><a href="#3-7-ax-plot-trisurf" class="headerlink" title="3.7. ax.plot_trisurf()"></a>3.7. <code>ax.plot_trisurf()</code></h2><ul><li><p><a href="https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/">지난 글</a>에서 데이터로 mesh를 만들 수 있다고 했습니다.</p></li><li><p>3D에서도 삼각형 mesh를 만들어 surface를 표현할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_trisurf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_14.png"><br><br><img src="mpl3d_plot_trisurf.gif"><br></p></li><li><p>2D에서와 마찬가지로 3D에서도 concave한 지점에 존재하지 않았던 facet이 생깁니다.</p></li><li><p>아쉽기는 하지만 전반적으로 가장 양호합니다.</p></li><li><p><b>mask 매개변수를 익혀서 삭제하는 방법</b>을 알아봐야겠습니다.</p></li></ul><h2 id="3-8-ax-plot-trisurf-ax-contour"><a href="#3-8-ax-plot-trisurf-ax-contour" class="headerlink" title="3.8. ax.plot_trisurf() + ax.contour()"></a>3.8. <code>ax.plot_trisurf()</code> + <code>ax.contour()</code></h2><ul><li>이제까지 살펴본 것 중에서 <code>ax.contour()</code>와 <code>ax.plot_trisurf</code>가 가장 쓸모있어보입니다.</li><li>둘을 함께 넣어서 입체적인 그림에 등고선을 추가합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> ax == axs[<span class="number">0</span>] <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    </span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X_ = data_pt.columns.tolist()</span><br><span class="line">    Y_ = data_pt.index.tolist()</span><br><span class="line">    X = [X_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_))]</span><br><span class="line">    Y = [[y_]*<span class="built_in">len</span>(X_) <span class="keyword">for</span> y_ <span class="keyword">in</span> Y_]</span><br><span class="line">    Z = data_pt.values</span><br><span class="line">    </span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel, labelpad=<span class="number">16</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Z&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    ax.plot_trisurf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.contour(X, Y, Z, levels=<span class="number">20</span>, colors=<span class="string">&quot;k&quot;</span>, linewidths=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><img src="mpl3d_21.png"><br><br><img src="mpl3d_contour_trisurf.gif"><br></li></ul><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><ul><li>x, y, z 3축의 데이터를 시각화하는 방법은 여러가지가 있습니다.</li><li>2D image처럼 표현할 수도 있고, 3D로 울퉁불퉁한 모양을 표현할 수도 있습니다.</li><li><b>무엇이 적절할지는 데이터와 프로젝트의 목적, 시각화 목적에 따라 달라집니다.</b></li><li>본인에게 적절한 방식을 슬기롭게 선택하시기 바랍니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/3D/">3D</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib 3D Plots (1)</title>
      <link>https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/</link>
      <guid>https://jehyunlee.github.io/2021/07/09/Python-DS-79-mpl3d/</guid>
      <pubDate>Fri, 09 Jul 2021 02:17:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib으로 3D Plot을 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.&lt;/li&gt;
&lt;li&gt;막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Matplotlib으로 3D Plot을 할 수 있습니다.</li><li>많은 분들이 알고 있는 사실이지만 적극적으로 쓰이지 않습니다.</li><li>막상 쓰려면 너무 낯설기도 하고 잘 모르기도 하기 때문입니다.</li></ul><p><strong>Reference</strong></p><blockquote><p><a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">matplotlib tutorial: The mplot3d Toolkit</a><br><a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">numpy.meshgrid</a></p></blockquote><h1 id="1-예제-데이터"><a href="#1-예제-데이터" class="headerlink" title="1. 예제 데이터"></a>1. 예제 데이터</h1><h2 id="1-1-공식-예제-데이터"><a href="#1-1-공식-예제-데이터" class="headerlink" title="1.1. 공식 예제 데이터"></a>1.1. 공식 예제 데이터</h2><p><img src="mpl3d_18.png"></p><ul><li><p>위 그림이 익숙한 분들이 많으실텐데, Matplotlib이 가지고 있는 3D 예제 데이터입니다.</p></li><li><p><code>mpl_toolkits.mplot3d.axes3d</code> 모듈의 <code>get_test_data()</code>명령으로 불러올 수 있습니다.</p></li><li><p><b>매개변수</b>로 float을 받습니다. 정밀도를 나타내며 숫자가 작을수록 정밀합니다.</p></li><li><p>이상하게도 <b><a href="https://matplotlib.org/stable/api/toolkits/mplot3d.html?highlight=mplot3d#module-mpl_toolkits.mplot3d">공식 홈페이지</a>에 누락</b>되어 있습니다.</p></li><li><p>3D Plot 공식 예제에서는 보통 0.5를 넣습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.axes3d <span class="keyword">import</span> get_test_data</span><br><span class="line"></span><br><span class="line">X, Y, Z = get_test_data(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;X.shape=<span class="subst">&#123;X.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Y.shape=<span class="subst">&#123;Y.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Z.shape=<span class="subst">&#123;Z.shape&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>실행 결과 : <a href="https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html">meshgrid</a>형식의 12 x 12 데이터가 생성됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X.shape=(12, 12)</span><br><span class="line">Y.shape=(12, 12)</span><br><span class="line">Z.shape=(12, 12)</span><br></pre></td></tr></table></figure></li><li><p><code>get_test_data()</code>에 들어가는 숫자를 바꿔봅니다.</p></li><li><p>숫자에 반비례하여 해상도를 바꾸는 효과가 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), subplot_kw=&#123;<span class="string">&quot;projection&quot;</span>:<span class="string">&quot;3d&quot;</span>&#125;, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, d <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.1</span>]):</span><br><span class="line">    X, Y, Z = get_test_data(d)</span><br><span class="line">    dim = X.shape[<span class="number">0</span>]</span><br><span class="line">    ax.plot_wireframe(X, Y, Z)</span><br><span class="line">    ax.set_title(<span class="string">f&quot;get_test_data(<span class="subst">&#123;d&#125;</span>): <span class="subst">&#123;dim&#125;</span>x<span class="subst">&#123;dim&#125;</span>&quot;</span>, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;gray&quot;</span>, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_19.png"><br></p></li></ul><h2 id="1-2-이번-예제-데이터"><a href="#1-2-이번-예제-데이터" class="headerlink" title="1.2. 이번 예제 데이터"></a>1.2. 이번 예제 데이터</h2><ul><li>그러나 이 글에서 우리는 저 예제 데이터를 사용하지 않을 것입니다.</li><li>기본 예제 데이터를 사용한 그림을 보고 싶으시면 <a href="https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html#sphx-glr-tutorials-toolkits-mplot3d-py">공식 홈페이지</a>를 보시기 바랍니다.</li><li>이 글에서는 제가 현업에서 얻은 예제 데이터 두 가지를 사용하겠습니다.</li><li><b>보안을 위해 column name은 제거했습니다.</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data1 = pd.read_csv(<span class="string">&quot;data1.csv&quot;</span>)</span><br><span class="line">data1.head()</span><br></pre></td></tr></table></figure><img src="mpl3d_01.png"><br></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = pd.read_csv(<span class="string">&quot;data2.csv&quot;</span>)</span><br><span class="line">data2.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_02.png"><br></p><ul><li>data1과 data2에는 Y1과 Y2가 있습니다.</li><li>data1은 X, Y1을 독립변수로 Y2과 Z를 얻은 것이고</li><li>data2는 X, Y2를 독립변수로 Y1과 Z를 얻은 것입니다.</li><li>다시 말해 <b>data1은 X와 Y1</b>이, <b>data2는 X와 Y2</b>가 <b>직교좌표계</b>에 놓여 있습니다.</li><li>그리고 <b>무의미한 데이터는 삭제</b>되어 있습니다. </li></ul><h1 id="2-2D-Visualization"><a href="#2-2D-Visualization" class="headerlink" title="2. 2D Visualization"></a>2. 2D Visualization</h1><ul><li>3D 데이터는 2D 이미지로 표현할 수 있습니다.</li><li>여러가지 방식을 사용합니다.</li></ul><h2 id="2-1-ax-scatter"><a href="#2-1-ax-scatter" class="headerlink" title="2.1. ax.scatter()"></a>2.1. <code>ax.scatter()</code></h2><ul><li><p>가장 기본적인 scatter plot을 사용합니다.</p></li><li><p>color로 Z를 사용하고 inferno colormap으로 데이터를 표기합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.scatter(data[<span class="string">&quot;X&quot;</span>], data[ydata], c=data[<span class="string">&quot;Z&quot;</span>], cmap=<span class="string">&quot;inferno&quot;</span>, s=<span class="number">10</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_03.png"><br></p></li><li><p>왼쪽 X vs Y1은 사다리꼴 모양,</p></li><li><p>오른쪽 X vs Y2는 휘어진 활 모양입니다.</p></li><li><p><b>scatter plot은 그려보기 가장 좋지만 데이터 사이 거리가 멀면 듬성듬성 구멍이 보일 수도 있습니다.</b></p></li></ul><h2 id="2-2-ax-imshow"><a href="#2-2-ax-imshow" class="headerlink" title="2.2. ax.imshow()"></a>2.2. <code>ax.imshow()</code></h2><ul><li><p>xy 평면에 놓인 데이터는 이미지처럼 다룰 수 있습니다.</p></li><li><p><code>ax.imshow()</code>명령을 쓰려면 pandas의 <code>pivot_table</code> 명령을 이용해 데이터 형태를 바꾸어야 합니다.</p></li><li><p>가로에 X 데이터를, 세로에 Y 데이터를 놓기 위해 X를 column, Y를 index로 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1.pivot_table(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;Y1&quot;</span>, <span class="string">&quot;X&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_04.png"><br></p></li><li><p>numerical data인 X와 Y를 categorical처럼 사용합니다.</p></li><li><p>데이터가 직교하지 않는 경우 매우 많은 구멍이 뚫립니다.<br>(ex. data1에서 X와 Y2로 <code>pivot_table()</code>을 하는 경우) </p></li><li><p>X, Y, Z 컬럼이 따로 있는 방식을 <b>long format</b>,</p></li><li><p>가로와 세로에 X와 Y가 놓이고 Z가 행렬처럼 놓이는 방식을 <b>wide format</b>이라고 합니다.</p></li><li><p>long format을 입력받는 명령이 있고, wide format을 입력받는 명령이 있습니다.</p></li></ul><ul><li>데이터를 이미지인양 표현합니다.</li><li><b>가로와 세로축이 index</b>이기 때문에 <b>extent</b>매개변수로 실제 값과 매핑을 시켜야 합니다.</li><li>이 작업이 없으면 값이 아니라 index로 출력됩니다.</li></ul><ul><li>그리고 하나 더, 이미지는 다른 plot과 달리 <b>y값이 위에서부터 아래로 작아집니다.</b></li><li><b><code>ax.invert_yaxis()</code>를 해서 상하를 뒤집어야 합니다.</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.imshow(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), cmap=<span class="string">&quot;inferno&quot;</span>, </span><br><span class="line">              extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(),      <span class="comment"># 가로에 X 데이터</span></span><br><span class="line">                      data[ydata].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>()]) <span class="comment"># 세로에 Y 데이터</span></span><br><span class="line">    ax.invert_yaxis()  <span class="comment"># 그림 뒤집기</span></span><br><span class="line">    ax.set_aspect((data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>() - data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>())/(data[ydata].<span class="built_in">max</span>() - data[ydata].<span class="built_in">min</span>()))</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_05.png"><br></li></ul><h2 id="2-3-ax-pcolor-ax-pcolormesh-ax-pcolorfast"><a href="#2-3-ax-pcolor-ax-pcolormesh-ax-pcolorfast" class="headerlink" title="2.3. ax.pcolor(), ax.pcolormesh(), ax.pcolorfast()"></a>2.3. <code>ax.pcolor()</code>, <code>ax.pcolormesh()</code>, <code>ax.pcolorfast()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#differences-pcolor-pcolormesh">matplotlib: Difference between pcolor() and pcolormesh()</a><br><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.pcolorfast.html?highlight=pcolorfast#matplotlib.axes.Axes.pcolorfast">matplotlib.axes.Axes.pcolorfast</a></p></blockquote><ul><li>이미지처럼 출력할 수 있는 명령은 여러 가지가 있습니다.</li><li><code>ax.pcolor()</code>, <code>ax.pcolormesh()</code>, <code>ax.pcolorfast()</code>가 그들입니다.</li><li><code>ax.imshow()</code>는 pixel의 가로세로 길이가 같아야 하지만 이들은 그렇지 않습니다.</li></ul><ul><li><code>ax.pcolor()</code>는 <a href="https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.PolyCollection">PolyCollection</a>을 return하고</li><li><code>ax.pcolormesh()</code>는 <a href="https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.QuadMesh">QuadMesh</a>를 return합니다.</li><li><code>ax.pcolormesh()</code>가 빠르고 Gouraud shading을 지원하지만 <code>ax.pcolor()</code>는 masked array를 지원합니다.</li><li><code>ax.pcolorfast()</code>는 Agg backend를 이용해 <code>ax.pcolor()</code>를 지원하는 실험적인 기능입니다.</li></ul><ul><li><p>예제 코드는 <code>ax.pcolor()</code>만 사용합니다.</p></li><li><p>실행해보면 아시겠지만 다른 명령도 결과가 똑같습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.pcolor(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X (index)&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata + <span class="string">&quot; (index)&quot;</span>, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_06.png"></p></li><li><p><b>X, Y 좌표가 실제 데이터가 아니라 index입니다.</b></p></li><li><p>index를 좌표로 바꿉니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    data_pt = data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    ax.pcolor(data_pt, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># index 중에서 그림에 표시된 범위와 전체 데이터 범위를 넘지 않는 것들 선택</span></span><br><span class="line">    xticks = [x <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() </span><br><span class="line">              <span class="keyword">if</span> (ax.get_xbound()[<span class="number">0</span>] &lt;= x &lt;= ax.get_xbound()[<span class="number">1</span>])   <span class="comment"># 그림 표시 범위 안쪽</span></span><br><span class="line">                  <span class="keyword">and</span> x &lt; <span class="built_in">len</span>(data_pt.columns)]                        <span class="comment"># 전체 데이터 범위 안쪽</span></span><br><span class="line">    ax.set_xticks(xticks)</span><br><span class="line">    ax.set_xticklabels([<span class="string">f&quot;<span class="subst">&#123;data_pt.columns[<span class="built_in">int</span>(x)]:<span class="number">.3</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> xticks])   <span class="comment"># 문자열 포맷 지정</span></span><br><span class="line">    </span><br><span class="line">    yticks = [y <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() </span><br><span class="line">              <span class="keyword">if</span> (ax.get_ybound()[<span class="number">0</span>] &lt;= y &lt;= ax.get_ybound()[<span class="number">1</span>]) </span><br><span class="line">                  <span class="keyword">and</span> y &lt; <span class="built_in">len</span>(data_pt.index)]</span><br><span class="line">    ax.set_yticks(yticks)</span><br><span class="line">    ax.set_yticklabels([<span class="string">f&quot;<span class="subst">&#123;data_pt.index[<span class="built_in">int</span>(y)]:<span class="number">.3</span>f&#125;</span>&quot;</span> <span class="keyword">for</span> y <span class="keyword">in</span> yticks])</span><br></pre></td></tr></table></figure><p><img src="mpl3d_06_1.png"><br></p></li><li><p>이런 식으로 해당 index의 좌표를 억지로 찾아 넣을 수는 있으나 자연스럽지 못합니다.</p></li><li><p><b>pcolor 시리즈는 다른 용처를 찾아봅시다. 여긴 아닙니다.</b></p></li></ul><h2 id="2-4-ax-contour"><a href="#2-4-ax-contour" class="headerlink" title="2.4. ax.contour"></a>2.4. <code>ax.contour</code></h2><blockquote><p><a href="https://matplotlib.org/stable/gallery/images_contours_and_fields/contour_demo.html#sphx-glr-gallery-images-contours-and-fields-contour-demo-py">matplotlib: Contour Demo</a><br><a href="https://matplotlib.org/stable/api/contour_api.html?highlight=contourlabeler#matplotlib.contour.ContourLabeler">matplotlib: matplotlib.contour</a></p></blockquote><ul><li><p>Z 데이터를 등고선으로 표기합니다.</p></li><li><p>기상도나 지형도에서 많이 본 형식이기 때문에 데이터 전달력이 좋습니다.</p></li><li><p><code>ax.imshow</code>처럼 extent 매개변수를 사용할 수 있어 <b>실제 좌표로 표현이 가능</b>합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># wide format 데이터 활용</span></span><br><span class="line">               levels=<span class="number">25</span>, cmap=<span class="string">&quot;inferno&quot;</span>,         <span class="comment"># 등고선 갯수와 colormap 지정</span></span><br><span class="line">               <span class="comment"># extent 매개변수 적용 : x축과 y축에 실제 데이터값 매핑</span></span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_09.png"><br></p></li><li><p><b>등고선에 데이터 값을 표기</b>해서 <b>정확한 값을 전달</b>하는 것이 가능합니다.</p></li><li><p>데이터 값이 들어가려면 등고선의 수를 좀 줄이는 편이 좋습니다.</p></li></ul><ul><li>글자가 놓이는 부분의 등고선을 생략하려면 매개변수로 <code>inline=True</code>를 넣고,</li><li>글자 좌우 여백을 조정하고 싶으면 <code>inline_spacing</code>을 조절합니다.</li><li>매개변수로 상당히 많은 세부사항을 조정할 수 있습니다. </li><li>자세한 내용은 <a href="https://matplotlib.org/stable/api/contour_api.html?highlight=contourlabeler#matplotlib.contour.ContourLabeler">공식 홈페이지</a>의 <code>matplotlib.contour.ContourLabeler.clabel</code>을 참고합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    cs = ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># contour label 삽입을 위해 객체(cs)로 받음.</span></span><br><span class="line">                    levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>,</span><br><span class="line">                    extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.clabel(cs, inline=<span class="literal">True</span>, inline_spacing=<span class="number">0</span>, fontsize=<span class="number">12</span>) <span class="comment"># contour label 설정</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_09_1.png"><br></li></ul><h2 id="2-5-ax-contourf"><a href="#2-5-ax-contourf" class="headerlink" title="2.5. ax.contourf()"></a>2.5. <code>ax.contourf()</code></h2><ul><li>등고선 영역에 색칠을 합니다.</li><li><code>ax.imshow()</code>를 단계별로 quantize 했다고도 볼 수 있습니다.</li><li>자체적으로도 <code>ax.clabel()</code>로 등고선 레이블을 붙일 수 있지만 <code>ax.contour()</code>과 협력하면 더 좋습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.contourf(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># 등고선 사이 채색</span></span><br><span class="line">               levels=<span class="number">25</span>, cmap=<span class="string">&quot;inferno&quot;</span>, </span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    cs = ax.contour(data.pivot_table(<span class="string">&quot;Z&quot;</span>, ydata, <span class="string">&quot;X&quot;</span>), <span class="comment"># 등고선</span></span><br><span class="line">               levels=<span class="number">25</span>, colors=<span class="string">&quot;w&quot;</span>, alpha=<span class="number">0.5</span>, </span><br><span class="line">               extent=[data[<span class="string">&quot;X&quot;</span>].<span class="built_in">min</span>(), data[<span class="string">&quot;X&quot;</span>].<span class="built_in">max</span>(), data[ydata].<span class="built_in">min</span>(), data[ydata].<span class="built_in">max</span>()])</span><br><span class="line">    ax.clabel(cs, inline=<span class="literal">True</span>, inline_spacing=<span class="number">0</span>, fontsize=<span class="number">12</span>)  <span class="comment"># 등고선 레이블</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_25.png"><br></li></ul><h2 id="2-6-ax-triplot"><a href="#2-6-ax-triplot" class="headerlink" title="2.6. ax.triplot()"></a>2.6. <code>ax.triplot()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.triplot.html">matplotlib.axes.Axes.triplot</a></p></blockquote><ul><li><p>입력받은 데이터를 삼각형으로 잘게 자릅니다.</p></li><li><p>Delaunay triangulation이라고 하는데, 유한요소해석(finite element analysis)을 배운 분들께는 매우 익숙할 단어입니다.</p></li><li><p>지금 데이터가 너무 빼곡하기 때문에 일부만 샘플링을 해서 데이터 수를 줄입니다.</p></li><li><p>x의 최대와 최소, y의 최대와 최소는 남겨서 데이터 범위는 유지합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data1_ll = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_ul = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_lr = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data1_ur = data1.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y1&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">data1_s = pd.concat([data1.loc[[data1_ll, data1_ul, data1_lr, data1_ur]], data1.sample(n=<span class="number">400</span>)], axis=<span class="number">0</span>)</span><br><span class="line">data1_s.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">data1_s.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_20.png"><br></p></li><li><p>data2에도 같은 처리를 합니다.</p></li><li><p>data2는 영역이 좁은만큼 데이터 수를 data1의 2분의 1로 줄입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data2_ll = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_ul = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_lr = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>]).index[<span class="number">0</span>]</span><br><span class="line">data2_ur = data2.sort_values([<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y2&quot;</span>], ascending=[<span class="literal">False</span>, <span class="literal">False</span>]).index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">data2_s = pd.concat([data2.loc[[data2_ll, data2_ul, data2_lr, data2_ur]], data2.sample(n=<span class="number">200</span>)], axis=<span class="number">0</span>)</span><br><span class="line">data2_s.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">data2_s.head()</span><br></pre></td></tr></table></figure><p><img src="mpl3d_21.png"><br></p></li><li><p>줄어든 데이터로 triplot을 그립니다.</p></li><li><p>pivot_table을 할 필요가 없습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1_s, data2_s]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1_s <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.triplot(data[<span class="string">&quot;X&quot;</span>], data[ydata], lw=<span class="number">0.1</span>) <span class="comment"># ax.triplot</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_22.png"><br></p></li><li><p>삼각형 mesh 구조가 생성되었습니다.</p></li><li><p>다 좋은데, 오른쪽 그림을 보면 데이터 위쪽 활처럼 휜 곳이 직선으로 메워졌습니다.</p></li><li><p>all-convex 도형은 괜찮은데 <b>안쪽으로 들어간(concave) 구조에 사용하기엔 적절치 않습니다.</b></p></li></ul><h2 id="2-7-ax-tricontour"><a href="#2-7-ax-tricontour" class="headerlink" title="2.7. ax.tricontour()"></a>2.7. <code>ax.tricontour()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tricontour.html?highlight=axes%20tricontour#matplotlib.axes.Axes.tricontour">matplotlib.axes.Axes.tricontour</a></p></blockquote><ul><li><code>ax.contour()</code>와 비슷한 기능입니다.</li><li>차이가 있다면 삼각형으로 쪼갠 뒤에 그립니다.</li><li>데이터의 정밀도를 높일 수 있는 방법입니다.</li><li>데이터 구조는 보았으니 앞에서 성기게 만든 데이터보다 원 데이터로 작업합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.tricontour(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><img src="mpl3d_23.png"><br></li></ul><h2 id="2-8-ax-tricontourf"><a href="#2-8-ax-tricontourf" class="headerlink" title="2.8. ax.tricontourf()"></a>2.8. <code>ax.tricontourf()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tricontourf.html">matplotlib.axes.Axes.tricontourf</a></p></blockquote><ul><li><p><code>ax.contourf()</code>에 대응되는 기능입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fontlabel = &#123;<span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ax, data <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [data1, data2]):</span><br><span class="line">    ydata = <span class="string">&quot;Y1&quot;</span> <span class="keyword">if</span> data <span class="keyword">is</span> data1 <span class="keyword">else</span> <span class="string">&quot;Y2&quot;</span></span><br><span class="line">    ax.tricontourf(data[<span class="string">&quot;X&quot;</span>], data[ydata], data[<span class="string">&quot;Z&quot;</span>], levels=<span class="number">15</span>, cmap=<span class="string">&quot;inferno&quot;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;X&quot;</span>, fontdict=fontlabel)</span><br><span class="line">    ax.set_ylabel(ydata, fontdict=fontlabel)</span><br></pre></td></tr></table></figure><p><img src="mpl3d_24.png"><br></p></li><li><p>Y2가 포함된 오른쪽 그림에서 자꾸 원하지 않는 concave 영역이 나타납니다.</p></li><li><p><b>mask 매개변수를 사용해서 이런 부분을 제거할 수 있을 것</b>으로 보입니다.</p></li><li><p>미래의 나에게 숙제로 맡기겠습니다.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/3D/">3D</category>
      
      
    </item>
    
    <item>
      <title>Seaborn Heatmap &amp; Colorbar Control</title>
      <link>https://jehyunlee.github.io/2021/07/01/Python-DS-78-heatmapcolorbar/</link>
      <guid>https://jehyunlee.github.io/2021/07/01/Python-DS-78-heatmapcolorbar/</guid>
      <pubDate>Thu, 01 Jul 2021 01:55:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;seaborn의 heatmap은 매우 강력한 도구입니다.&lt;/li&gt;
&lt;li&gt;한 줄의 명령으로 colormap과 annotation, colorbar가 붙은 정돈된 그림이 나옵니다.&lt;/li&gt;
&lt;li&gt;그런데 colorbar를 조금 고치고 싶</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>seaborn의 heatmap은 매우 강력한 도구입니다.</li><li>한 줄의 명령으로 colormap과 annotation, colorbar가 붙은 정돈된 그림이 나옵니다.</li><li>그런데 colorbar를 조금 고치고 싶다면, 어떻게 할까요?</li></ul><h1 id="1-Seaborn-Heatmap"><a href="#1-Seaborn-Heatmap" class="headerlink" title="1. Seaborn Heatmap"></a>1. Seaborn Heatmap</h1><h2 id="1-1-예제-데이터-만들기"><a href="#1-1-예제-데이터-만들기" class="headerlink" title="1.1. 예제 데이터 만들기"></a>1.1. 예제 데이터 만들기</h2><ul><li>Seaborn에 내장된 펭귄 데이터셋을 사용합시다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_peng = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-PCA"><a href="#1-2-PCA" class="headerlink" title="1.2. PCA"></a>1.2. PCA</h2><ul><li><p>데이터에 PCA를 적용합니다.</p></li><li><p>주성분분석후 인자별 기여도 분석을 진행합니다.</p></li><li><p>예제 데이터라도 standard scaling은 잊지 맙시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">ss = StandardScaler()</span><br><span class="line">cols_num = [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>, <span class="string">&quot;body_mass_g&quot;</span>]</span><br><span class="line">peng_std = ss.fit_transform(df_peng[cols_num].dropna())</span><br><span class="line">peng_std</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_01.png"><br></p></li><li><p>PCA를 수행합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">pca = PCA()</span><br><span class="line">peng_pca = pca.fit_transform(peng_std)</span><br></pre></td></tr></table></figure></li><li><p>인자별 주성분 기여도를 heatmap으로 표현합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ticklabels = [<span class="string">f&quot;PC<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(peng_pca.shape[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line">sns.heatmap(pca.components_, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, </span><br><span class="line">            xticklabels=cols_num, yticklabels=ticklabels)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_02.png"><br></p></li><li><p><code>sns.heatmap()</code> 한 줄로 멋진 그림을 그렸습니다.</p></li><li><p>이 그림을 기본으로 조금씩 고쳐보겠습니다.</p></li></ul><h2 id="1-3-범위-컬러바-조정"><a href="#1-3-범위-컬러바-조정" class="headerlink" title="1.3. 범위, 컬러바 조정"></a>1.3. 범위, 컬러바 조정</h2><ul><li><p>여기서 우리는 주성분에 대한 각 인자의 기여도가 중요하지 방향은 중요하지 않다고 가정합니다.</p></li><li><p>인자별 중요도가 담긴 pca.components_에 절대값을 취하고, colorbar도 거기에 맞게 한쪽 방향으로 발산하는 inferno를 사용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pca_comp_abs = <span class="built_in">abs</span>(pca.components_)</span><br><span class="line">sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">            xticklabels=cols_num, yticklabels=ticklabels)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_03.png"><br></p></li><li><p>seaborn heatmap을 그리면 함께 출력되는 메시지가 있습니다.</p></li><li><p><a href="AxesSubplot:">AxesSubplot:</a> 인데, <code>sns.heatmap()</code>명령의 출력이 Matplotlib의 AxesSubplot 객체라는 의미입니다.</p></li></ul><h2 id="1-4-annotation-불투명도-조정"><a href="#1-4-annotation-불투명도-조정" class="headerlink" title="1.4. annotation 불투명도 조정"></a>1.4. annotation 불투명도 조정</h2><ul><li><p>heatmap 위의 글자가 너무 강렬하다면 불투명도를 조정할 수 있습니다.</p></li><li><p>seaborn heatmap의 annotation은 딕셔너리 형태의 <code>annot_kws</code> 인자로 제어 가능합니다.</p></li><li><p>명령 안에 <code>annot_kws=&#123;&quot;alpha&quot;: 0.3&#125;</code>을 입력하면 불투명도가 0.3으로 내려가 색이 더 잘 들어옵니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax = sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">                 xticklabels=cols_num, yticklabels=ticklabels, annot_kws=&#123;<span class="string">&quot;alpha&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">fig = ax.figure</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fig.get_children())</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_04.png"><br></p></li><li><p>이번에는 <code>sns.heatmap()</code> 앞에 ax=를 붙여서 heatmap 객체를 ax 변수에 저장했습니다.</p></li><li><p>그리고 <code>fig = ax.figure</code> 명령으로 ax가 속한 figure를 fig 변수에 저장했습니다.</p></li><li><p><code>fig, ax = plt.subplots()</code>에 이어서 <code>sns.heatmap(어쩌구, ax=ax)</code>한 것과 같은 효과입니다.</p></li></ul><ul><li><code>fig.get_children()</code>명령으로 fig의 구성요소를 확인하면, 맨 마지막에 colorbar가 있습니다.</li><li>ax와 fig는 이제 변수에 저장되었으니 마음껏 가지고 놀 수 있습니다.</li><li>colorbar도 마찬가지로 다뤄봅니다.</li></ul><h1 id="2-Colorbar"><a href="#2-Colorbar" class="headerlink" title="2. Colorbar"></a>2. Colorbar</h1><h2 id="2-1-colorbar-객체-분리"><a href="#2-1-colorbar-객체-분리" class="headerlink" title="2.1. colorbar 객체 분리"></a>2.1. colorbar 객체 분리</h2><ul><li><p>colorbar 객체를 figure에서 떼어냅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar = fig.get_children()[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cbar))</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_11.png"><br></p></li><li><p>타입을 확인해보니 AxesSubplot입니다.</p></li><li><p>앞에서 heatmap의 타입도 AxesSubplot이었습니다.</p></li><li><p>정리하면, 데이터가 표기되는 부분이나 colorbar가 표기되는 부분이나 Matplotlib 구조적으로는 동일하다는 뜻입니다.</p></li><li><p>그렇다면 데이터를 그리는 Axes에 적용하는 명령어를 colorbar에도 사용할 수 있겠습니다.</p></li></ul><h2 id="2-2-y눈금-수정"><a href="#2-2-y눈금-수정" class="headerlink" title="2.2. y눈금 수정"></a>2.2. y눈금 수정</h2><ul><li><p>0부터 1까지 0.2 단위로 찍힌 현재의 눈금을 0, 0.5, 1 세개만 남기고자 합니다.</p></li><li><p>일반 plot에서는 <code>set_yticks()</code>로 위치를 잡고 <code>set_yticklabels()</code>로 눈금을 입혔습니다.</p></li><li><p>한번 <code>set_yticks()</code>를 실험해 봅니다.</p></li><li><p>아까 그린 그림에서 colorbar만 수정한 후 그림을 그리라<code>display(fig)</code>명령으로 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar.set_yticks([-<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>])</span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_12.png"><br></p></li><li><p>바뀌지 않습니다.</p></li><li><p>colorbar는 축을 지정한 후 <code>set_ticks()</code>를 사용하라고 합니다.</p></li><li><p>고분고분 말을 듣습니다. <code>cbar.yaxis</code>로 y축 지정 후 <code>set_ticks()</code>를 적용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbar.yaxis.set_ticks([<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>])</span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_06.png"><br></p></li><li><p>y축 눈금이 변경되었습니다.</p></li></ul><ul><li><p>y축 눈금은 다른 방식으로도 바꿀 수 있습니다.</p></li><li><p>Matplotlib의 MultipleLocator를 사용하면, 눈금 간격을 지정할 수 있습니다.</p></li><li><p>이번엔 그림을 처음부터 다시 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MultipleLocator</span><br><span class="line"></span><br><span class="line">ax = sns.heatmap(pca_comp_abs, annot=<span class="literal">True</span>, cmap=<span class="string">&quot;inferno&quot;</span>, vmin=<span class="number">0</span>, vmax=<span class="number">1</span>,</span><br><span class="line">                 xticklabels=cols_num, yticklabels=ticklabels, annot_kws=&#123;<span class="string">&quot;alpha&quot;</span>:<span class="number">0.3</span>&#125;)</span><br><span class="line">fig = ax.figure</span><br><span class="line">cbar = fig.get_children()[-<span class="number">1</span>]</span><br><span class="line">cbar.yaxis.set_major_locator(MultipleLocator(<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_07.png"><br></p></li><li><p>동일한 효과가 반영되었습니다.</p></li></ul><h2 id="2-3-colorbar-위-눈금"><a href="#2-3-colorbar-위-눈금" class="headerlink" title="2.3. colorbar 위 눈금"></a>2.3. colorbar 위 눈금</h2><ul><li><p>가끔 colorbar 옆에 달린 눈금이 colorbar까지 이어지면 좋겠다 싶기도 합니다.</p></li><li><p>colorbar의 정체는 Axes이므로, Axes의 수평선 명령 <code>axhline()</code>을 사용합니다.</p></li><li><p>-0.5, 0, 0.5 세 군데에 선을 그려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cbar.axhline(-<span class="number">0.5</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0.5</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    </span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><p><img src="78_heatmapcolorbar_08.png"><br></p></li><li><p>0.5에는 그려지지만 0과 1에는 그려지지 않았습니다.</p></li><li><p>colorbar 위 아래 한계선에 딱 걸려서 그렇습니다.</p></li></ul><ul><li>이럴 때는 테두리를 그려버리면 됩니다.</li><li>내친 김에 heatmap에도 그립니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ax.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>]].set_visible(<span class="literal">True</span>)</span><br><span class="line">cbar.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_visible(<span class="literal">True</span>)</span><br><span class="line">cbar.spines[[<span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;top&quot;</span>]].set_color(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">cbar.axhline(<span class="number">0</span>, c=<span class="string">&quot;k&quot;</span>)</span><br><span class="line"></span><br><span class="line">display(fig)</span><br></pre></td></tr></table></figure><img src="78_heatmapcolorbar_09.png"><br></li></ul><h1 id="3-정리"><a href="#3-정리" class="headerlink" title="3. 정리"></a>3. 정리</h1><ul><li>오늘의 글은 딱 한 문장으로 요약됩니다.</li><li><b>colorbar도 Axes다.</b></li><li>괜히 겁먹지 맙시다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/seaborn/">seaborn</category>
      
      <category domain="https://jehyunlee.github.io/tags/datetime/">datetime</category>
      
      
    </item>
    
    <item>
      <title>Datetime X-axis Control</title>
      <link>https://jehyunlee.github.io/2021/06/29/Python-DS-77-datetime/</link>
      <guid>https://jehyunlee.github.io/2021/06/29/Python-DS-77-datetime/</guid>
      <pubDate>Mon, 28 Jun 2021 22:57:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;시계열 데이터를 다루면 x축에 날짜와 시간이 붙습니다.&lt;/li&gt;
&lt;li&gt;x축 데이터는 datetime 객체일 수도 있고, 그냥 string일 수도 있습니다.&lt;/li&gt;
&lt;li&gt;여러 그림을 겹쳐 그릴 때 종종 문제가 됩니다. 원인과 해결책</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>시계열 데이터를 다루면 x축에 날짜와 시간이 붙습니다.</li><li>x축 데이터는 datetime 객체일 수도 있고, 그냥 string일 수도 있습니다.</li><li>여러 그림을 겹쳐 그릴 때 종종 문제가 됩니다. 원인과 해결책을 알아봅니다.<br></li></ul><h1 id="1-예제-데이터"><a href="#1-예제-데이터" class="headerlink" title="1. 예제 데이터"></a>1. 예제 데이터</h1><ul><li>라이브러리 호출<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 라이브러리 호출</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-1-데이터-생성"><a href="#1-1-데이터-생성" class="headerlink" title="1.1. 데이터 생성"></a>1.1. 데이터 생성</h2><ul><li>datetime이 포함된 데이터를 만듭니다.</li><li>2021년 1월 1일부터 5월 1일까지 날짜데이터를 만들고,</li><li>랜덤하게 y 데이터를 생성합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터프레임 생성</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;year&quot;</span>:[<span class="number">2021</span>]*<span class="number">5</span>, </span><br><span class="line">                   <span class="string">&quot;month&quot;</span>:[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)], </span><br><span class="line">                   <span class="string">&quot;day&quot;</span>:[<span class="number">1</span>] * <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># year, month, day로 datetime 생성</span></span><br><span class="line">df[<span class="string">&quot;date_dt&quot;</span>] = pd.to_datetime(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime을 string으로 변환</span></span><br><span class="line">df[<span class="string">&quot;date_str&quot;</span>] = df[<span class="string">&quot;date_dt&quot;</span>].apply(<span class="keyword">lambda</span> x: x.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># random y 데이터 생성</span></span><br><span class="line">df[<span class="string">&quot;dy&quot;</span>] = np.random.random(size=<span class="number">5</span>)</span><br><span class="line">df[<span class="string">&quot;y&quot;</span>] = df[<span class="string">&quot;dy&quot;</span>].cumsum()</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-데이터-확인"><a href="#1-2-데이터-확인" class="headerlink" title="1.2. 데이터 확인"></a>1.2. 데이터 확인</h2><ul><li><p>생성한 데이터를 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="datetime04.png"><br></p></li><li><p>의도한 대로 데이터가 생성되었습니다.</p></li><li><p>생성한 데이터의 타입을 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><p><img src="datetime05.png"><br></p></li><li><p>date_dt와 date_str 컬럼은 같은 언뜻 보기에는 같은 데이터입니다.</p></li><li><p>하지만 데이터 타입이 datetime과 object(string)으로 다릅니다.</p></li><li><p>Matplotlib이 이 데이터들을 어떻게 다루는지 봅시다.</p></li></ul><h1 id="2-데이터-시각화"><a href="#2-데이터-시각화" class="headerlink" title="2. 데이터 시각화"></a>2. 데이터 시각화</h1><h2 id="2-1-세-가지-방식"><a href="#2-1-세-가지-방식" class="headerlink" title="2.1. 세 가지 방식"></a>2.1. 세 가지 방식</h2><ul><li>시간에 따른 y의 변화를 그리는데는 크게 3가지 방법이 있습니다.</li></ul><p><b>1. <code>plot(y)</code></b> : y만 plot<br><b>2. <code>plot(datetime, y)</code></b> : datetime 형식 x, y plot<br><b>3. <code>plot(str, y)</code></b> : string 형식 x, y plot</p><ul><li><p>세 가지 방식을 위에서부터 나란히 적용합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime01.png"><br></p></li><li><p>맨 위부터 차례로 세 가지 방식으로 그림을 그려 나열했습니다.</p></li><li><p>xticklabels라고 부르는 <b>x축 눈금이 다릅니다.</b></p></li></ul><p><b>1. <code>plot(y)</code></b> : <b>index를 x축으로</b> 사용합니다.<br><b>2. <code>plot(datetime, y)</code></b> : <b>데이터 사이 공간</b>에도 날짜가 찍힙니다.<br><b>3. <code>plot(str, y)</code></b> : <b>데이터가 존재하는 지점</b>에만 날짜가 찍힙니다.</p><h2 id="2-2-xticks와-xticklabels의-정체"><a href="#2-2-xticks와-xticklabels의-정체" class="headerlink" title="2.2. xticks와 xticklabels의 정체"></a>2.2. xticks와 xticklabels의 정체</h2><ul><li>x축 눈금은 두 가지로 이루어집니다.</li><li><b>눈금이 매겨지는 위치(xticks)</b>와 <b>눈금 레이블(xticklabels)</b>입니다.</li><li>세 그림에서 xticks와 xticklabels를 확인합니다.</li></ul><ul><li><b>xticks: <code>ax.get_xticks</code></b>로 확인합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    <span class="built_in">print</span>(ax.get_xticks())</span><br></pre></td></tr></table></figure><img src="datetime07.png"><br></li></ul><p><b>1. <code>plot(y)</code></b> : 그림의 눈금 좌우로 두 개 (-0.5, 4.5)가 더 있습니다.<br><b>2. <code>plot(datetime, y)</code></b> : 데이터에 없는 숫자가 나열되어 있습니다.<br><b>3. <code>plot(str, y)</code></b> : 0부터 4까지의 정수가 기록되어 있습니다.</p><ul><li>xticks의 정체가 뭘까요? 확실하게 알지 않으면 고생할 듯 합니다.</li></ul><ul><li><p><b>xticklabels: <code>ax.get_xticklabels</code></b>로 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    pprint(ax.get_xticklabels())</span><br></pre></td></tr></table></figure><p><img src="datetime08.png"><br></p></li><li><p>Text 객체가 나열되어 있습니다.</p><ul><li>Text 객체는 세 개의 데이터가 나열되어 있습니다.</li><li>첫번째는 xticks와 동일합니다.</li><li>두번째는 모두 0입니다.</li><li>세번째는 그림의 눈금에 찍힌 숫자입니다.</li></ul></li></ul><ul><li>Text 객체의 구성은 <b>(x좌표, y좌표, text내용)</b>입니다.<ul><li>따라서 <b>xticks의 정체는 눈금의 x좌표</b>입니다.</li><li>세 그림에서 xticks가 다른데서 볼 수 있듯 plot 방식에 따라 x좌표가 다루어지는 방식이 달라집니다.</li></ul></li></ul><h2 id="2-3-index가-하나-빠지면"><a href="#2-3-index가-하나-빠지면" class="headerlink" title="2.3. index가 하나 빠지면?"></a>2.3. index가 하나 빠지면?</h2><ul><li><p>결측치 제거 등으로 index에 구멍이 뚫리는 일이 자주 있습니다.</p></li><li><p>index가 빠졌을 때 각기 어떤 일이 벌어지는지 살펴봅시다.</p></li><li><p>데이터에 구멍을 뚫습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_drop = df.drop(<span class="number">3</span>)</span><br><span class="line">df_drop</span><br></pre></td></tr></table></figure><p><img src="datetime09.png"><br></p></li><li><p>index 3을 지웠기 때문에 <b>0, 1, 2, 4만 남았습니다.</b></p></li><li><p>똑같은 코드로 그림을 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                        <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df_drop[<span class="string">&quot;date_dt&quot;</span>], df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df_drop[<span class="string">&quot;date_str&quot;</span>], df_drop[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime06.png"><br></p></li><li><p>세 결과가 완전히 다릅니다. :)<br><b>1. <code>plot(y)</code></b> : 남아있는 index가 x축에 놓입니다.<br><b>2. <code>plot(datetime, y)</code></b> : 남은 index에 대응되는 datetime이 놓입니다.<br>※ 비어 있는 <b>2020-04-01를 건너 뛰고</b> 그립니다.<br><b>3. <code>plot(str, y)</code></b> : 0부터 4까지의 정수가 기록되어 있습니다.<br>※ <b>데이터를 건너뛰는 대신 균일하게 나열하기 때문에 4월이 빠진 것을 알기 어렵습니다.</b></p></li></ul><h2 id="2-4-다른-데이터와-중첩"><a href="#2-4-다른-데이터와-중첩" class="headerlink" title="2.4. 다른 데이터와 중첩"></a>2.4. 다른 데이터와 중첩</h2><ul><li><p>(0,0)-(1,1)을 잇는 짧은 직선을 겹쳐 그립니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>)   <span class="comment"># x data : string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], <span class="string">&quot;rs:&quot;</span>)            <span class="comment"># (0,0)~(1,1) 사이 직선</span></span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text,                  <span class="comment"># text</span></span><br><span class="line">            fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime02.png"><br></p></li><li><p>가운데 결과가 완전히 다릅니다. :)<br><b>1. <code>plot(y)</code></b> : 자연스럽습니다. x축 눈금과 데이터가 일치합니다.<br><b>2. <code>plot(datetime, y)</code></b> : 완전히 다른 곳에 놓입니다.<br>※ <b>(0,0)이 1970년에 놓여 있습니다.</b> 자주 하는 실수입니다. 조심해야 합니다.<br><b>3. <code>plot(str, y)</code></b> : 맨 위와 동일하게 자연스럽습니다.<br>※ 다만, 빠진 데이터가 반영되지 않으니 사용하기 좋지 않습니다.</p></li></ul><h2 id="2-5-x축-범위-설정"><a href="#2-5-x축-범위-설정" class="headerlink" title="2.5. x축 범위 설정"></a>2.5. x축 범위 설정</h2><ul><li><p>데이터 중첩 문제는 x축 범위 설정에서 똑같이 등장합니다.</p></li><li><p>다른 방식의 범위를 비슷하게 맞춰봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].plot(df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)                   <span class="comment"># y data만 plot</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(<span class="number">0.8</span>, <span class="number">2.2</span>)                            <span class="comment"># x 범위: index 기준</span></span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].plot(df[<span class="string">&quot;date_dt&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)    <span class="comment"># x data : datetime</span></span><br><span class="line">axs[<span class="number">1</span>].set_xlim(datetime.date(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">26</span>),            <span class="comment"># x 범위: datetime 기준</span></span><br><span class="line">                datetime.date(<span class="number">2021</span>,<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">axs[<span class="number">2</span>].plot(df[<span class="string">&quot;date_str&quot;</span>], df[<span class="string">&quot;y&quot;</span>], <span class="string">&quot;mo-&quot;</span>, ms=<span class="number">15</span>)   <span class="comment"># x data : string</span></span><br><span class="line">axs[<span class="number">2</span>].set_xlim(<span class="number">0.8</span>, <span class="number">2.2</span>)                            <span class="comment"># x 범위: index 기준</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, text <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;plot(y)&quot;</span>, <span class="string">&quot;plot(datetime, y)&quot;</span>, <span class="string">&quot;plot(str, y)&quot;</span>]):</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    ax.text(<span class="number">0.03</span>, <span class="number">0.7</span>, text, </span><br><span class="line">            fontsize=<span class="string">&quot;x-large&quot;</span>, color=<span class="string">&quot;b&quot;</span>, transform=ax.transAxes)</span><br></pre></td></tr></table></figure><p><img src="datetime03.png"><br></p></li><li><p>xticks의 종류에 따라 처방이 다릅니다.</p></li><li><p>index 형식은 index에 맞는 범위를 넣어주고, datetime 형식은 datetime 모듈을 사용해 범위를 지정합니다.<br><b>1. <code>plot(y)</code></b> : 표현 범위의 index에 적절한 여백을 넣습니다.<br><b>2. <code>plot(datetime, y)</code></b> : datetime 모듈을 사용해서 <b>범위에 날짜를 넣습니다.</b><br><b>3. <code>plot(str, y)</code></b> : 1.과 동일합니다.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/pandas/">pandas</category>
      
      <category domain="https://jehyunlee.github.io/tags/datetime/">datetime</category>
      
      
    </item>
    
    <item>
      <title>PyTorch GPU setting</title>
      <link>https://jehyunlee.github.io/2021/06/06/Python-DL-6-pytorchGPU/</link>
      <guid>https://jehyunlee.github.io/2021/06/06/Python-DL-6-pytorchGPU/</guid>
      <pubDate>Sun, 06 Jun 2021 03:01:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;PyTorch GPU 버전을 설치한다고 GPU를 사용하지 않습니다.&lt;/li&gt;
&lt;li&gt;GPU가 여럿이라면 어떤 GPU가 사용 가능한지 확인하고,&lt;/li&gt;
&lt;li&gt;변수와 모델에 GPU 사용 설정을 해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>PyTorch GPU 버전을 설치한다고 GPU를 사용하지 않습니다.</li><li>GPU가 여럿이라면 어떤 GPU가 사용 가능한지 확인하고,</li><li>변수와 모델에 GPU 사용 설정을 해야 합니다.</li></ul><h1 id="1-PyTorch-버전-확인"><a href="#1-PyTorch-버전-확인" class="headerlink" title="1. PyTorch 버전 확인"></a>1. PyTorch 버전 확인</h1><ul><li>현재 버전을 확인합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch, torchvision</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torchvision.__version__)</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.7.1+cu101</span><br><span class="line">0.8.2+cu101</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-GPU-현황-확인"><a href="#2-GPU-현황-확인" class="headerlink" title="2. GPU 현황 확인"></a>2. GPU 현황 확인</h1><ul><li>GPU가 사용 가능한지 확인합니다.</li><li>사용 가능하다면, 메모리 점유 현황을 출력합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(torch.cuda.device_count()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;# DEVICE <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- Memory Usage:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Allocated: <span class="subst">&#123;<span class="built_in">round</span>(torch.cuda.memory_allocated(i)/<span class="number">1024</span>**<span class="number">3</span>,<span class="number">1</span>)&#125;</span> GB&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Cached:    <span class="subst">&#123;<span class="built_in">round</span>(torch.cuda.memory_cached(i)/<span class="number">1024</span>**<span class="number">3</span>,<span class="number">1</span>)&#125;</span> GB\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;# GPU is not available&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DEVICE 0: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># DEVICE 1: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># DEVICE 2: Tesla V100-PCIE-32GB</span></span><br><span class="line">- Memory Usage:</span><br><span class="line">  Allocated: 0.0 GB</span><br><span class="line">  Cached:    0.0 GB</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="3-GPU-할당-변경"><a href="#3-GPU-할당-변경" class="headerlink" title="3. GPU 할당 변경"></a>3. GPU 할당 변경</h1><ul><li>작업할 GPU를 선정합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GPU 할당 변경하기</span></span><br><span class="line">GPU_NUM = <span class="number">2</span> <span class="comment"># 원하는 GPU 번호 입력</span></span><br><span class="line">device = torch.device(<span class="string">f&#x27;cuda:<span class="subst">&#123;GPU_NUM&#125;</span>&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">torch.cuda.set_device(device) <span class="comment"># change allocation of current GPU</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# Current cuda device: &#x27;</span>, torch.cuda.current_device()) <span class="comment"># check</span></span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Current cuda device:  2</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="4-GPU-사용을-기본값으로-설정"><a href="#4-GPU-사용을-기본값으로-설정" class="headerlink" title="4. GPU 사용을 기본값으로 설정"></a>4. GPU 사용을 기본값으로 설정</h1><ul><li>변수를 만들때 자동으로 GPU를 사용하게 설정합니다.</li><li>앞서 <code>GPU_NUM</code>으로 지정한 GPU에 할당됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    torch.set_default_tensor_type(torch.cuda.FloatTensor)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;using cuda: <span class="subst">&#123;GPU_NUM&#125;</span>, <span class="subst">&#123;torch.cuda.get_device_name(GPU_NUM)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using cuda: 2, Tesla V100-PCIE-32GB</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>변수를 만들어 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.FloatTensor([<span class="number">1.0</span>])</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>GPU 사용을 기본값으로 명시했는데 안올라갑니다.</p></li><li><p>강제로 올려봅니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = x.cuda()</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>그냥 <b><code>torch.Tensor()</code></b>를 해야 GPU에 올라갑니다.</li><li>자료형도 내가 원하는 <code>torch.cuda.FloatTensor</code>입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor([<span class="number">1.0</span>])</span><br><span class="line">x.<span class="built_in">type</span>()</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Deep-Learning/">Deep Learning</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/pytorch/">pytorch</category>
      
      <category domain="https://jehyunlee.github.io/tags/GPU/">GPU</category>
      
      
    </item>
    
    <item>
      <title>Legend Control</title>
      <link>https://jehyunlee.github.io/2021/06/06/Python-DS-76-mpllegend/</link>
      <guid>https://jehyunlee.github.io/2021/06/06/Python-DS-76-mpllegend/</guid>
      <pubDate>Sat, 05 Jun 2021 20:54:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;Legend(범례)는 데이터의 의미 파악을 도와주는 도구입니다.&lt;/li&gt;
&lt;li&gt;그러나 그림이 여럿 있을 때 각각 붙은 Legend는 방해가 되기도 합니다.&lt;/li&gt;
&lt;li&gt;Legend를 한데 모아 그리는 방법을 알아봅니다.&lt;br&gt;&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>Legend(범례)는 데이터의 의미 파악을 도와주는 도구입니다.</li><li>그러나 그림이 여럿 있을 때 각각 붙은 Legend는 방해가 되기도 합니다.</li><li>Legend를 한데 모아 그리는 방법을 알아봅니다.<br></li></ul><h1 id="1-Sample-Data"><a href="#1-Sample-Data" class="headerlink" title="1. Sample Data"></a>1. Sample Data</h1><ul><li>먼저 필요한 라이브러리들을 불러오고,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">&quot;whitegrid&quot;</span>)</span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>우리의 펭귄을 소환합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_p = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">df_p.head()</span><br></pre></td></tr></table></figure><img src="76_mpllegend_12.png"><br></li></ul><h1 id="2-기본-그림"><a href="#2-기본-그림" class="headerlink" title="2. 기본 그림"></a>2. 기본 그림</h1><ul><li><p>legend를 붙일 그림을 먼저 그립니다.</p></li><li><p>seaborn의 <code>regplot</code>을 사용해서 부리 길이, 폭, 날개 길이를 그립니다.</p></li><li><p>scatter_kws와 line_kws로 시각화 요소들의 색상, 크기 등을 설정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">0</span>], label=<span class="string">&quot;Bill Length&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C1&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">1</span>], label=<span class="string">&quot;Bill Depth&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C2&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=<span class="string">&quot;flipper_length_mm&quot;</span>, data=df_p, </span><br><span class="line">            ax=axs[<span class="number">2</span>], label=<span class="string">&quot;Flipper Length&quot;</span>, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:<span class="string">&quot;C3&quot;</span>&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axs:</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_01.png"><br></p></li><li><p><code>sns.regplot()</code>함수가 데이터 수만큼 반복되고 있습니다.</p></li><li><p>데이터 수가 10개라면 코드가 그만큼 더 길어질 것입니다.</p></li><li><p>for loop과 zip을 사용해서 효율적으로 바꿉니다. 조금 짧아지고 유지보수가 편해집니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_01_for.png"><br></p></li><li><p><code>ax.set_ylabel(&quot;&quot;)</code>로 ylabel을 지웠습니다.</p></li><li><p>y 인자 이름을 축 레이블 대신 legend 형태로 표현하기 위해서입니다.</p></li></ul><h1 id="3-Legend-하나씩"><a href="#3-Legend-하나씩" class="headerlink" title="3. Legend 하나씩"></a>3. Legend 하나씩</h1><h2 id="3-1-Axes별-Legend"><a href="#3-1-Axes별-Legend" class="headerlink" title="3.1. Axes별 Legend"></a>3.1. Axes별 Legend</h2><ul><li>가장 기본적인 형태입니다.</li><li>Axes 하나마다 <code>ax.legend()</code>를 실행합니다.</li><li>markerscale은 데이터를 의미하는 마커를 3배 크게 그리라는 의미입니다.</li><li>잘 보이게 하고 데이터와 혼동되지 않게 하려는 의도입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ax.legend(markerscale=<span class="number">3</span>) <span class="comment"># Axes별 Legend</span></span><br></pre></td></tr></table></figure><img src="76_mpllegend_02.png"><br></li></ul><h2 id="3-2-Axes-공간-전체-사용"><a href="#3-2-Axes-공간-전체-사용" class="headerlink" title="3.2. Axes 공간 전체 사용"></a>3.2. Axes 공간 전체 사용</h2><ul><li>Axes마다 붙긴 했는데 깔끔하지 않습니다. 좀 지저분합니다.</li><li>Axes마다 Legend가 귀퉁이에 쭈그리고 있어서 그런가 싶습니다.</li><li><code>mode=&quot;extend&quot;</code>로 전체 공간을 다 사용하도록 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    ax.legend(mode=<span class="string">&quot;expand&quot;</span>, markerscale=<span class="number">3</span>) <span class="comment"># Axes별 Legend, 넓게</span></span><br></pre></td></tr></table></figure><img src="76_mpllegend_03.png"><br></li></ul><h2 id="3-3-Axes-위에-Legend"><a href="#3-3-Axes-위에-Legend" class="headerlink" title="3.3. Axes 위에 Legend"></a>3.3. Axes 위에 Legend</h2><ul><li>scatter plot은 점 하나하나가 데이터입니다.</li><li>시각화 요소들에 의해 가려지면 그만큼 데이터 전달력이 손실됩니다.</li><li>Axes 위로 Legend를 올려서 데이터를 잘 보이게 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Axes별 Legend, 위치 지정</span></span><br><span class="line">    ax.legend(loc=<span class="string">&quot;lower center&quot;</span>, bbox_to_anchor=[<span class="number">0.5</span>, <span class="number">1.03</span>], markerscale=<span class="number">3</span>) </span><br></pre></td></tr></table></figure><img src="76_mpllegend_04.png"><br></li></ul><ul><li>그런데 여기서 전체 범위를 사용하겠다고 <code>mode=&quot;extend&quot;</code>를 사용하면 오류가 납니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(loc=<span class="string">&quot;lower center&quot;</span>, bbox_to_anchor=[<span class="number">0</span>, <span class="number">1.03</span>], mode=<span class="string">&quot;expand&quot;</span>, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_05.png"><br></li></ul><ul><li>매개변수에서 bbox_to_anchor를 제거하고 사용하면 잘 됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(loc=[<span class="number">0</span>, <span class="number">1.03</span>], mode=<span class="string">&quot;expand&quot;</span>, borderaxespad=<span class="number">0</span>, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_06.png"><br></li></ul><h1 id="4-Legend-모아-붙이기"><a href="#4-Legend-모아-붙이기" class="headerlink" title="4. Legend 모아 붙이기"></a>4. Legend 모아 붙이기</h1><ul><li>Axes별로 Legend를 출력하지 않고 한데 모으면 더 깔끔합니다.</li><li>이를 가능하게 하려면 handle과 label이라는 개념을 파악할 필요가 있습니다.</li><li>legend는 의미가 담긴 label과 label이 지칭하는 대상이 있습니다. 이 대상이 handle입니다.</li></ul><ul><li><code>ax.get_legend_handles_labels</code> 명령으로 확인하고 가져올 수 있습니다.</li><li>위 그림의 첫번째 Axes에 담긴 handle과 label은 이렇습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handle, label = axs[<span class="number">0</span>].get_legend_handles_labels()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;handle= <span class="subst">&#123;handle&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;label = <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>실행 결과: 시각화를 하나밖에 안했으므로 handle과 label이 하나씩입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">handle= [&lt;matplotlib.collections.PathCollection <span class="built_in">object</span> at <span class="number">0x7f95fa482e90</span>&gt;]</span><br><span class="line">label = [<span class="string">&#x27;Bill Length&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-1-Axes에-붙이기"><a href="#4-1-Axes에-붙이기" class="headerlink" title="4.1. Axes에 붙이기"></a>4.1. Axes에 붙이기</h2><ul><li>빈 list를 만들고, 그림을 그릴 때마다 handle과 label을 가져와 모읍니다.</li><li>그림을 모두 다 그린 후, 맨 마지막 Axes 오른쪽에 붙입니다.</li><li>추가 공간이 필요하니 그림 가로 폭을 10에서 14로 넓혀줍니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 맨 오른쪽 Axes에 붙이기</span></span><br><span class="line">axs[-<span class="number">1</span>].legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">               loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">1.1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_07.png"><br></li></ul><h2 id="4-2-Figure에-붙이기"><a href="#4-2-Figure에-붙이기" class="headerlink" title="4.2. Figure에 붙이기"></a>4.2. Figure에 붙이기</h2><ul><li>특정 Axes에 속하지 않도록 전체 그림이 담긴 Figure에 붙일 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure에 붙이기</span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><img src="76_mpllegend_08.png"><br></li></ul><h2 id="4-2-Figure의-Axes-옆자리에-붙이기"><a href="#4-2-Figure의-Axes-옆자리에-붙이기" class="headerlink" title="4.2. Figure의 Axes 옆자리에 붙이기"></a>4.2. Figure의 Axes 옆자리에 붙이기</h2><ul><li>Axes를 그대로 놔두고 붙였더니 맨 우측 Axes에 겹쳐 그려졌습니다.</li><li>Axes 옆에 놓기 위해 legend의 위치를 섬세하게 지정합니다.</li></ul><ul><li>loc와 bbox_to_anchor 매개변수는 이런 역할을 합니다.</li><li>loc만 단독으로 사용하면 붙이는 대상에 따라 Figure나 Axes의 지정된 위치에 놓입니다</li><li>loc와 bbox_to_anchor를 함께 사용하면 loc는 legend의 지점이 되고 bbox_to_anchor는 legend가 놓일 위치가 됩니다.</li><li>bbox_to_ancher에 매개변수가 둘 들어가면 위치만, 넷 들어가면 위치와 가로세로 크기입니다.<br><br><img src="76_mpllegend_14.png"><br></li></ul><ul><li><p>맨 우측 Axes 오른쪽 상단에 붙도록 값을 지정합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), </span><br><span class="line">                        sharex=<span class="literal">True</span>, constrained_layout=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># figure 옆에 legend 붙이기: 화면엔 정상, 파일은 실패    </span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="76_mpllegend_13.png"><br></p></li><li><p>화면에는 정상으로 나오지만 파일을 저장하면 그렇지 않습니다.<br><br><img src="76_mpllegend_09.png"><br></p></li><li><p>legend가 전혀 보이지 않습니다.</p></li><li><p>bbox_to_anchor에서 지정한 x 위치가 Figure의 우측 한계선(1)을 넘었기 때문입니다.</p></li></ul><ul><li>파일 출력을 하려면 legend 전체가 Figure 범위 안에 들어와야 합니다.</li><li>그러려면 Axes를 좌측으로 압축시킬 필요가 있습니다.</li><li><code>fig.tight_layout()</code>에 rect 매개변수를 넣으면 됩니다. </li><li>충돌 방지를 위해 비슷한 기능을 하는 constrained_layout은 figure 생성 명령에서 삭제합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), sharex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 옆에 legend 붙이기. x 좌표 = 0.8</span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">0.8</span>, <span class="number">0.95</span>])</span><br><span class="line"><span class="comment"># Axes들 0.8 안쪽으로 압축</span></span><br><span class="line">fig.tight_layout(rect=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_10.png"><br></li></ul><h2 id="4-3-Figure의-Axes-위에-붙이기"><a href="#4-3-Figure의-Axes-위에-붙이기" class="headerlink" title="4.3. Figure의 Axes 위에 붙이기"></a>4.3. Figure의 Axes 위에 붙이기</h2><ul><li>같은 요령으로 legend를 Axes 위에 모아서 붙일 수 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">14</span>, <span class="number">4</span>), sharex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">handles = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> ax, c, y <span class="keyword">in</span> <span class="built_in">zip</span>(axs, [<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>], [<span class="string">&quot;bill_length_mm&quot;</span>, <span class="string">&quot;bill_depth_mm&quot;</span>, <span class="string">&quot;flipper_length_mm&quot;</span>]):</span><br><span class="line">    label = <span class="string">&quot; &quot;</span>.join([w[<span class="number">0</span>].upper()+w[<span class="number">1</span>:] <span class="keyword">for</span> w <span class="keyword">in</span> y.split(<span class="string">&quot;_&quot;</span>)[:-<span class="number">1</span>]])</span><br><span class="line">    sns.regplot(x=<span class="string">&quot;body_mass_g&quot;</span>, y=y, data=df_p, </span><br><span class="line">                ax=ax, label=label, scatter_kws=&#123;<span class="string">&quot;s&quot;</span>:<span class="number">10</span>, <span class="string">&quot;color&quot;</span>:c&#125;, line_kws=&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;k&quot;</span>&#125;)</span><br><span class="line">    ax.set_xlabel(<span class="string">&quot;Body Mass&quot;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># handles, labels 모으기</span></span><br><span class="line">    handle, label = ax.get_legend_handles_labels()</span><br><span class="line">    handles.append(*handle)</span><br><span class="line">    labels.append(*label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 위에 legend 붙이기. y 좌표 = 0.9    </span></span><br><span class="line">fig.legend(handles=handles, labels=labels, markerscale=<span class="number">3</span>, ncol=<span class="number">3</span>,</span><br><span class="line">          loc=<span class="string">&quot;upper left&quot;</span>, bbox_to_anchor=[<span class="number">0.045</span>, <span class="number">0.9</span>, <span class="number">1</span>, <span class="number">0.1</span>])</span><br><span class="line"><span class="comment"># Axes들 y = 0.9 안쪽으로 압축</span></span><br><span class="line">fig.tight_layout(rect=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.9</span>])</span><br></pre></td></tr></table></figure><img src="76_mpllegend_11.png"><br></li></ul><h1 id="5-정리"><a href="#5-정리" class="headerlink" title="5. 정리"></a>5. 정리</h1><ul><li>legend는 여러 데이터를 명확히 구분해주는, 반드시 필요한 요소입니다.</li><li>그러나 Axes가 많아지고 데이터 인자가 많아질수록 혼돈의 원인이 되기도 합니다.</li><li>적절한 위치에 적절한 형식으로 배치해서 인지능력 향상에 도움이 되면 좋겠습니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/seaborn/">seaborn</category>
      
      <category domain="https://jehyunlee.github.io/tags/legend/">legend</category>
      
      
    </item>
    
    <item>
      <title>Lecture Survey Summary (Google Forms)</title>
      <link>https://jehyunlee.github.io/2021/05/30/Python-DS-75-googlesurvey/</link>
      <guid>https://jehyunlee.github.io/2021/05/30/Python-DS-75-googlesurvey/</guid>
      <pubDate>Sat, 29 May 2021 22:23:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;2주 전 학회에서 머신러닝 기초 강의를 했습니다.&lt;/li&gt;
&lt;li&gt;Google Forms를 통해서 참석자들에게 피드백을 받았습니다.&lt;/li&gt;
&lt;li&gt;답변 정리에 Matplotlib 함수를 적극적으로 사용했습니다.&lt;br&gt;&lt;br&gt;&lt;img </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>2주 전 학회에서 머신러닝 기초 강의를 했습니다.</li><li>Google Forms를 통해서 참석자들에게 피드백을 받았습니다.</li><li>답변 정리에 Matplotlib 함수를 적극적으로 사용했습니다.<br><br><img src="75_survey09.png"><br></li></ul><h1 id="1-Google-Forms"><a href="#1-Google-Forms" class="headerlink" title="1. Google Forms"></a>1. Google Forms</h1><ul><li><p><a href="https://docs.google.com/forms/u/0/">Google Forms</a>는 간단하게 설문조사를 할 수 있는 플랫폼입니다.</p></li><li><p><b>회의나 회식 일정</b>을 잡는데 사용하기도 편하고 <b>피드백</b>을 받기 좋습니다.<br><br><img src="75_survey04.png"><br></p></li><li><p>결과를 자체적으로 취합해서 보여주기 때문에 사실상 추가 처리가 필요치 않습니다.</p></li><li><p>스크린샷만 찍어서 보고서에 붙여넣어도 무방한 퀄리티입니다.<br><br><img src="75_survey01.png"><br></p></li><li><p>그런데 가끔 문제가 발생합니다.</p></li><li><p>강의평가 중 <b>강의 속도</b>와 <b>강의 난이도</b>는 5점 만점 중 3점에 몰려있습니다.</p></li><li><p>강의 속도와 난이도 조절을 실패한 것 처럼 보입니다.<br><br><img src="75_survey02.png"><br></p></li><li><p>그러나 실제 문항을 보면 <b>너무 느림</b>과 <b>너무 빠름</b>의 딱 중간입니다.</p></li><li><p><b>속도와 난이도가 적절했음</b>을 알 수 있습니다.</p></li><li><p>그림을 기계적으로 갖다붙이면 강의를 진행한 입장에서 몹시 억울할 것입니다.<br><br><img src="75_survey03.png"><br></p></li><li><p>Google Forms에서는 원본 데이터 다운로드를 제공합니다.</p></li><li><p>그림을 다운받아 새로 그리면 됩니다.</p></li><li><p>파이썬에서 진행합니다.</p></li></ul><h1 id="2-Python-Visualization"><a href="#2-Python-Visualization" class="headerlink" title="2. Python Visualization"></a>2. Python Visualization</h1><h2 id="2-1-데이터-다운로드"><a href="#2-1-데이터-다운로드" class="headerlink" title="2.1. 데이터 다운로드"></a>2.1. 데이터 다운로드</h2><ul><li><p>설문조사 결과지의 오른쪽 위를 클릭해 데이터를 받습니다.<br><br><img src="75_survey05.png"><br></p></li><li><p>설문조사명이 파일명이 됩니다.</p></li><li><p>적절히 짧게 바꿔 노트북에서 읽어옵니다.</p></li><li><p>데이터 중 한글이 있으므로 한글 사용 설정도 함께 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 필요 라이브러리 읽어오기</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sns.set_context(<span class="string">&quot;talk&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 한글 사용 설정</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;NanumGothic&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 파일 읽기</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;googlesurvey.csv&quot;</span>)</span><br><span class="line">df.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="75_survey06.png"><br></p></li></ul><h2 id="2-2-문항-추출"><a href="#2-2-문항-추출" class="headerlink" title="2.2. 문항 추출"></a>2.2. 문항 추출</h2><ul><li>컬럼명이 문항입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Qs = df.columns</span><br><span class="line">Qs</span><br></pre></td></tr></table></figure><ul><li>실행 결과<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Index([<span class="string">&#x27;Timestamp&#x27;</span>, <span class="string">&#x27;1-1. 강의 전까지 본인의 파이썬 경험&#x27;</span><span class="string">&#x27;, &#x27;</span>1-2. 강의 전까지 본인의 머신러닝 경험<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>1-3. 강의 전까지 본인 연구에 머신러닝 활용 계획<span class="string">&#x27;, &#x27;</span>1-4. 본인의 연차<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>2-1. 강의 커리큘럼 - 슬라이드 &amp; 예제 코드<span class="string">&#x27;, &#x27;</span>2-2. 강의 속도<span class="string">&#x27;, &#x27;</span>2-3. 강의 난이도<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>2-4. 강의 전달력<span class="string">&#x27;, &#x27;</span>2-5. 동료에게 추천 의사<span class="string">&#x27;, &#x27;</span>3-1. 강의 후 파이썬 학습 의사<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>3-2. 강의 후 머신러닝 학습 의사<span class="string">&#x27;, &#x27;</span>3-3. 강의 후 본인 연구에 머신러닝 활용 의사<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;</span>4. 건의사항 등 강사에게 하고싶은 말 (optional)<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">      dtype=&#x27;</span>object<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-3-시각화-함수-작성"><a href="#2-3-시각화-함수-작성" class="headerlink" title="2.3. 시각화 함수 작성"></a>2.3. 시각화 함수 작성</h2><ul><li>모든 문항은 <b>본인의 연차</b>항목을 제외하고 5점 척도로 되어 있습니다.</li><li>형식은 <b>histogram</b>, 또는 <b>bar plot</b>이 적절합니다.</li><li>데이터의 전반적인 분포가 중요하고, 데이터간 변화량은 중요치 않기 때문입니다.</li></ul><ul><li><p>시각화 함수는 다음과 같이 작성되었습니다.</p></li><li><p>부분별 설명은 주석으로 달았습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_count</span>(<span class="params">x, data, color=<span class="string">&quot;C0&quot;</span>, cmap=<span class="literal">None</span>, ticks=<span class="built_in">range</span>(<span class="params"><span class="number">1</span>, <span class="number">6</span></span>), ticklabels=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               orient=<span class="string">&quot;v&quot;</span>, ax=<span class="literal">None</span>, ec=<span class="string">&quot;none&quot;</span>, figsize=(<span class="params"><span class="number">10</span>, <span class="number">5</span></span>), filename=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 지정된 Axes가 없으면 새로 만들기. 크기는 figuresize에서 입력받음.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize, constrained_layout=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># value별로 갯수 세기. 데이터가 존재하지 않으면 0을 채움.</span></span><br><span class="line">    val_cnt = data[x].value_counts().to_dict()</span><br><span class="line">    cnt_list = [val_cnt[k] <span class="keyword">if</span> k <span class="keyword">in</span> val_cnt.keys() <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> ticks]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># bar의 방향. v(ertical) 또는 h(orizontal).    </span></span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        ax.bar(x=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>), height=cnt_list, fc=color, ec=ec)</span><br><span class="line">    <span class="keyword">elif</span> orient == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        ax.barh(y=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>), width=cnt_list, fc=color, ec=ec)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 변수 이름은 xlabel이지만 실제로는 title. 시각화 코드 수정이 남긴 흔적.</span></span><br><span class="line">    <span class="comment"># Google Forms에서 받은 데이터에 홑따옴표(&#x27;)가 있어 제거 필요.</span></span><br><span class="line">    <span class="comment"># font 색상, 크기, 두께를 fontdict로 설정</span></span><br><span class="line">    xlabel = x.replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title 지정            </span></span><br><span class="line">    ax.set_title(xlabel, fontdict=font_label, pad=<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># bar 방향에 따라 ticklabels를 xticks 또는 yticks로 설정</span></span><br><span class="line">    <span class="comment"># ticklabels 입력과 무관하게 데이터값이 보이는 위치에 정수만 출력하고 grid 설정</span></span><br><span class="line">    <span class="comment"># ticklabels를 입력받으면 입력받은 값 출력</span></span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        yticks = [<span class="built_in">int</span>(y) <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() <span class="keyword">if</span> <span class="keyword">not</span> (y*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">        ax.set_yticks(yticks)</span><br><span class="line">        ax.set_yticklabels(yticks)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;y&quot;</span>)       </span><br><span class="line">        ax.set_ylabel(<span class="string">&quot;count&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ax.set_xticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">            ax.set_xticklabels(ticklabels, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">            ax.set_xlabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> orient == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        xticks = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ax.get_xticks() <span class="keyword">if</span> <span class="keyword">not</span> (x*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">        ax.set_xticks(xticks)</span><br><span class="line">        ax.set_xticklabels(xticks)</span><br><span class="line">        ax.grid(axis=<span class="string">&quot;x&quot;</span>)       </span><br><span class="line">        ax.set_xlabel(<span class="string">&quot;count&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ax.set_yticks(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">            ax.set_yticklabels(ticklabels, fontweight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">            ax.set_ylabel(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 입력받은 컬러맵 사용</span></span><br><span class="line">    <span class="comment"># 데이터의 범위보다 2개 더 많은 컬러맵 색상을 지정하고 첫 색상과 끝 색상은 사용하지 않음</span></span><br><span class="line">    <span class="keyword">if</span> cmap:</span><br><span class="line">        ncmaps = <span class="number">7</span></span><br><span class="line">        <span class="keyword">if</span> ticklabels:</span><br><span class="line">            ncmaps = <span class="built_in">len</span>(ticklabels) + <span class="number">2</span></span><br><span class="line">        <span class="comment"># 컬러맵 불러오기</span></span><br><span class="line">        cmap_ = plt.get_cmap(cmap, ncmaps)</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches, <span class="number">1</span>):</span><br><span class="line">            p.set_facecolor(cmap_(i))         </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 파일명 입력시 입력받은 이름으로 저장.</span></span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename, dpi=<span class="number">200</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li><li><p>시각화 결과물이 출력될 Axes를 입력받을 수도 있고 그렇지 않을 수도 있습니다.</p></li><li><p>bar plot을 가로 방향 또는 세로 방향으로 출력할 수 있습니다.</p></li><li><p>bar 색상은 특정 색상을 지정할 수도 있지만 컬러맵을 사용할 수 있습니다.</p></li><li><p>컬러맵 사용시 맨 처음과 끝 색은 사용하지 않도록 설정했습니다. 지나치게 극단적인 색상 차를 방지하기 위해서입니다.</p></li></ul><ul><li>코드가 잘 작동하는지 테스트합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">1</span>], df)</span><br></pre></td></tr></table></figure><img src="75_survey07.png"><br></li></ul><ul><li>다른 axes에 삽입도 해보고 가로 방향도 돌려봅니다.</li><li>색상도 지정해보고, 너무 밝은 색에는 테두리도 둘러봅니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line">plot_count(Qs[<span class="number">1</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C1&quot;</span>, ax=axs[<span class="number">0</span>])</span><br><span class="line">plot_count(Qs[<span class="number">2</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C2&quot;</span>, ax=axs[<span class="number">1</span>])</span><br><span class="line">plot_count(Qs[<span class="number">3</span>], df, orient=<span class="string">&quot;h&quot;</span>, color=<span class="string">&quot;C3&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>, ax=axs[<span class="number">2</span>])</span><br><span class="line">fig.tight_layout()</span><br></pre></td></tr></table></figure><img src="75_survey08.png"><br></li></ul><h1 id="3-설문결과-정리"><a href="#3-설문결과-정리" class="headerlink" title="3. 설문결과 정리"></a>3. 설문결과 정리</h1><ul><li>크게 4개 항목에 대하여 설문조사를 수행했습니다.</li><li>보고서에 삽입될 그림이라 가로로 긴 모양을 택했습니다.</li></ul><p><b>1. 강의 전 본인의 상태:</b> 교육 참여자들의 파이썬, 머신러닝 친밀도와 학습 의지 조사<br><b>2. 강의 품질:</b> 강의 속도, 난이도 등 조사. 차기 강의에 반영하기 위한 데이터<br><b>3. 강의 후 본인의 상태:</b> 강의 효과 확인<br><b>4. 건의사항 등 강사에게 하고 싶은 말 (optional):</b> 설문에 담기지 않은 내용 조사</p><h2 id="3-1-강의-전-본인의-상태"><a href="#3-1-강의-전-본인의-상태" class="headerlink" title="3.1. 강의 전 본인의 상태"></a>3.1. 강의 전 본인의 상태</h2><ul><li><p>교육 참여자</p></li><li><p>첫 질문은 강의 전까지 파이썬 사용 경험입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">1</span>], df, filename=<span class="string">&quot;Q1.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>, </span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n한번도 안 써봤다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n주3회 이상 사용한다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q1.png"><br></p></li><li><p>두 번째 질문은 기존 머신러닝 경험입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">2</span>], df, filename=<span class="string">&quot;Q2.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n한번도 안 해봤다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n필요한 기술을\n능숙하게 사용한다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q2.png"><br></p></li><li><p>강의 전까지 본인 연구에 머신러닝을 활용할 계획이 있었는지 궁금했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">3</span>], df, filename=<span class="string">&quot;Q3.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n전혀 없었다&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 구체적이었다&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q3.png"><br></p></li><li><p>본인의 연차</p></li><li><p>ticklabels가 길어서 가로로 그렸습니다.</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">4</span>], df, filename=<span class="string">&quot;Q4.png&quot;</span>, cmap=<span class="string">&quot;Blues&quot;</span>, orient=<span class="string">&quot;h&quot;</span>,</span><br><span class="line">           ticks=[<span class="string">&quot;학부 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;석사과정 학생&quot;</span>, <span class="string">&quot;석사 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;박사과정 학생&quot;</span>, <span class="string">&quot;박사학위 소지자&quot;</span>], </span><br><span class="line">           ticklabels=[<span class="string">&quot;학부 졸업 후 현업 근무&quot;</span>, <span class="string">&quot;석사과정 학생&quot;</span>, <span class="string">&quot;석사 졸업 후 현업 근무&quot;</span>, </span><br><span class="line">                        <span class="string">&quot;박사과정 학생&quot;</span>, <span class="string">&quot;박사학위 소지자&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="Q4.png"><br></p><h2 id="3-2-강의-품질"><a href="#3-2-강의-품질" class="headerlink" title="3.2. 강의 품질"></a>3.2. 강의 품질</h2><ul><li>강의 커리큘럼은 적절했는지 궁금했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">5</span>], df, filename=<span class="string">&quot;Q5.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 불만족&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 만족&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q5.png"><br></li></ul><ul><li>강의 속도와 난이도가 가장 신경쓰였습니다.</li><li>강의 속도 항목입니다. <b>딱 중간이 가장 좋고 양 끝으로 갈수록 좋지 않습니다.</b></li><li>내용 전달을 위해 컬러맵을 좌우 대칭의 diverging 타입인 RdBu_r로 바꾸었습니다.</li><li>가운데가 매우 밝은 회색이라 배경의 흰색과 잘 구분이 안되기에 테두리를 둘렀습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">6</span>], df, filename=<span class="string">&quot;Q6.png&quot;</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n너무 느림&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n적절함&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n너무 빠름&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q6.png"><br></li></ul><ul><li>강의 난이도입니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">7</span>], df, filename=<span class="string">&quot;Q7.png&quot;</span>, cmap=<span class="string">&quot;RdBu_r&quot;</span>, ec=<span class="string">&quot;gray&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n너무 쉬움&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n적절함&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n너무 어려움&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q7.png"><br></li></ul><ul><li>제가 제대로 했는지 강의 전달력도 많이 궁금했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">8</span>], df, filename=<span class="string">&quot;Q8.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 불만족&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 만족&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q8.png"><br></li></ul><ul><li>주최측에서 앞으로 계속 키워가고자 하는 행사입니다.</li><li>앞으로의 흥행이 중요합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_count(Qs[<span class="number">9</span>], df, filename=<span class="string">&quot;Q9.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 부정&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 긍정&quot;</span>])</span><br></pre></td></tr></table></figure><img src="Q9.png"><br></li></ul><ul><li>피드백을 통해 감을 잡을 수 있었습니다.</li><li>다음 강의가 열린다면, 준비를 더 잘 할 수 있을 것 같습니다.</li></ul><h2 id="3-3-강의-후-본인의-상태"><a href="#3-3-강의-후-본인의-상태" class="headerlink" title="3.3. 강의 후 본인의 상태"></a>3.3. 강의 후 본인의 상태</h2><ul><li>강의 전과 비교하여 조금 적극적이 되기를 바랬습니다.</li><li>파이썬, 머신러닝, 본인 연구에 대한 변화가 있기를 바랬습니다.</li><li>강의 시작부분에서 <b>한시간 반으로는 맛배기도 안된다. 스스로 공부하시라</b>는 말을 했기에 마음가짐 변화가 가장 중요합니다.</li></ul><ul><li><b>함수로 그린 그림을 변수로 받아 수정합니다.</b></li><li>설문조사 결과도 강의 전 결과를 그림으로 삽입하여 비교했습니다.</li><li>함수로 만들어 사용할까 했지만 몇 개 안되어 코드를 복사해서 활용했습니다.</li></ul><ul><li>먼저, 강의 전 후 파이썬 학습 의사를 조사했습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수로 그림을 그립니다.</span></span><br><span class="line">ax = plot_count(Qs[<span class="number">10</span>], df, filename=<span class="string">&quot;Q10.png&quot;</span>, cmap=<span class="string">&quot;magma&quot;</span>,</span><br><span class="line">           ticklabels=[<span class="string">&quot;1\n매우 부정&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>, <span class="string">&quot;4\n&quot;</span>, <span class="string">&quot;5\n매우 긍정&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Axes를 담고 있는 Figure를 호출합니다.</span></span><br><span class="line">fig = ax.figure</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure에 비교할 그림을 붙일 공간을 확보합니다.</span></span><br><span class="line">ax_prev = fig.add_axes([<span class="number">0.05</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 강의 전 상태를 불러와서 붙입니다.</span></span><br><span class="line">im_prev = plt.imread(<span class="string">&quot;Q1.png&quot;</span>)</span><br><span class="line">ax_prev.imshow(im_prev)</span><br><span class="line">ax_prev.axis(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 결과를 정리합니다.</span></span><br><span class="line">fig.savefig(<span class="string">&quot;Q10.png&quot;</span>, dpi=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><img src="Q10.png"><br></li></ul><ul><li>강의 후 머신러닝 학습 의사입니다.</li><li>코드는 거의 동일합니다.<br><img src="Q11.png"><br></li></ul><ul><li>강의 후 본인 연구에 머신러닝을 활용할 의사입니다.</li><li>코드는 거의 동일합니다.<br><img src="Q12.png"><br></li></ul><ul><li>전반적으로 강의 전보다 후에 파이썬, 머신러닝, 본인 연구 적용 의사가 높아졌습니다.</li><li>감사하게도 응답을 잘 해주셨다는 생각도 듭니다만 실제로 이런 영향이 있으면 좋겠습니다. :)</li></ul><h2 id="3-4-건의사항-등-강사에게-하고-싶은-말-optional"><a href="#3-4-건의사항-등-강사에게-하고-싶은-말-optional" class="headerlink" title="3.4. 건의사항 등 강사에게 하고 싶은 말 (optional)"></a>3.4. 건의사항 등 강사에게 하고 싶은 말 (optional)</h2><ul><li>9분 중 6분으로부터 감사한 글들을 받았습니다.</li></ul><ul><li>세미나 형식의 발표는 다수 경험했고 온라인으로 단발적인 강의를 한 적은 있었습니다.</li><li>그러나 대면수업으로 진도를 나가는 경험이 처음이었고, 90분으로 커버가 되기 어려운 내용이라 범위와 형식 선정에 신경을 썼습니다.</li><li>다행히 반응이 호의적이어서 기운이 많이 납니다. </li><li>다시 한번 감사드리며, 다음 기회에는 더 좋은 발표를 할 수 있으면 좋겠습니다..<br><br><img src="75_survey10.png"><br></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      <category domain="https://jehyunlee.github.io/tags/Google-Form/">Google Form</category>
      
      
    </item>
    
    <item>
      <title>데이터 시각화 가이드 - 제발 이렇게 그리지 마세요</title>
      <link>https://jehyunlee.github.io/2021/05/24/Python-DS-74-datavisguide/</link>
      <guid>https://jehyunlee.github.io/2021/05/24/Python-DS-74-datavisguide/</guid>
      <pubDate>Mon, 24 May 2021 11:26:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;제 직장의 AI 학습조직 발표 영상입니다.&lt;ul&gt;
&lt;li&gt;시간관계상 실시간 발표 대신 온라인 영상 공유로 대신합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>제 직장의 AI 학습조직 발표 영상입니다.<ul><li>시간관계상 실시간 발표 대신 온라인 영상 공유로 대신합니다.</li></ul></li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/N_wkuXoRuPw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>더 좋은 그림이 있음에도 안좋은 그림을 그리곤 합니다.<ul><li>몰라서, 생각을 안해봐서, 코딩에 대한 두려움이 원인일 수 있습니다.</li><li><b>강의자료: <a href="210524_datavisguide.pdf">pdf 내려받기</a></b></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Matplotlib Vis. Function</title>
      <link>https://jehyunlee.github.io/2021/05/18/Python-DS-73-mplfunc/</link>
      <guid>https://jehyunlee.github.io/2021/05/18/Python-DS-73-mplfunc/</guid>
      <pubDate>Tue, 18 May 2021 05:18:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;자주 사용하는 기능은 함수로 만들면 편리합니다.&lt;/li&gt;
&lt;li&gt;마찬가지로 자주 그리는 그림은 함수로 만들면 좋습니다.&lt;/li&gt;
&lt;li&gt;Matplotlib 객체지향을 사용해 함수를 만듭시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-Par</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>자주 사용하는 기능은 함수로 만들면 편리합니다.</li><li>마찬가지로 자주 그리는 그림은 함수로 만들면 좋습니다.</li><li>Matplotlib 객체지향을 사용해 함수를 만듭시다.</li></ul><h1 id="1-Parity-plot"><a href="#1-Parity-plot" class="headerlink" title="1. Parity plot"></a>1. Parity plot</h1><ul><li>머신러닝 후 참값을 x축, 예측값을 y축에 놓고 얼마나 비슷한지 평가하고는 합니다.</li><li>이런 그림을 parity plot이라고 하며, 매우 자주 그리는 그림입니다.</li><li>그림이 목적이므로 데이터는 간단히 만듭니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 샘플 데이터 생성</span></span><br><span class="line">size = <span class="number">1000</span></span><br><span class="line">x = np.random.normal(size=size, loc=<span class="number">12</span>, scale=<span class="number">3</span>)</span><br><span class="line">y = x + np.random.normal(size=size, loc=<span class="number">0</span>, scale=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>그리고, parity plot은 이렇게 그려집니다.</p></li><li><p><b>x가 큰 지점에서는 예측값이 실제값보다 큽니다.</b></p></li><li><p><b>중앙부 기준 중심선에서 5정도 어긋난 듯 합니다.</b><br><br><img src="73_mplfunc_01.png"><br></p></li></ul><ul><li>많이 본 형태라 당연하게 여길 수 있겠지만 <b>그냥</b> 그리면 이렇습니다.</li><li>대충 일치하는 것 같기는 합니다.</li><li>그런데 얼마나 일치하고 얼마나 어긋나는지 잘 모르겠습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y, alpha=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_02.png"><br></li></ul><ul><li><p>x와 y축의 눈금을 일치시키고, grid와 중심선까지 그었기 때문에 보이는 것입니다.</p></li><li><p>코드는 이렇습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># data plot</span></span><br><span class="line">ax.scatter(x, y, c=<span class="string">&quot;g&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y limits</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y ticks, ticklabels</span></span><br><span class="line">ticks = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line">ax.set_xticks(ticks)</span><br><span class="line">ax.set_xticklabels(ticks)</span><br><span class="line">ax.set_yticks(ticks)</span><br><span class="line">ax.set_yticklabels(ticks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># grid</span></span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기준선</span></span><br><span class="line">ax.plot([<span class="number">0</span>, <span class="number">25</span>], [<span class="number">0</span>, <span class="number">25</span>], c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y label</span></span><br><span class="line">font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;true&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;predict&quot;</span>, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">ax.set_title(<span class="string">&quot;true vs predict&quot;</span>, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일로 저장</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;73_mplfunc_01.png&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>34줄의 코드를 머신러닝 프로젝트때마다 짤 수는 있겠지만 귀찮습니다.</p></li><li><p>함수로 만들어 자동화합시다.</p></li></ul><h1 id="2-함수-만들기"><a href="#2-함수-만들기" class="headerlink" title="2. 함수 만들기"></a>2. 함수 만들기</h1><ul><li>python에서 함수는 <b><code>def 함수이름(매개변수):</code></b>로 선언함으로써 만들어집니다.</li><li>그리고 함수 내부에 parity plot을 그리는 코드를 넣어주면 작동합니다.</li><li>그렇다면, 함수의 결과물은 무엇으로 하는 게 좋을까요? 매개변수에는 뭘 넣을까요?</li><li><b>간단한 예시를 만들며 고민해 봅시다</b></li></ul><h2 id="2-1-plot-sample"><a href="#2-1-plot-sample" class="headerlink" title="2.1. plot_sample()"></a>2.1. <code>plot_sample()</code></h2><blockquote><p><a href="https://matplotlib.org/stable/tutorials/text/mathtext.html">matplotlib: Writing mathematical expressions</a></p></blockquote><ul><li>x, y 데이터를 입력받아 scatter plot을 그리는 함수입니다.</li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample1</span>(<span class="params">x, y, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    ax.scatter(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>이 함수에 x와 y 데이터를 입력하면 다음과 같은 그림이 출력됩니다.</p></li><li><p>함수 내부에서 fontdict를 사용해 xlabel과 ylabel, title 형태를 미리 설정했기 때문에,<br><b>별다른 옵션을 지정하지 않았는데도 크기와 색상이 반영</b>되어 있습니다.</p></li><li><p>심지어 LaTeX 입력시 폰트도 roman(정확히는 Computer Modern)으로 설정됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_sample = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y_sample = np.sin(x_sample)</span><br><span class="line"></span><br><span class="line">plot_sample1(x_sample, y_sample, <span class="string">&quot;$X$&quot;</span>, <span class="string">&quot;$Y$&quot;</span>, <span class="string">&quot;$Y = \mathrm&#123;sin&#125;(X)$&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_03.png"><br></p></li><li><p>filename=에 적절한 이름을 담아 매개변수로 넣으면 파일 저장까지 자동으로 됩니다.</p></li></ul><ul><li>기본값이 지정되면 사용이 편리합니다.</li><li>xlabel, ylabel, title, filename의 <b>기본값 = None</b>으로 지정했기 때문에, 함수의 인자로 <b>x와 y만 입력해도 결과물이 출력됩니다.</b></li></ul><h2 id="2-2-시각화-유형-변환"><a href="#2-2-시각화-유형-변환" class="headerlink" title="2.2. 시각화 유형 변환"></a>2.2. 시각화 유형 변환</h2><ul><li>scatter plot 말고 다른 것도 그려봅시다.</li><li>경우에 따라 line plot을 그리고싶다면 매개변수에 종류가 있으면 됩니다.</li><li>seaborn과 pandas를 따라 이름은 <b>kind</b>로 지정합니다.</li></ul><ul><li><p>생각을 한번만 더 해봅시다.</p><ul><li>matplotlib에 익숙한 이이라면 <b><code>ax.scatter()</code></b>가 익숙할 것입니다.</li><li>seaborn을 많이 쓰는 사람이라면 <b><code>sns.scatterplot()</code></b>이 친숙할 겁니다.</li><li>kind=로 전달되는 인자에 <b>scatter</b>가 있기만 하면 scatter plot을 그립시다.</li><li><code>if &quot;scatter&quot; in kind:</code>로 구현할 수 있습니다.</li><li>line plot도 비슷하게 구현합니다.</li></ul></li><li><p>이제부터는 코드가 조금 길어집니다. 시각화 함수 코드는 기본적으로 숨겨두겠습니다.</p></li><li><p>여기를 클릭하면 보입니다.</p><details>  <summary><b><code>plot_sample2()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample2</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        ax.scatter(x, y)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        ax.plot(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><b>line plot</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_line.png"><br></p></li><li><p><b>scatter plot</b> (지정)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample, kind=<span class="string">&quot;scatterplot&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_scatter.png"><br></p></li><li><p><b>scatter plot</b> (기본값)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample2(x_sample, y_sample)</span><br></pre></td></tr></table></figure><p><img src="73_mplfunc_04_default.png"><br></p></li></ul><h2 id="2-3-유형에-따른-매개변수-입력"><a href="#2-3-유형에-따른-매개변수-입력" class="headerlink" title="2.3. 유형에 따른 매개변수 입력"></a>2.3. 유형에 따른 매개변수 입력</h2><blockquote><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html">matplotlib.axes.Axes.plot</a><br><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html">matplotlib.axes.Axes.scatter</a></p></blockquote><ul><li>Matplotlib의 <code>plot()</code>명령과 <code>scatter()</code>명령은 입력받는 인자가 다릅니다.</li><li>이 인자들을 모두 매개변수로 넣자면 너무 많고 코드 관리가 어렵습니다.</li><li><code>plot()</code>과 <code>scatter()</code>에 필요한 매개변수를 각기 <code>line_kws</code>과 <code>scatter_kws</code>라는 이름의 dictionary 형식으로 입력하게 합시다.</li></ul><ul><li><p>dictionary 형식의 인자는 기본값을 None으로 넣고, 실제 시각화 코드에 **line_kws 형식으로 unpacking하여 입력합니다.</p></li><li><p>keyword arguments로 None이 들어가면 에러가 나기 때문에 간단한 예외처리를 합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 선언 부분</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample3</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">                 </span><br><span class="line">    <span class="comment">#... 전략 ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#... 후략 ...#</span></span><br></pre></td></tr></table></figure></li><li><p>keyword parameter를 적용한 코드입니다.</p><details>  <summary><b><code>plot_sample3()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample3</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br></pre></td></tr></table></figure></li></ul><ul><li><b>line_kws 적용</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plot_sample3(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>,</span><br><span class="line">             line_kws=&#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;ls&quot;</span>:<span class="string">&quot;:&quot;</span>, <span class="string">&quot;lw&quot;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">             <span class="comment"># &quot;c&quot;: &quot;r&quot;  - line color = &quot;red&quot;</span></span><br><span class="line">             <span class="comment"># &quot;ls&quot;: &quot;:&quot; - line style = ......</span></span><br><span class="line">             <span class="comment"># &quot;lw&quot;: 3   - line width = 3</span></span><br></pre></td></tr></table></figure><img src="73_mplfunc_05_line.png"><br></li></ul><ul><li><b>scatter_kws 적용</b> : line_kws는 무시됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plot_sample3(x_sample, y_sample, kind=<span class="string">&quot;scatter&quot;</span>,</span><br><span class="line">             line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;r&quot;</span>, <span class="string">&quot;ls&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;lw&quot;</span>: <span class="number">3</span>&#125;,</span><br><span class="line">             scatter_kws=&#123;<span class="string">&quot;s&quot;</span>: <span class="number">50</span>, <span class="string">&quot;ec&quot;</span>: <span class="string">&quot;b&quot;</span>, <span class="string">&quot;alpha&quot;</span>: <span class="number">0.2</span>&#125;)</span><br><span class="line">             <span class="comment"># &quot;s&quot;: 50       - marker size = 50</span></span><br><span class="line">             <span class="comment"># &quot;ec&quot;: &quot;b&quot;     - marker color = &quot;blue&quot;</span></span><br><span class="line">             <span class="comment"># &quot;alpha&quot;: 0.2  - marker 불투명도 = 0.2</span></span><br></pre></td></tr></table></figure><img src="73_mplfunc_05_scatter.png"><br></li></ul><ul><li>이제 웬만한 함수는 원하는대로 만들 수 있습니다.</li><li>그런데, <b>한번 만들고 끝일까요?</b></li><li>함수를 실행할 때는 title을 달지 않았는데, 나중에 달고 싶지 않을까요?</li><li>그럴 때 return이 유용합니다.</li></ul><h2 id="2-4-Axes-as-return"><a href="#2-4-Axes-as-return" class="headerlink" title="2.4. Axes as return"></a>2.4. Axes as return</h2><ul><li>matplotlib의 구성요소인 axes를 return 시키면 많은 것이 가능합니다.</li><li>먼저, 기존의 코드에 <b><code>return ax</code></b>만 추가하고 실행해 봅니다.<details>  <summary><b><code>plot_sample4()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample4</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul><ul><li>line plot을 그립니다.</li><li>return된 axes에는 방금 그린 그림의 정보가 모두 포함되어 있습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax = plot_sample4(x_sample, y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;lw&quot;</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_06.png"><br></li></ul><ul><li>axes에 xlabel, ylabel, title을 추가할 수 있습니다. </li><li>plot 추가도 가능합니다. 코드도 일반적인 시각화와 동일합니다.</li><li>심지어 순차적으로 적용되는 line color도 그냥 그리는 그림과 같습니다. </li><li><b>당연합니다. 객체지향 방식이니까요 :)</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xlabel, ylabel, title 추가</span></span><br><span class="line">ax.set_xlabel(<span class="string">&quot;xlabel (postprocess)&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;ylabel (postprocess)&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;title (postprocess)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot 추가</span></span><br><span class="line">ax.plot(x_sample+<span class="number">1</span>, y_sample)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jupyter cell에서 시각화</span></span><br><span class="line">display(ax.figure)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_07.png"><br></li></ul><p><b>※ 주의 ※</b></p><ul><li>그러나 자세히 보면 x, y label에는 설정된 값들이 제대로 적용되지만 <b>title에는 색상만 적용됩니다.</b></li><li>title=None일 때 matplotlib axes가 담는 정보가 불충분한 것으로 생각됩니다.</li></ul><h2 id="2-5-Axes-as-input"><a href="#2-5-Axes-as-input" class="headerlink" title="2.5. Axes as input"></a>2.5. Axes as input</h2><ul><li>axes는 함수의 입력 매개변수로 작용할 때 그 진가를 발합니다.<ul><li><b>함수</b>는 <b>복잡한 명령을 한번에 실행</b>한다는 장점이 있지만 <b>유연성이 부족</b>합니다.</li><li><b>날코딩</b>은 <b>유연성이 풍족</b>하지만 <b>일일이 코딩하기 번잡합니다.</b></li><li>이 둘을 섞을 수 있는 방법이 <b>axes를 input으로 받는 것</b>입니다.</li></ul></li></ul><ul><li><p>머신러닝 예측결과 시각화로 예를 들어보겠습니다.</p><ul><li>parity plot은 실제값과 예측값을 비교하는 그림입니다.</li><li>trainset, validation set, testset <b>세 데이터</b> 모두에 대해 그릴 수 있습니다.</li><li>이 중 <b>하나만 그릴 때도 있고 둘만, 셋 다 그릴 때</b>가 있습니다.</li><li>이 때마다 함수를 일일이 만든다면 몹시 번거로울 것입니다.</li></ul></li><li><p>이럴 때 이런 해법을 만들 수 있습니다.   </p><ol><li><b><code>plt.subplots()</code>등으로 필요한 수만큼 Axes을 만듭니다.</b></li><li><b>준비된 함수로 각각의 Axes에 parity plot을 그립니다</b></li></ol></li></ul><ul><li>그러자면, 함수로 그려질 그림이 어디에 그려질지 지정되어야 합니다.</li><li><b>매개변수로 axes를 받으면 가능합니다.</b></li><li>axes가 지정되지 않으면 스스로 figure를 만들도록 합니다. 이 때 figure size도 인자로 넣읍시다.</li><li>파일로 저장하려면 figure 객체가 필요합니다. figure 객체는 axes 입력이 없을 때만 존재하니 예외처리를 합니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample5</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 figsize=plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>], ax=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#... 전략 ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#... 후략 ...#</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><details>  <summary><b><code>plot_sample5()</code> 코드 보기/접기</b></summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sample5</span>(<span class="params">x, y, kind=<span class="string">&quot;scatter&quot;</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, title=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 filename=<span class="literal">None</span>, line_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                 figsize=plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>], ax=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># math fonts</span></span><br><span class="line">    mathtext_fontset = plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>]</span><br><span class="line">    mathtext_default = plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = <span class="string">&quot;cm&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = <span class="string">&quot;it&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># object oriented interface</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;&#125;</span><br><span class="line">        ax.scatter(x, y, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;line&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line_kws:</span><br><span class="line">            line_kws=&#123;&#125;</span><br><span class="line">        ax.plot(x, y, **line_kws)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x, y labels</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;xx-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># math fonts restoration</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.fontset&#x27;</span>] = mathtext_fontset</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;mathtext.default&#x27;</span>] = mathtext_default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save figure</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul><ul><li><b>그냥 그리기</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_sample5(x_sample, y_sample)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_08.png"></li></ul><ul><li><b>subplots 안에 넣기</b><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">4</span>), sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">font_title = &#123;<span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 왼쪽 axes</span></span><br><span class="line">plot_sample5(x_sample, y_sample, ax=axs[<span class="number">0</span>])</span><br><span class="line">plot_sample5(<span class="number">10</span>-x_sample, y_sample, ax=axs[<span class="number">0</span>])</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&quot;plot 1&quot;</span>, fontdict=font_title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 오른쪽 axes</span></span><br><span class="line">plot_sample5(x_sample, -y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;r&quot;</span>&#125;, ax=axs[<span class="number">1</span>])</span><br><span class="line">plot_sample5(x_sample, <span class="number">1</span>-y_sample, kind=<span class="string">&quot;line&quot;</span>, line_kws=&#123;<span class="string">&quot;c&quot;</span>: <span class="string">&quot;g&quot;</span>&#125;, ax=axs[<span class="number">1</span>])</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&quot;plot 1&quot;</span>, fontdict=font_title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그림 저장</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&quot;73_mplfunc_09.png&quot;</span>)</span><br></pre></td></tr></table></figure><img src="73_mplfunc_09.png"></li></ul><ul><li>새로 그린 그림이 <code>plt.subplots()</code>로 만든 axes에 정확히 담겼습니다.</li><li>그 뿐 아니라 sharey=True 와 같은 <b>axes간 제약조건도 적용</b>됩니다. </li></ul><ul><li><b>함수의 문법이 어디선가 본 것 같다</b>고 생각하셨으면 맞게 본 것입니다.</li><li>seaborn의 함수들이 바로 이렇게 만들어졌고 작동합니다.</li></ul><h1 id="3-parity-plot"><a href="#3-parity-plot" class="headerlink" title="3. parity plot"></a>3. parity plot</h1><ul><li>다시 parity plot으로 돌아갑니다.</li><li>아래는 <b>제가 만든 함수로 그린 parity plot들</b>입니다.</li><li>다양한 경우에 활용할 수 있음을 알 수 있습니다.<br><br><img src="73_mplfunc_10.png" alt="case I"><br></li></ul><p><img src="73_mplfunc_11.png" alt="case II"><br></p><ul><li>코드입니다. 세 가지 지표를 평가하여 그림에 함께 담습니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.colors <span class="keyword">as</span> colors</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metrics</span>(<span class="params">true, predict</span>):</span></span><br><span class="line">    mae = mean_absolute_error(true, predict)</span><br><span class="line">    rmse = mean_squared_error(true, predict, squared=<span class="literal">False</span>)</span><br><span class="line">    r2 = r2_score(true, predict)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mae, rmse, r2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_parity</span>(<span class="params">true, pred, kind=<span class="string">&quot;scatter&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                xlabel=<span class="string">&quot;true&quot;</span>, ylabel=<span class="string">&quot;predict&quot;</span>, title=<span class="string">&quot;true vs predict&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                hist2d_kws=<span class="literal">None</span>, scatter_kws=<span class="literal">None</span>, kde_kws=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                equal=<span class="literal">True</span>, metrics=<span class="literal">True</span>, metrics_position=<span class="string">&quot;lower right&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                figsize=(<span class="params"><span class="number">4</span>, <span class="number">4</span></span>), ax=<span class="literal">None</span>, filename=<span class="literal">None</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig, ax = plt.subplots(figsize=figsize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data range</span></span><br><span class="line">    val_min = <span class="built_in">min</span>(true.<span class="built_in">min</span>(), pred.<span class="built_in">min</span>())</span><br><span class="line">    val_max = <span class="built_in">max</span>(true.<span class="built_in">max</span>(), pred.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data plot</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;scatter&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scatter_kws:</span><br><span class="line">            scatter_kws=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;alpha&#x27;</span>:<span class="number">0.5</span>&#125;</span><br><span class="line">        ax.scatter(true, pred, **scatter_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;hist2d&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hist2d_kws:</span><br><span class="line">            hist2d_kws=&#123;<span class="string">&#x27;cmap&#x27;</span>:<span class="string">&#x27;Greens&#x27;</span>, <span class="string">&#x27;vmin&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">        ax.hist2d(true, pred, **hist2d_kws)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;kde&quot;</span> <span class="keyword">in</span> kind:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kde_kws:</span><br><span class="line">            kde_kws=&#123;<span class="string">&#x27;cmap&#x27;</span>:<span class="string">&#x27;viridis&#x27;</span>, <span class="string">&#x27;levels&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">        sns.kdeplot(x=true, y=pred, **kde_kws, ax=ax)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y bounds</span></span><br><span class="line">    xbounds = ax.get_xbound()</span><br><span class="line">    ybounds = ax.get_ybound()</span><br><span class="line">    max_bounds = [<span class="built_in">min</span>(xbounds[<span class="number">0</span>], ybounds[<span class="number">0</span>]), <span class="built_in">max</span>(xbounds[<span class="number">1</span>], ybounds[<span class="number">1</span>])]</span><br><span class="line">    ax.set_xlim(max_bounds)</span><br><span class="line">    ax.set_ylim(max_bounds)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y ticks, ticklabels</span></span><br><span class="line">    ticks = [<span class="built_in">int</span>(y) <span class="keyword">for</span> y <span class="keyword">in</span> ax.get_yticks() <span class="keyword">if</span> (<span class="number">10</span>*y)%<span class="number">10</span> == <span class="number">0</span>]</span><br><span class="line">    ax.set_xticks(ticks)</span><br><span class="line">    ax.set_xticklabels(ticks)</span><br><span class="line">    ax.set_yticks(ticks)</span><br><span class="line">    ax.set_yticklabels(ticks)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># grid</span></span><br><span class="line">    ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 기준선</span></span><br><span class="line">    ax.plot(max_bounds, max_bounds, c=<span class="string">&quot;k&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y label</span></span><br><span class="line">    font_label = &#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>&#125;</span><br><span class="line">    ax.set_xlabel(xlabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line">    ax.set_ylabel(ylabel, fontdict=font_label, labelpad=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    font_title = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;gray&quot;</span>, <span class="string">&quot;fontsize&quot;</span>:<span class="string">&quot;x-large&quot;</span>, <span class="string">&quot;fontweight&quot;</span>:<span class="string">&quot;bold&quot;</span>&#125;</span><br><span class="line">    ax.set_title(title, fontdict=font_title, pad=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics</span></span><br><span class="line">    <span class="keyword">if</span> metrics:</span><br><span class="line">        rmse = mean_squared_error(true, pred, squared=<span class="literal">False</span>)</span><br><span class="line">        mae = mean_absolute_error(true, pred)</span><br><span class="line">        r2 = r2_score(true, pred)</span><br><span class="line"></span><br><span class="line">        font_metrics = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>:<span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> metrics_position == <span class="string">&quot;lower right&quot;</span>:</span><br><span class="line">            text_pos_x = <span class="number">0.98</span></span><br><span class="line">            text_pos_y = <span class="number">0.3</span></span><br><span class="line">            ha = <span class="string">&quot;right&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> metrics_position == <span class="string">&quot;upper left&quot;</span>:</span><br><span class="line">            text_pos_x = <span class="number">0.1</span></span><br><span class="line">            text_pos_y = <span class="number">0.9</span></span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text_pos_x, text_pos_y = text_position</span><br><span class="line">            ha = <span class="string">&quot;left&quot;</span></span><br><span class="line"></span><br><span class="line">        ax.text(text_pos_x, text_pos_y, <span class="string">f&quot;RMSE = <span class="subst">&#123;rmse:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line">        ax.text(text_pos_x, text_pos_y-<span class="number">0.1</span>, <span class="string">f&quot;MAE = <span class="subst">&#123;mae:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line">        ax.text(text_pos_x, text_pos_y-<span class="number">0.2</span>, <span class="string">f&quot;R2 = <span class="subst">&#123;r2:<span class="number">.3</span>f&#125;</span>&quot;</span>, </span><br><span class="line">                transform=ax.transAxes, fontdict=font_metrics, ha=ha)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 파일로 저장</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">        fig.tight_layout()</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            fig.savefig(filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/python/">python</category>
      
      <category domain="https://jehyunlee.github.io/tags/matplotlib/">matplotlib</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
    <item>
      <title>Python을 이용한 연구데이터 시각화 Part 3</title>
      <link>https://jehyunlee.github.io/2021/05/04/Python-DS-72-pythonvis3/</link>
      <guid>https://jehyunlee.github.io/2021/05/04/Python-DS-72-pythonvis3/</guid>
      <pubDate>Tue, 04 May 2021 01:55:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;공대 대학원생을 위한 &lt;b&gt;충북대학교 연구방법론 수업&lt;/b&gt;에서 발표한 내용입니다.&lt;br&gt;일부를 나누어 세 번째 영상을 올립니다. (Part 1: &lt;a href=&quot;https://jehyunlee.github.io/2021/04/30/P</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>공대 대학원생을 위한 <b>충북대학교 연구방법론 수업</b>에서 발표한 내용입니다.<br>일부를 나누어 세 번째 영상을 올립니다. (Part 1: <a href="https://jehyunlee.github.io/2021/04/30/Python-DS-70-pythonvis1/">바로가기</a>, Part 2: <a href="https://jehyunlee.github.io/2021/05/03/Python-DS-71-pythonvis2/">바로가기</a>)</li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/GqiiJ3yYapw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>논문이나 보고에 사용될 그림은 데이터만 덜렁 그리지 않습니다.<ul><li>시각화 구성요소 설정 방법을 배워봅니다.</li><li><b>강의자료: <a href="210427.pptx">ppt 내려받기</a></b></li><li><b>실습 코드: <a href="https://bit.ly/3ezUoZJ">https://bit.ly/3ezUoZJ</a></b></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://jehyunlee.github.io/categories/Python/">Python</category>
      
      <category domain="https://jehyunlee.github.io/categories/Python/Data-Science/">Data Science</category>
      
      
      <category domain="https://jehyunlee.github.io/tags/presentation/">presentation</category>
      
      <category domain="https://jehyunlee.github.io/tags/visualization/">visualization</category>
      
      
    </item>
    
  </channel>
</rss>
